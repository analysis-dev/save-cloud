@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.cosv.frontend.components.views.vuln

import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.entities.vulnerability.VulnerabilityDateDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDateType
import com.saveourtool.save.frontend.common.components.inputform.*
import com.saveourtool.save.frontend.common.components.modal.modal
import com.saveourtool.save.frontend.common.externals.i18next.useTranslation
import com.saveourtool.save.frontend.common.utils.*
import com.saveourtool.save.frontend.common.utils.WindowOpenness
import com.saveourtool.save.frontend.common.utils.buttonBuilder
import com.saveourtool.save.frontend.common.utils.dateStringToLocalDateTime
import com.saveourtool.save.frontend.common.utils.selectorBuilder
import com.saveourtool.save.utils.getTimeline

import react.FC
import react.Props
import react.StateSetter
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.span
import react.useState
import web.cssom.ClassName

/**
 * Component that allows to add new project in vulnerability
 */
val vulnerabilityDateModal: FC<VulnerabilityDateModalProps> = FC { props ->
    val (t) = useTranslation(arrayOf("vulnerability", "dates"))
    val (vulnerabilityDate, setVulnerabilityDate) = useState(VulnerabilityDateDto.empty)
    val (conflictMessage, setConflictMessage) = useState<String?>(null)

    modal { modalProps ->
        modalProps.isOpen = props.windowOpenness.isOpen()

        inputTextDisabled(
            InputTypes.CVE_NAME,
            "mt-3",
            "Vulnerability identifier".t(),
            props.identifier,
            true,
        )

        div {
            className = ClassName("mt-3")
            label {
                className = ClassName("form-label")
                +"Date type".t()
                span {
                    className = ClassName("text-danger text-left")
                    +"*"
                }
            }

            selectorBuilder(
                "dates:${vulnerabilityDate.type.value}".t(),
                // Show vulnerabilities EXCEPT which were already submitted or isSystemDateType
                VulnerabilityDateType
                    .values()
                    .filterNot { it.isSystemDateType() }
                    .filterNot { vulnType -> props.vulnerability.cosv.getTimeline().map { it.type }.contains(vulnType) }
                    .map { it.value },
                classes = "form-control custom-select",
            ) { event ->
                setVulnerabilityDate { date ->
                    val type = requireNotNull(
                        event.target.value.let { typeName ->
                            VulnerabilityDateType.values().find { "dates:${it.value}".t() == "dates:$typeName".t() }
                        }
                    )
                    date.copy(type = type)
                }
                setConflictMessage(null)
            }
        }

        inputDateFormRequired(
            InputTypes.CVE_DATE,
            true,
            "mt-3",
            "Date".t(),
        ) { event ->
            setVulnerabilityDate { date ->
                date.copy(date = event.target.value.dateStringToLocalDateTime())
            }
        }

        conflictMessage?.let {
            div {
                className = ClassName("text-center text-danger mt-2")
                +it
            }
        }

        div {
            className = ClassName("d-sm-flex align-items-center justify-content-around mt-4")
            buttonBuilder("Add", isActive = vulnerabilityDate.date != VulnerabilityDateDto.empty.date) {
                vulnerabilityDate.addThisDateToCosvTimeline(
                    props.vulnerability.cosv,

                    { newTimeline ->
                        props.setVulnerability(
                            props.vulnerability.copy(
                                cosv = props.vulnerability.cosv.copy(
                                    timeline = newTimeline
                                )
                            )
                        )
                    },

                    { date ->
                        props.setVulnerability(
                            props.vulnerability.copy(
                                cosv = props.vulnerability.cosv.copy(
                                    withdrawn = date
                                )
                            )
                        )
                    },

                    { date ->
                        props.setVulnerability(
                            props.vulnerability.copy(
                                cosv = props.vulnerability.cosv.copy(
                                    published = date
                                )
                            )
                        )
                    },
                )

                // cleaning vulnerabilityDate state and closing window
                setVulnerabilityDate(VulnerabilityDateDto.empty)
                props.windowOpenness.closeWindow()
            }
            buttonBuilder("Cancel", style = "secondary") {
                setVulnerabilityDate(VulnerabilityDateDto.empty)
                props.windowOpenness.closeWindow()
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityDateModal] component
 */
external interface VulnerabilityDateModalProps : Props {
    /**
     * Vulnerability dto of vulnerability: with cosv and metadata
     */
    var vulnerability: VulnerabilityExt

    /**
     * Vulnerability setter
     */
    var setVulnerability: StateSetter<VulnerabilityExt?>

    /**
     * Window openness
     */
    var windowOpenness: WindowOpenness

    /**
     * Callback invoked on successful date save
     */
    var onSuccess: () -> Unit

    /**
     * Identifier of vulnerability that the date should be linked to
     */
    var identifier: String
}
