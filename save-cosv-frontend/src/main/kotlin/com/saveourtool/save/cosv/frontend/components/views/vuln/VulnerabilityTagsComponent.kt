@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.cosv.frontend.components.views.vuln

import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.frontend.common.externals.fontawesome.faPlus
import com.saveourtool.save.frontend.common.externals.i18next.useTranslation
import com.saveourtool.save.frontend.common.utils.*
import com.saveourtool.save.frontend.common.utils.buttonBuilder
import com.saveourtool.save.frontend.common.utils.useTooltip
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes
import com.saveourtool.save.validation.isValidTag

import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.input
import react.router.useNavigate
import web.cssom.ClassName

import kotlinx.browser.window

/**
 * Component responsible for tag displaying and modifying
 */
val vulnerabilityTagsComponent: FC<VulnerabilityTagsComponentProps> = FC { props ->
    val (t) = useTranslation("vulnerability")
    useTooltip()
    val (newTag, setNewTag) = useState("")
    val (validityClassName, setValidityClassName) = useState<String?>(null)
    val navigate = useNavigate()

    @Suppress("MAGIC_NUMBER")
    useEffect(newTag) {
        setValidityClassName(
            when {
                newTag.isBlank() -> ""
                newTag.isValidTag() -> "is-valid"
                else -> "is-invalid"
            }
        )
    }

    if (!props.isEditDisabled) {
        div {
            className = ClassName("input-group shadow mb-1")
            input {
                className = ClassName("form-control custom-input $validityClassName")
                value = newTag
                placeholder = "Add a new tag...".t()
                title = "Tag should not have commas, length should be more than 1 and less than 16.".t()
                asDynamic()["data-toggle"] = "tooltip"
                asDynamic()["data-placement"] = "top"
                onChange = { event -> setNewTag(event.target.value) }
            }
            div {
                className = ClassName("input-group-append")
                buttonBuilder(faPlus, isOutline = true, isDisabled = !newTag.isValidTag()) {
                    props.setVulnerabilityExt(
                        props.vulnerability.copy(
                            metadataDto = props.vulnerability.metadataDto.copy(
                                tags = props.vulnerability.metadataDto.tags + newTag
                            )
                        )
                    )
                    setNewTag("")
                }
            }
        }
    }
    div {
        className = ClassName("col pl-0")
        props.vulnerability.metadataDto.tags.forEach { tag ->
            val tagEditable = props.currentUserInfo?.name == props.vulnerability.metadataDto.user.name
            buttonBuilder(
                tag,
                isOutline = true,
                classes = "rounded-pill text-sm btn-sm mx-1 mt-2"
            ) {
                if (tagEditable && !props.isEditDisabled) {
                    // TODO: use translation with substitution
                    if (window.confirm("Do you want to remove tag '$tag' from this vulnerability?")) {
                        props.setVulnerabilityExt(
                            props.vulnerability.copy(
                                metadataDto = props.vulnerability.metadataDto.copy(
                                    tags = props.vulnerability.metadataDto.tags - tag
                                )
                            )
                        )
                    }
                } else {
                    navigate("/${FrontendRoutes.VULNERABILITIES}?tag=$tag")
                }
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityTagsComponent]
 */
external interface VulnerabilityTagsComponentProps : Props {
    /**
     * Current vulnerability
     */
    var vulnerability: VulnerabilityExt

    /**
     *  Vulnerability setter (for tags propagation)
     */
    var setVulnerabilityExt: StateSetter<VulnerabilityExt?>

    /**
     * Current logged-in user
     */
    var currentUserInfo: UserInfo?

    /**
     * flag to change
     */
    var isEditDisabled: Boolean
}
