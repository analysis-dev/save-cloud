@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.cosv.frontend.components.views.vuln

import com.saveourtool.save.cosv.frontend.components.views.vuln.component.cvssBaseScoreCalculator
import com.saveourtool.save.cvsscalculator.CvssVersion
import com.saveourtool.save.cvsscalculator.parsingVectorToMap
import com.saveourtool.save.cvsscalculator.v3.CvssVectorV3
import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.frontend.common.components.modal.calculatorModalStyle
import com.saveourtool.save.frontend.common.components.modal.displayModal
import com.saveourtool.save.frontend.common.externals.i18next.useTranslation
import com.saveourtool.save.frontend.common.externals.progressbar.progressBar
import com.saveourtool.save.frontend.common.themes.Colors
import com.saveourtool.save.frontend.common.utils.buttonBuilder
import com.saveourtool.save.frontend.common.utils.useWindowOpenness

import com.saveourtool.osv4k.Severity
import com.saveourtool.osv4k.SeverityType
import js.core.jso
import react.FC
import react.Props
import react.StateSetter
import react.dom.html.ReactHTML.a
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h4
import web.cssom.*
import web.cssom.TextDecoration.Companion.underline

private const val FOR_GREEN = 3.9f
private const val FOR_YELLOW = 6.9f
private const val FOR_ORANGE = 8.9f
private const val MAX_VALUE = 10.0f

val vulnerabilityBadge: FC<VulnerabilityBadgeProps> = FC { props ->
    val (t) = useTranslation("vulnerability")
    val severityNum = props.vulnerability.metadataDto.vulnerabilityMetadataDto.severityNum
    val cvssCalculatorWindowOpenness = useWindowOpenness()

    @Suppress("EMPTY_BLOCK_STRUCTURE_ERROR")
    displayModal(
        cvssCalculatorWindowOpenness.isOpen(),
        "Base Score Calculator".t(),
        bodyBuilder = {
            cvssBaseScoreCalculator {
                baseMetricsOfVulnerability = props.vulnerability.cosv.severity?.singleOrNull { it.type == SeverityType.CVSS_V3 }
                    ?.let { CvssVectorV3(it.score.parsingVectorToMap()).baseMetrics }
                onCloseButton = { cvssCalculatorWindowOpenness.closeWindow() }
                onCloseButtonPassed = { baseMetrics ->
                    props.vulnerability.cosv.severity?.let { currentSeverityList ->
                        val severityV2Count = currentSeverityList.count { it.type == SeverityType.CVSS_V2 }
                        val severityList = currentSeverityList.toMutableList()

                        if (severityV2Count > 1) {
                            severityList.removeAll { it.type == SeverityType.CVSS_V2 }
                        }

                        val cvssVector = CvssVectorV3(CvssVersion.CVSS_V3_1, baseMetrics)
                        severityList.removeAll { it.type == SeverityType.CVSS_V3 }
                        severityList.add(
                            Severity(
                                type = SeverityType.CVSS_V3,
                                score = cvssVector.scoreVectorString(),
                                scoreNum = cvssVector.calculateBaseScore().toString(),
                            )
                        )

                        val vulnerabilityMetadataDto = props.vulnerability.metadataDto.vulnerabilityMetadataDto
                        props.setVulnerability {
                            it?.copy(
                                cosv = props.vulnerability.cosv.copy(severity = severityList.toList()),
                                metadataDto = props.vulnerability.metadataDto.copy(
                                    vulnerabilityMetadataDto = vulnerabilityMetadataDto.copy(severityNum = cvssVector.calculateBaseScore())
                                )
                            )
                        }
                    } ?: run {
                        val cvssVector = CvssVectorV3(CvssVersion.CVSS_V3_1, baseMetrics)
                        val severityList = listOf(Severity(
                            type = SeverityType.CVSS_V3,
                            score = cvssVector.scoreVectorString(),
                            scoreNum = cvssVector.calculateBaseScore().toString(),
                        ))

                        val vulnerabilityMetadataDto = props.vulnerability.metadataDto.vulnerabilityMetadataDto
                        props.setVulnerability {
                            it?.copy(
                                cosv = props.vulnerability.cosv.copy(severity = severityList),
                                metadataDto = props.vulnerability.metadataDto.copy(
                                    vulnerabilityMetadataDto = vulnerabilityMetadataDto.copy(severityNum = cvssVector.calculateBaseScore())
                                )
                            )
                        }
                    }
                }
            }
        },
        modalStyle = calculatorModalStyle,
        onCloseButtonPressed = cvssCalculatorWindowOpenness.closeWindowAction(),
        customWidth = jso { width = 45.rem }
    ) { }

    val (color, criticalityLabel) = when (severityNum) {
        in 0f..FOR_GREEN -> Colors.SUCCESS.value to "Low"
        in FOR_GREEN..FOR_YELLOW -> Colors.WARNING.value to "Medium"
        in FOR_YELLOW..FOR_ORANGE -> Colors.ORANGE.value to "High"
        in FOR_YELLOW..MAX_VALUE -> Colors.DANGER.value to "Critical"
        else -> throw IllegalStateException("Progress should be in [0; 10.0], got $severityNum")
    }
    div {
        className = ClassName("card shadow")
        style = jso {
            height = HEADER_HEIGHT.unsafeCast<Height>()
        }
        div {
            className = ClassName("card-body")
            div {
                className = ClassName("row")
                div {
                    className = ClassName("col-3 mr-1")
                    @Suppress("MAGIC_NUMBER", "MagicNumber")
                    div {
                        className = ClassName("row")
                        // need to multiply severity to have a proper circle
                        progressBar(severityNum * 10, color = color, size = "6.5rem", lineWidth = "3.5rem", showPercentageSymbol = true)
                    }
                }
                div {
                    className = ClassName("col-6")
                    div {
                        className = ClassName("row align-items-center mb-2")
                        h4 {
                            className = ClassName("text-gray-900 mb-2")
                            +"Criticality Scoring".t()
                        }
                    }
                    div {
                        className = ClassName("row align-items-center mb-2")
                        div {
                            className = ClassName("text-center text-xs font-weight-bold text-uppercase p-1")
                            style = jso {
                                border = "0.1rem solid $color".unsafeCast<Border>()
                                borderRadius = "1rem".unsafeCast<BorderRadius>()
                                this.color = color.unsafeCast<ColorProperty>()
                            }
                            +criticalityLabel
                        }
                    }
                    div {
                        className = ClassName("row")
                        a {
                            className = ClassName("nav-link text-xs d-flex pl-0 active")
                            href = "https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator"
                            style = jso {
                                textDecoration = underline
                            }
                            +"NVD CVSS"
                        }
                    }
                }
                div {
                    className = ClassName("col-2 ml-4")
                    div {
                        className = ClassName("row align-items-start justify-content-end")
                        if (!props.isEditDisabled) {
                            buttonBuilder("Edit".t(), style = "primary", isOutline = false) {
                                cvssCalculatorWindowOpenness.openWindow()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * [Props] of [vulnerabilityBadge]
 */
external interface VulnerabilityBadgeProps : Props {
    /**
     * Displayed vulnerability
     */
    var vulnerability: VulnerabilityExt

    /**
     * Vulnerability setter
     */
    var setVulnerability: StateSetter<VulnerabilityExt?>

    /**
     * If the edit button was not yet pressed
     */
    var isEditDisabled: Boolean
}
