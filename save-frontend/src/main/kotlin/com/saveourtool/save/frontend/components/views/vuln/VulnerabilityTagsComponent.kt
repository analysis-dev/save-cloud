@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.frontend.externals.fontawesome.faPlus
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.frontend.utils.noopResponseHandler
import com.saveourtool.save.validation.isValidTag

import js.core.jso
import react.FC
import react.Props
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.input
import react.useEffect
import react.useState
import web.cssom.ClassName

import kotlinx.browser.window

/**
 * Component responsible for tag displaying and modifying
 */
val vulnerabilityTagsComponent: FC<VulnerabilityTagsComponentProps> = FC { props ->
    useTooltip()
    val (newTag, setNewTag) = useState("")
    val (tagToDelete, setTagToDelete) = useState<String?>(null)
    val (tagToAdd, setTagToAdd) = useState<String?>(null)
    val (validityClassName, setValidityClassName) = useState<String?>(null)

    @Suppress("MAGIC_NUMBER")
    useEffect(newTag) {
        setValidityClassName(
            when {
                newTag.isBlank() -> ""
                newTag.isValidTag() -> "is-valid"
                else -> "is-invalid"
            }
        )
    }

    useRequest(arrayOf(tagToDelete)) {
        if (!tagToDelete.isNullOrBlank()) {
            val response = delete(
                url = "$apiUrl/vulnerabilities/delete-tag",
                headers = jsonHeaders,
                params = jso<dynamic> {
                    vulnerabilityName = props.vulnerabilityName
                    tagName = tagToDelete
                },
                loadingHandler = ::loadingHandler,
                responseHandler = ::noopResponseHandler,
            )
            if (response.ok) {
                props.fetchVulnerability()
            } else {
                window.alert(response.unpackMessageOrHttpStatus())
            }
            setTagToDelete(null)
        }
    }

    useRequest(arrayOf(tagToAdd)) {
        if (!tagToAdd.isNullOrBlank()) {
            val response = post(
                url = "$apiUrl/vulnerabilities/save-tag",
                headers = jsonHeaders,
                params = jso<dynamic> {
                    vulnerabilityName = props.vulnerabilityName
                    tagName = tagToAdd
                },
                body = undefined,
                loadingHandler = ::loadingHandler,
                responseHandler = ::noopResponseHandler,
            )
            if (response.ok) {
                props.fetchVulnerability()
            } else {
                window.alert(response.unpackMessageOrHttpStatus())
            }
            setTagToAdd(null)
        }
    }

    if (props.canEditVulnerability) {
        div {
            className = ClassName("input-group shadow")
            input {
                className = ClassName("form-control custom-input $validityClassName")
                value = newTag
                placeholder = "Add a new tag..."
                title = "Tag should not have commas, length should be more than 2 and less than 16."
                asDynamic()["data-toggle"] = "tooltip"
                asDynamic()["data-placement"] = "top"
                onChange = { event -> setNewTag(event.target.value) }
            }
            div {
                className = ClassName("input-group-append")
                buttonBuilder(faPlus, isOutline = true, isDisabled = !newTag.isValidTag()) {
                    setTagToAdd(newTag)
                    setNewTag("")
                }
            }
        }
    }
    div {
        className = ClassName("col pl-0")
        props.tags.forEach { tag ->
            buttonBuilder(
                tag,
                isOutline = true,
                classes = "rounded-pill text-sm btn-sm mx-1 mt-2"
            ) {
                if (window.confirm("Do you want to remove tag '$tag' from this vulnerability?")) {
                    setTagToDelete(tag)
                }
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityTagsComponent]
 */
external interface VulnerabilityTagsComponentProps : Props {
    /**
     * [Set] of vulnerability tags
     */
    var tags: Set<String>

    /**
     * Callback to fetch updated vulnerability
     */
    var fetchVulnerability: () -> Unit

    /**
     * Name of vulnerability
     */
    var vulnerabilityName: String

    /**
     * FLag that defines if current user can edit vulnerability or not
     */
    var canEditVulnerability: Boolean
}
