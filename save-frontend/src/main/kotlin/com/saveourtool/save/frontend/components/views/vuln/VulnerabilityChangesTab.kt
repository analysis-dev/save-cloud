@file:Suppress("FILE_NAME_MATCH_CLASS", "HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.cosv.CosvFileDto
import com.saveourtool.save.frontend.externals.diffviewer.reactDiffViewer
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.utils.toUnixCalendarFormat

import com.saveourtool.osv4k.RawOsvSchema
import js.core.jso
import react.FC
import react.Props
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.hr
import react.useState
import web.cssom.BorderBottom
import web.cssom.ClassName

import kotlinx.coroutines.await
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

private val json = Json { prettyPrint = true }

val vulnerabilityChangesTab: FC<VulnerabilityChangesTab> = FC { props ->

    val (cosvVersions, setCosvVersions) = useState(emptyList<CosvFileDto>())

    val (oldCosvFile, setOldCosvFile) = useState<CosvFileDto?>(null)
    val (newCosvFile, setNewCosvFile) = useState<CosvFileDto?>(null)

    val (oldVersion, setOldVersion) = useState("")
    val (newVersion, setNewVersion) = useState("")

    @Suppress("GENERIC_VARIABLE_WRONG_DECLARATION")
    val newValueRequest = useDeferredRequest {
        val cosvValueNew: String = get(
            url = "$apiUrl/cosv/cosv-content?cosvFileId=${newCosvFile?.id}",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
            .unsafeMap {
                it.text().await()
            }

        // FixMe: JSON.stringify() don't work in kotlinJs
        val decodeValue = Json.decodeFromString<RawOsvSchema>(cosvValueNew)
        setNewVersion(json.encodeToString(decodeValue))
    }

    @Suppress("GENERIC_VARIABLE_WRONG_DECLARATION")
    val oldValueRequest = useDeferredRequest {
        val cosvValueOld: String = get(
            url = "$apiUrl/cosv/cosv-content?cosvFileId=${oldCosvFile?.id}",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
            .unsafeMap {
                it.text().await()
            }

        // FixMe: JSON.stringify() don't work in kotlinJs
        val decodeValue = Json.decodeFromString<RawOsvSchema>(cosvValueOld)
        setOldVersion(json.encodeToString(decodeValue))
    }

    useRequest {
        val cosvVersionsNew: List<CosvFileDto> = get(
            url = "$apiUrl/cosv/list-versions?identifier=${props.identifier}",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString()
            }

        setNewCosvFile(cosvVersionsNew.last())
        if (cosvVersionsNew.size > 1) {
            setOldCosvFile(cosvVersionsNew[cosvVersionsNew.size - 2])
        } else {
            setOldCosvFile(cosvVersionsNew.last())
        }

        oldValueRequest()
        newValueRequest()
        setCosvVersions(cosvVersionsNew)
    }

    if (oldVersion != newVersion) {
        div {
            className = ClassName("row")

            div {
                className = ClassName("col-6 px-2 my-2 text-left align-self-center")
                +"Old version"

                selectorBuilder(
                    oldCosvFile?.modified?.toUnixCalendarFormat(isSeconds = true) ?: "",
                    cosvVersions.map { it.modified.toUnixCalendarFormat(isSeconds = true) },
                    classes = "input-group form-control custom-select",
                ) { event ->
                    val entries = event.target.value
                    val versionSelect = requireNotNull(cosvVersions.filter { it.modified.toUnixCalendarFormat(isSeconds = true) == entries }).single()
                    setOldCosvFile(versionSelect)
                    oldValueRequest()
                }
            }

            div {
                className = ClassName("col-6 px-2 my-2 text-left align-self-center")
                +"New version"

                selectorBuilder(
                    newCosvFile?.modified?.toUnixCalendarFormat(isSeconds = true) ?: "",
                    cosvVersions.map { it.modified.toUnixCalendarFormat(isSeconds = true) },
                    classes = "input-group form-control custom-select",
                ) { event ->
                    val entries = event.target.value
                    val versionSelect = requireNotNull(cosvVersions.filter { it.modified.toUnixCalendarFormat(isSeconds = true) == entries }).single()
                    setNewCosvFile(versionSelect)
                    newValueRequest()
                }
            }
        }
        reactDiffViewer {
            oldValue = oldVersion
            newValue = newVersion
        }
    } else {
        div {
            className = ClassName("separator")
            style = jso {
                borderBottom = "0.07rem #000000".unsafeCast<BorderBottom>()
            }
            +"The Vulnerability was not changed."
        }

        @Suppress("EMPTY_BLOCK_STRUCTURE_ERROR")
        hr {}
    }
}

/**
 * [Props] of vulnerability changes tab component
 */
external interface VulnerabilityChangesTab : Props {
    /**
     * Vulnerability identifier
     */
    var identifier: String
}
