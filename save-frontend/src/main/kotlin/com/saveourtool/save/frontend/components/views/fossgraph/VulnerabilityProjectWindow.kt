@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.fossgraph

import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectType
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.inputform.inputTextFormOptional
import com.saveourtool.save.frontend.components.inputform.inputTextFormRequired
import com.saveourtool.save.frontend.components.modal.modal
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.validation.isValidUrl

import react.FC
import react.Props
import react.dom.html.ReactHTML.button
import react.dom.html.ReactHTML.div
import react.useState
import web.cssom.ClassName
import web.html.ButtonType

/**
 * Component that allows to add new project in vulnerability
 */
val vulnerabilityProjectWindow = createVulnerabilityProjectWindow()

/**
 * VulnerabilityProjectWindow component props
 */
external interface VulnerabilityProjectWindowProps : Props {
    /**
     * Window openness
     */
    var windowOpenness: WindowOpenness

    /**
     * Request to fetch project credentials
     */
    var fetchProjectCredentials: (VulnerabilityProjectDto) -> Unit
}

@Suppress(
    "TOO_LONG_FUNCTION",
    "LongMethod",
    "TYPE_ALIAS",
)
private fun createVulnerabilityProjectWindow() = FC<VulnerabilityProjectWindowProps> { props ->

    val (conflictErrorMessage, setConflictErrorMessage) = useState<String?>(null)
    val (vulnerabilityProject, setVulnerabilityProject) = useState(VulnerabilityProjectDto.empty)

    modal { modalProps ->
        modalProps.isOpen = props.windowOpenness.isOpen()

        inputTextFormRequired {
            form = InputTypes.PROJECT_NAME
            conflictMessage = "Name must not be empty"
            textValue = vulnerabilityProject.name
            validInput = vulnerabilityProject.name.isNotBlank()
            classes = "col-md-12 pl-2 pr-2 mt-3 text-left"
            name = "Project Name:"
            onChangeFun = { event ->
                setVulnerabilityProject(vulnerabilityProject.copy(name = event.target.value))
                setConflictErrorMessage(null)
            }
        }

        inputTextFormRequired {
            form = InputTypes.GIT_URL
            textValue = vulnerabilityProject.url
            validInput = vulnerabilityProject.url.isValidUrl()
            classes = "col-md-12 pl-2 pr-2 mt-3 text-left"
            name = "Project Url:"
            onChangeFun = { event ->
                setVulnerabilityProject(vulnerabilityProject.copy(url = event.target.value))
                setConflictErrorMessage(null)
            }
        }

        inputTextFormOptional {
            form = InputTypes.PROJECT_VERSION
            textValue = vulnerabilityProject.versions
            validInput = conflictErrorMessage.isNullOrEmpty()
            classes = "col-md-12 pl-2 pr-2 mt-3 text-left"
            name = "Versions"
            onChangeFun = { event ->
                setVulnerabilityProject(vulnerabilityProject.copy(versions = event.target.value))
            }
        }

        div {
            className = ClassName("col-md-12 pl-2 pr-2 mt-3 text-left align-self-center")
            +"Type of project: "

            selectorBuilder(
                vulnerabilityProject.type.value,
                VulnerabilityProjectType.values().map { it.toString() },
                classes = "input-group form-control",
            ) { event ->
                val entries = event.target.value
                setVulnerabilityProject(vulnerabilityProject.copy(type = VulnerabilityProjectType.valueOf(entries.uppercase())))
            }
        }

        div {
            className = ClassName("d-sm-flex align-items-center justify-content-center mt-4")
            button {
                type = ButtonType.button
                className = ClassName("btn btn-primary mr-3")
                onClick = {
                    if (vulnerabilityProject.name.isBlank() || !vulnerabilityProject.url.isValidUrl()) {
                        setConflictErrorMessage("Please input a valid Name and URL")
                    } else {
                        props.fetchProjectCredentials(vulnerabilityProject)
                        setVulnerabilityProject(VulnerabilityProjectDto.empty)
                    }
                }
                +"Add"
            }
            button {
                type = ButtonType.button
                className = ClassName("btn btn-outline-primary")
                onClick = props.windowOpenness.closeWindowAction().withUnusedArg()
                +"Cancel"
            }
        }

        conflictErrorMessage?.let {
            div {
                className = ClassName("invalid-feedback d-block text-center")
                +it
            }
        }
    }
}
