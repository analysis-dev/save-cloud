/**
 * View for vulnerability tables
 */

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.cosv.VulnerabilityMetadataDto
import com.saveourtool.save.filters.VulnerabilityFilter
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.components.basic.renderOrganizationWithName
import com.saveourtool.save.frontend.components.basic.renderUserAvatarWithName
import com.saveourtool.save.frontend.components.basic.table.filters.vulnerabilitiesFiltersRow
import com.saveourtool.save.frontend.components.tables.*
import com.saveourtool.save.frontend.components.views.contests.tab
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.themes.Colors
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.frontend.utils.noopResponseHandler
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.td
import react.dom.html.ReactHTML.th
import react.dom.html.ReactHTML.tr
import react.router.dom.Link
import web.cssom.Border
import web.cssom.ClassName
import web.cssom.ColorProperty
import web.cssom.rem

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

/**
 * [FC] for [vulnerabilityTableComponent]
 */
val vulnerabilityTableComponent: FC<VulnerabilityTableComponentProps> = FC { props ->
    val (t, i18n) = useTranslation(TABLE_HEADERS_LOCALE_NAMESPACE)

    val isVulnerabilityCollectionPage = props.currentUserInfo != null && props.userName == null && props.organizationName == null
    val isUserProfilePage = props.currentUserInfo == null && props.userName != null && props.organizationName == null
    val isOrganizationPage = props.currentUserInfo == null && props.userName == null && props.organizationName != null

    val (selectedMenu, setSelectedMenu) = useState(VulnerabilityListTab.PUBLIC)

    // don't show submitter on user profile page and on vulnerability collection page on owner tab (coz it's always current user)
    val (isNeedToShowCosvSubmitter, setIsNeedToShowCosvSubmitter) = useState(!isUserProfilePage)
    // don't show organization on organization page
    val isNeedToShowOrganization = !isOrganizationPage
    // don't show status on vulnerability collection page on public or admin tabs
    val (isNeedToShowStatus, setIsNeedToShowStatus) = useState(!isVulnerabilityCollectionPage)

    val (vulnerabilityFilter, setVulnerabilityFilter) = useState {
        when {
            isVulnerabilityCollectionPage -> props.filters ?: VulnerabilityFilter.approved
            isUserProfilePage -> VulnerabilityFilter(authorName = props.userName)
            isOrganizationPage -> VulnerabilityFilter(organizationName = props.organizationName)
            else -> VulnerabilityFilter.empty
        }
    }
    val (countVulnerability, setCountVulnerability) = useState(0)

    val enrollRequest = useDeferredRequest {
        val count: Int = post(
            url = "$apiUrl/vulnerabilities/count/by-filter",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityFilter),
            loadingHandler = ::noopLoadingHandler,
            responseHandler = ::noopResponseHandler,
        ).unsafeMap {
            it.decodeFromJsonString()
        }
        setCountVulnerability(count)
    }

    val vulnerabilityListTable: FC<VulnerabilityTableProps> = useMemo(isNeedToShowCosvSubmitter, isNeedToShowOrganization, isNeedToShowStatus, i18n.language) {
        tableComponent(
            columns = {
                columns {
                    column(id = "identifier", header = "Identifier".t(), { identifier }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle text-nowrap")
                                div {
                                    className = ClassName("row m-0")
                                    Link {
                                        to = "/${FrontendRoutes.VULNERABILITY_SINGLE}/${cellContext.row.original.identifier}"
                                        +cellContext.value
                                    }
                                }
                                div {
                                    className = ClassName("row m-0")
                                    cellContext.row.original.tags.forEach { tag ->
                                        div {
                                            className = ClassName("rounded-pill px-1 mt-1 mr-1")
                                            style = jso {
                                                fontSize = 0.8.rem
                                                color = Colors.VULN_PRIMARY.value.unsafeCast<ColorProperty>()
                                                border = "0.01rem solid $color".unsafeCast<Border>()
                                            }
                                            +tag
                                        }
                                    }
                                }
                            }
                        }
                    }
                    column(id = "summary", header = "Summary".t(), { summary }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.row.original.summary
                            }
                        }
                    }
                    column(id = "severityNum", header = "Criticality".t(), { severityNum }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle text-center")
                                +"${cellContext.row.original.severityNum}"
                            }
                        }
                    }
                    column(id = "language", header = "Language".t(), { language }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle text-center")
                                +"${cellContext.row.original.language}"
                            }
                        }
                    }
                    if (isNeedToShowCosvSubmitter) {
                        column(id = "user", header = "COSV Submitter".t(), { user.name }) { cellContext ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle")
                                    cellContext.row.original.user.let { user ->
                                        renderUserAvatarWithName(user) {
                                            height = 2.rem
                                            width = 2.rem
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (isNeedToShowOrganization) {
                        column(id = "organization", header = "Organization".t(), { organization?.name }) { cellContext ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle")
                                    cellContext.row.original.organization?.let { organization ->
                                        renderOrganizationWithName(organization) {
                                            height = 2.rem
                                            width = 2.rem
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (isNeedToShowStatus) {
                        column(id = "status", header = "Status".t(), { status }) { cellContext ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle text-center text-nowrap")
                                    +cellContext.row.original.status.value
                                }
                            }
                        }
                    }
                }
            },
            initialPageSize = if (isVulnerabilityCollectionPage) VULNERABILITIES_COLLECTION_TABLE_PAGE_SIZE else INITIAL_TABLE_PAGE_SIZE,
            useServerPaging = true,
            isTransparentGrid = true,
            tableOptionsCustomizer = { tableOptions ->
                enableExpanding(tableOptions)
            },
        ) {
            arrayOf(it.filters, it.count)
        }
    }

    if (isVulnerabilityCollectionPage) {
        props.currentUserInfo?.globalRole?.let { role ->
            val tabList = if (role.isSuperAdmin()) {
                VulnerabilityListTab.entries.map { it.name }
            } else {
                VulnerabilityListTab.entries.filter { it != VulnerabilityListTab.ADMIN }
                    .map { it.name }
            }
            tab(selectedMenu.name, tabList, "nav nav-tabs mt-3") { value ->
                setSelectedMenu { VulnerabilityListTab.valueOf(value) }
                setVulnerabilityFilter {
                    getFiltersByTab(
                        VulnerabilityListTab.valueOf(value),
                        setIsNeedToShowCosvSubmitter,
                        setIsNeedToShowStatus,
                        props.currentUserInfo
                    )
                }
            }
        }
    }

    vulnerabilityListTable {
        filters = vulnerabilityFilter
        count = countVulnerability
        getData = { page, size ->
            post(
                url = "$apiUrl/vulnerabilities/by-filter",
                params = jso<dynamic> {
                    this.page = page
                    this.size = size
                },
                headers = jsonHeaders,
                body = Json.encodeToString(vulnerabilityFilter),
                loadingHandler = ::loadingHandler,
                responseHandler = ::noopResponseHandler,
            ).unsafeMap {
                it.decodeFromJsonString()
            }
        }
        getPageCount = { pageSize ->
            enrollRequest()
            pageCount(countVulnerability, pageSize)
        }
        commonHeaderBuilder = { cb, tableInstance, _ ->
            with(cb) {
                tr {
                    th {
                        colSpan = tableInstance.visibleColumnsCount()
                        vulnerabilitiesFiltersRow {
                            filter = vulnerabilityFilter
                            onChangeFilter = { filterValue ->
                                filterValue?.let {
                                    setVulnerabilityFilter(filterValue)
                                } ?: run {
                                    setVulnerabilityFilter {
                                        when {
                                            isVulnerabilityCollectionPage -> getFiltersByTab(
                                                selectedMenu,
                                                setIsNeedToShowCosvSubmitter,
                                                setIsNeedToShowStatus,
                                                props.currentUserInfo
                                            )
                                            isUserProfilePage -> VulnerabilityFilter(authorName = props.userName)
                                            isOrganizationPage -> VulnerabilityFilter(organizationName = props.organizationName)
                                            else -> VulnerabilityFilter.empty
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * Enum that contains values for vulnerability tab
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityListTab {
    PUBLIC,
    ADMIN,
    OWNER,
    ;

    companion object : TabMenuBar<VulnerabilityListTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityListTab = PUBLIC
        override val regexForUrlClassification = "/${FrontendRoutes.VULN}"
        override fun valueOf(elem: String): VulnerabilityListTab = VulnerabilityListTab.valueOf(elem)
        override fun values(): Array<VulnerabilityListTab> = entries.toTypedArray()
    }
}

/**
 * [TableProps] for vulnerabilities table
 */
external interface VulnerabilityTableProps : TableProps<VulnerabilityMetadataDto> {
    /**
     * All filters in one value [filters]
     */
    var filters: VulnerabilityFilter?

    /**
     * Count of vulnerability
     */
    var count: Int?
}

/**
 * [Props] of vulnerability table view
 */
external interface VulnerabilityTableComponentProps : Props {
    /**
     * Current logged-in user on vulnerability collection page
     */
    var currentUserInfo: UserInfo?

    /**
     * Name of user on user profile page
     */
    var userName: String?

    /**
     * Name of organization on organization page
     */
    var organizationName: String?

    /**
     * All preset filters in one value [filters]
     */
    var filters: VulnerabilityFilter?
}

/**
 * @return [VulnerabilityFilter] depending on [VulnerabilityListTab]
 */
private fun getFiltersByTab(
    selectedMenu: VulnerabilityListTab,
    setIsNeedToShowCosvSubmitter: StateSetter<Boolean>,
    setIsNeedToShowStatus: StateSetter<Boolean>,
    currentUserInfo: UserInfo?
) = when (selectedMenu) {
    VulnerabilityListTab.PUBLIC -> {
        setIsNeedToShowCosvSubmitter(true)
        setIsNeedToShowStatus(false)
        VulnerabilityFilter.approved
    }
    VulnerabilityListTab.ADMIN -> {
        setIsNeedToShowCosvSubmitter(true)
        setIsNeedToShowStatus(false)
        VulnerabilityFilter.pendingReview
    }
    VulnerabilityListTab.OWNER -> {
        setIsNeedToShowCosvSubmitter(false)
        setIsNeedToShowStatus(true)
        VulnerabilityFilter(isOwner = true, authorName = currentUserInfo?.name)  // TODO: delete isOwner?
    }
}

/**
 * @return the page count, using the [total] number of items and the [pageSize]
 *   items per page.
 */
private fun pageCount(total: Int, pageSize: Int): Int {
    require(total >= 0) {
        "total should be non-negative: $total"
    }
    require(pageSize > 0) {
        "pageSize should be positive: $pageSize"
    }

    /*-
     * Source: "Number Conversion" by Roland Backhouse
     * (http://www.cs.nott.ac.uk/~psarb2/G51MPC/slides/NumberLogic.pdf).
     *
     * This shouldn't be simplified: otherwise, if `total` is 0,
     * the page count of 1 would still be returned.
     */
    return (total + pageSize - 1) / pageSize
}
