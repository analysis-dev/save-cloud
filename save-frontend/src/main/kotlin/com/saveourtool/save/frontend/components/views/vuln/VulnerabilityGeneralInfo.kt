package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.frontend.components.basic.renderAvatar
import com.saveourtool.save.frontend.components.basic.renderUserAvatarWithName
import com.saveourtool.save.frontend.components.basic.userBoard
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.utils.toUnixCalendarFormat

import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h6
import react.dom.html.ReactHTML.hr
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.textarea
import react.router.dom.Link
import web.cssom.ClassName
import web.cssom.rem

import kotlinx.datetime.TimeZone

/**
 * [FC] that is used to display some general vulnerability information
 */
@Suppress("EMPTY_BLOCK_STRUCTURE_ERROR", "MAGIC_NUMBER")
val vulnerabilityGeneralInfo: FC<VulnerabilityGeneralInfo> = FC { props ->
    with(props.vulnerability) {
        vulnerabilityBadge {
            vulnerability = this@with
        }
        div {
            className = ClassName("card shadow mt-3 mb-4")

            div {
                className = ClassName("card-body")
                div {
                    className = ClassName("font-weight-bold text-primary text-uppercase mb-4")
                    +name
                }
                textarea {
                    className = ClassName("auto_height form-control-plaintext pt-0 pb-0")
                    value = shortDescription
                    rows = 2
                    disabled = true
                }
                hr { }
                div {
                    className = ClassName("d-flex justify-content-between align-items-center")
                    label {
                        className = ClassName("m-0")
                        +"Creation time:"
                    }
                    label {
                        className = ClassName("m-0")
                        +creationDateTime?.toUnixCalendarFormat(TimeZone.currentSystemDefault())
                    }
                }
                div {
                    className = ClassName("d-flex justify-content-between align-items-center")
                    label {
                        className = ClassName("m-0")
                        +"Last updated time:"
                    }
                    label {
                        className = ClassName("m-0")
                        +(lastUpdatedDateTime?.toUnixCalendarFormat(TimeZone.currentSystemDefault()))
                    }
                }
                hr { }
                h6 {
                    className = ClassName("font-weight-bold text-primary mb-4")
                    +"Description"
                }
                textarea {
                    className = ClassName("auto_height form-control-plaintext pt-0 pb-0")
                    value = description
                    rows = 8
                    disabled = true
                }
                if (!vulnerabilityIdentifier.isNullOrEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary mb-4")
                        +"Original Identifier"
                    }
                    div {
                        +vulnerabilityIdentifier
                    }
                }
                if (props.canEditVulnerability || props.vulnerability.tags.isNotEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary mb-4")
                        +"Tags"
                    }
                    div {
                        vulnerabilityTagsComponent {
                            tags = props.vulnerability.tags
                            vulnerabilityName = props.vulnerability.name
                            fetchVulnerability = props.fetchVulnerability
                            canEditVulnerability = props.canEditVulnerability
                        }
                    }
                }
                if (!relatedLink.isNullOrEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary mb-4")
                        +"Related link"
                    }
                    Link {
                        to = relatedLink.toString()
                        +relatedLink
                    }
                }
                userInfo.run {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary mb-3")
                        +"Author"
                    }
                    renderUserAvatarWithName(this@run) {
                        height = 4.rem
                        width = 4.rem
                    }
                }

                organization?.run {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary mb-3")
                        +"Organization"
                    }
                    Link {
                        renderAvatar(this@run) {
                            height = 2.rem
                            width = 2.rem
                        }
                        to = "/${organization?.name}"
                        +" ${organization?.name}"
                    }
                }
                if (participants.isNotEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary mb-4")
                        +"Users"
                    }
                    userBoard {
                        users = participants
                        avatarOuterClasses = "col-2"
                    }
                }
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityGeneralInfo] component
 */
external interface VulnerabilityGeneralInfo : Props {
    /**
     * [VulnerabilityDto] to display info about
     */
    var vulnerability: VulnerabilityDto

    /**
     * Callback to fetch updated vulnerability
     */
    var fetchVulnerability: () -> Unit

    /**
     * FLag that defines if current user can edit vulnerability or not
     */
    var canEditVulnerability: Boolean
}
