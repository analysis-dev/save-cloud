package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.frontend.components.basic.renderAvatar
import com.saveourtool.save.frontend.components.basic.renderUserAvatarWithName
import com.saveourtool.save.frontend.components.basic.userBoard
import com.saveourtool.save.frontend.externals.fontawesome.*
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.utils.toUnixCalendarFormat

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h6
import react.dom.html.ReactHTML.hr
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.p
import react.dom.html.ReactHTML.textarea
import react.router.dom.Link
import web.cssom.ClassName
import web.cssom.TextDecoration.Companion.underline
import web.cssom.rem

import kotlinx.datetime.TimeZone
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

/**
 * [FC] that is used to display some general vulnerability information
 */
@Suppress("EMPTY_BLOCK_STRUCTURE_ERROR", "MAGIC_NUMBER")
val vulnerabilityGeneralInfo: FC<VulnerabilityGeneralInfo> = FC { props ->
    val (t) = useTranslation("vulnerability")

    val enrollRequest = useDeferredRequest {
        post(
            "$apiUrl/vulnerabilities/update",
            jsonHeaders,
            Json.encodeToString(props.vulnerability),
            loadingHandler = ::loadingHandler,
        )
    }

    with(props.vulnerability) {
        div {
            className = ClassName("card shadow mt-3 mb-4")

            div {
                className = ClassName("card-body")
                div {
                    className = ClassName("row mb-4")
                    div {
                        className = ClassName("col-6 align-self-center")
                        div {
                            className = ClassName("font-weight-bold text-primary-blue text-uppercase")
                            +identifier
                        }
                    }
                    if (props.isEditDisabled) {
                        // only Super Users and owners of unapproved vuln. can edit it
                        if (props.userInfo?.isSuperAdmin() == true ||
                                (props.userInfo?.name == userInfo.name && props.vulnerability.status != VulnerabilityStatus.APPROVED)) {
                            buttonBuilder(
                                labelBuilder = {
                                    p {
                                        className = ClassName("mb-0")
                                        style = jso {
                                            textDecoration = underline
                                        }
                                        +"Edit ".t()
                                        fontAwesomeIcon(icon = faEdit)
                                    }
                                },
                                isOutline = true, classes = "text-xs text-left ml-auto"
                            ) {
                                props.setIsEditDisabled(false)
                            }
                        }
                    } else {
                        buttonBuilder(faCheck, "link", isOutline = true, classes = "text-muted text-left ml-auto") {
                            enrollRequest()
                            props.setIsEditDisabled(true)
                        }
                        buttonBuilder(faTimesCircle, null, isOutline = true) {
                            props.setVulnerability(props.vulnerability)
                            props.setIsEditDisabled(true)
                        }
                    }
                }
                textarea {
                    className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                    value = shortDescription
                    disabled = props.isEditDisabled
                    rows = 2
                    if (!props.isEditDisabled) {
                        style = borderEditStyle()
                    }
                    onChange = { event ->
                        props.setVulnerability { vulnerability ->
                            vulnerability.copy(
                                shortDescription = event.target.value
                            )
                        }
                    }
                }
                hr { }
                div {
                    className = ClassName("d-flex justify-content-between align-items-center")
                }
                div {
                    className = ClassName("d-flex justify-content-between align-items-center")
                    label {
                        className = ClassName("m-0")
                        +"Last update time:".t()
                    }
                    label {
                        className = ClassName("m-0")
                        +(lastUpdatedDateTime?.toUnixCalendarFormat(TimeZone.currentSystemDefault()))
                    }
                }
                hr { }
                h6 {
                    className = ClassName("font-weight-bold text-primary-blue mb-4")
                    +"Details".t()
                }
                textarea {
                    className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                    value = description
                    disabled = props.isEditDisabled
                    rows = 8
                    if (!props.isEditDisabled) {
                        style = borderEditStyle()
                    }
                    onChange = { event ->
                        props.setVulnerability { vulnerability ->
                            vulnerability.copy(
                                description = event.target.value
                            )
                        }
                    }
                }
                if (props.canEditVulnerability || props.vulnerability.tags.isNotEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Tags".t()
                    }
                    div {
                        vulnerabilityTagsComponent {
                            userInfo = props.userInfo
                            tags = props.vulnerability.tags
                            this.vulnerability = props.vulnerability
                            fetchVulnerability = props.fetchVulnerability
                            canEditVulnerability = props.canEditVulnerability
                            isEditDisabled = props.isEditDisabled
                        }
                    }
                }
                if (!relatedLink.isNullOrEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"References".t()
                    }
                    Link {
                        to = relatedLink.toString()
                        +relatedLink
                    }
                }
                userInfo.run {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-3")
                        +"Author".t()
                    }
                    renderUserAvatarWithName(this@run, isHorizontal = true, classes = "mr-2") {
                        height = 4.rem
                        width = 4.rem
                    }
                }

                organization?.run {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-3")
                        +"Organization".t()
                    }
                    Link {
                        renderAvatar(this@run) {
                            height = 4.rem
                            width = 4.rem
                        }
                        to = "/${organization?.name}"
                        +" ${organization?.name}"
                    }
                }
                if (participants.isNotEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Credits".t()
                    }
                    userBoard {
                        users = participants
                        avatarOuterClasses = "col-2"
                    }
                }
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityGeneralInfo] component
 */
external interface VulnerabilityGeneralInfo : Props {
    /**
     * [VulnerabilityDto] to display info about
     */
    var vulnerability: VulnerabilityDto

    /**
     * Vulnerabilities setter
     */
    var setVulnerability: StateSetter<VulnerabilityDto>

    /**
     * Callback to fetch updated vulnerability
     */
    var fetchVulnerability: () -> Unit

    /**
     * FLag that defines if current user can edit vulnerability or not
     */
    var canEditVulnerability: Boolean

    /**
     * Currently logged-in user or null
     */
    var userInfo: UserInfo?

    /**
     * If the edit button was not yet pressed
     */
    var isEditDisabled: Boolean

    /**
     * Setter for isEditDisabled
     */
    var setIsEditDisabled: StateSetter<Boolean>
}
