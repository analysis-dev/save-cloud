/**
 * Review and administration buttons on the vulnerability view
 */

@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.CommentDto
import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.components.views.contests.tab
import com.saveourtool.save.frontend.externals.fontawesome.faDownload
import com.saveourtool.save.frontend.externals.fontawesome.faImage
import com.saveourtool.save.frontend.externals.fontawesome.faTable
import com.saveourtool.save.frontend.externals.fontawesome.faTrash
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.aria.ariaDescribedBy
import react.dom.html.ReactHTML.a
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h6
import react.dom.html.ReactHTML.textarea
import react.router.useNavigate
import web.cssom.*

import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

internal val headerMenu: FC<HeaderMenuProps> = FC { props ->
    val (t) = useTranslation("vulnerability")
    val rejectVulnerabilityWindowOpenness = useWindowOpenness()
    val navigate = useNavigate()
    val (comment, setComment) = useState(CommentDto.empty)
    val (buttonType, setButtonType) = useState<ButtonType?>(null)
    val deleteVulnerabilityWindowOpenness = useWindowOpenness()

    // ======================= requests ================================================================================

    val enrollUpdateRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/vulnerabilities/approve",
            params = jso<dynamic> {
                identifier = props.vulnerability.cosv.id
            },
            headers = jsonHeaders,
            body = undefined,
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        }
    }

    val enrollRejectRequest = useDeferredRequest {
        if (comment.message.isNotEmpty()) {
            val commentNew = comment.copy(section = window.location.pathname)
            post(
                url = "$apiUrl/comments/save",
                headers = jsonHeaders,
                body = Json.encodeToString(commentNew),
                loadingHandler = ::loadingHandler,
                responseHandler = ::noopResponseHandler,
            )
        }

        val response = post(
            url = "$apiUrl/vulnerabilities/reject",
            params = jso<dynamic> {
                identifier = props.vulnerability.cosv.id
            },
            headers = jsonHeaders,
            body = undefined,
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        }
    }

    val enrollForReviewRequest = useDeferredRequest {
        if (comment.message.isNotEmpty()) {
            val commentNew = comment.copy(section = window.location.pathname)
            post(
                url = "$apiUrl/comments/save",
                headers = jsonHeaders,
                body = Json.encodeToString(commentNew),
                loadingHandler = ::loadingHandler,
                responseHandler = ::noopResponseHandler,
            )
        }

        val response = post(
            url = "$apiUrl/vulnerabilities/to-review",
            params = jso<dynamic> {
                identifier = props.vulnerability.cosv.id
            },
            headers = jsonHeaders,
            body = undefined,
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        }
    }

    val enrollDeleteRequest = useDeferredRequest {
        val response = delete(
            url = "$apiUrl/vulnerabilities/delete",
            params = jso<dynamic> {
                identifier = props.vulnerability.cosv.id
            },
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        }
    }

    // ======================= modals ==================================================================================

    displayModal(
        deleteVulnerabilityWindowOpenness.isOpen(),
        "Delete Vulnerability".t(),
        "Are you sure you want to remove this vulnerability?".t(),
        mediumTransparentModalStyle,
        deleteVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok".t()) {
            enrollDeleteRequest()
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close".t(), "secondary") {
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
    }

    displayModal(
        rejectVulnerabilityWindowOpenness.isOpen(),
        if (buttonType == ButtonType.REJECT) "Reject vulnerability".t() else "Ready for review".t(),
        bodyBuilder = {
            div {
                h6 {
                    className = ClassName("modal-title")
                    val text = when (buttonType) {
                        ButtonType.REJECT -> "Are you sure you want to reject this vulnerability?".t()
                        ButtonType.FOR_REVIEW -> "Are you sure you want to submit this vulnerability for review once again?".t()
                        else -> ""
                    }
                    +text
                }
                textarea {
                    className = ClassName("border-secondary form-control p-3 border-1")
                    onChange = { event -> setComment { it.copy(message = event.target.value) } }
                    value = comment.message
                    ariaDescribedBy = "${InputTypes.COMMENT.name}Span"
                    rows = 5
                    id = InputTypes.COMMENT.name
                    required = true
                    placeholder = "Write a comment".t()
                }
            }
        },
        modalStyle = mediumTransparentModalStyle,
        onCloseButtonPressed = rejectVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok".t()) {
            when (buttonType) {
                ButtonType.REJECT -> enrollRejectRequest()
                ButtonType.FOR_REVIEW -> enrollForReviewRequest()
                else -> Unit
            }
            rejectVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close".t(), "secondary") {
            setButtonType(null)
            setComment(CommentDto.empty)
            rejectVulnerabilityWindowOpenness.closeWindow()
        }
    }

    // ======================= rendering ===============================================================================

    div {
        className = ClassName("col-3 mr-3")
        vulnerabilityBadge {
            this.vulnerability = props.vulnerability
            this.setVulnerability = props.setVulnerability
            this.isEditDisabled = props.isEditDisabled
        }
    }
    div {
        className = ClassName("col-6")
        div {
            className = ClassName("row card shadow ribbon-parent")
            style = jso {
                height = HEADER_HEIGHT.unsafeCast<Height>()
            }

            when (props.vulnerability.metadataDto.status) {
                VulnerabilityStatus.APPROVED -> div {
                    className = ClassName("ribbon-approved")
                    +"Approved".t()
                }

                VulnerabilityStatus.AUTO_APPROVED -> div {
                    className = ClassName("ribbon-approved")
                    +"Auto-approved".t()
                }

                else -> div {
                    className = ClassName("ribbon-not-approved")
                    +"Not Approved".t()
                }
            }

            tab(
                props.selectedMenu.name,
                VulnerabilityTab.values().map { if (it == VulnerabilityTab.COMMENTS) "${it.name} (${props.countComments})" else it.name },
                "nav nav-tabs mt-3"
            ) { value ->
                val newValue = if (value.contains(VulnerabilityTab.COMMENTS.name)) VulnerabilityTab.COMMENTS.name else value
                props.setSelectedMenu { VulnerabilityTab.valueOf(newValue) }
            }

            // separate it to button menu
            div {
                className = ClassName("row justify-content-center mt-3")
                div {
                    className = ClassName("d-flex justify-content-end my-2")
                    if (props.selectedMenu == VulnerabilityTab.INFO) {
                        buttonBuilder(
                            if (props.isTableView) faImage else faTable,
                            "secondary",
                            classes = "mr-2",
                            isOutline = true,
                            title = "Change to ${if (props.isTableView) "card" else "table"} mode".t()
                        ) {
                            props.setIsTableView { !it }
                        }
                    }

                    a {
                        buttonBuilder(
                            faDownload,
                            "secondary",
                            classes = "mr-2",
                            isOutline = true,
                            title = "Download vulnerability in COSV".t(),
                        ) { }
                        href = "$apiUrl/vulnerabilities/download?identifier=${props.vulnerability.cosv.id}"
                    }

                    if (props.permissions.isSuperAdmin ||
                            (props.permissions.isOwner && props.vulnerability.metadataDto.status != VulnerabilityStatus.APPROVED)
                    ) {
                        buttonBuilder(
                            faTrash,
                            "danger",
                            isOutline = true,
                            title = "Delete vulnerability".t(),
                            classes = "mr-2"
                        ) {
                            deleteVulnerabilityWindowOpenness.openWindow()
                        }
                        if (props.vulnerability.metadataDto.status == VulnerabilityStatus.REJECTED) {
                            buttonBuilder(label = "Ready for review".t(), classes = "mr-2 btn-sm", style = "success") {
                                setButtonType(ButtonType.FOR_REVIEW)
                                rejectVulnerabilityWindowOpenness.openWindow()
                            }
                        }
                    }

                    if (props.permissions.isSuperAdmin && props.vulnerability.metadataDto.status.let {
                        it == VulnerabilityStatus.CREATED || it == VulnerabilityStatus.PENDING_REVIEW
                    }) {
                        buttonBuilder(label = "Approve".t(), classes = "mr-2 btn-sm", style = "success") {
                            enrollUpdateRequest()
                        }
                        buttonBuilder(label = "Reject".t(), classes = "mr-2 btn-sm", style = "warning") {
                            setButtonType(ButtonType.REJECT)
                            rejectVulnerabilityWindowOpenness.openWindow()
                        }
                    }
                }
            }
        }
    }
}

/**
 * Available types of button
 */
enum class ButtonType {
    FOR_REVIEW,
    REJECT,
    ;
}

/**
 * [Props] for a header with menu buttons on the vulnerability view
 */
@Suppress("MISSING_KDOC_CLASS_ELEMENTS")
internal external interface HeaderMenuProps : Props {
    var selectedMenu: VulnerabilityTab
    var vulnerability: VulnerabilityExt
    var setVulnerability: StateSetter<VulnerabilityExt?>
    var currentUserInfo: UserInfo?
    var permissions: Permissions
    var isTableView: Boolean
    var setSelectedMenu: StateSetter<VulnerabilityTab>
    var setIsTableView: StateSetter<Boolean>
    var addProjectWindowOpenness: WindowOpenness
    var isEditDisabled: Boolean
    var countComments: Int
}
