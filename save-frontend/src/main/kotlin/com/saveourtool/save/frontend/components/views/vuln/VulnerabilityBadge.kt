@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.cvsscalculator.calculateScore
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.externals.progressbar.progressBar
import com.saveourtool.save.frontend.themes.Colors
import js.core.jso
import react.FC
import react.Props
import react.dom.html.ReactHTML.a
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h4
import web.cssom.*
import web.cssom.TextDecoration.Companion.underline

private const val FOR_GREEN = 3.9f
private const val FOR_YELLOW = 6.9f
private const val FOR_ORANGE = 8.9f
private const val MAX_VALUE = 10.0f

val vulnerabilityBadge: FC<VulnerabilityBadgeProps> = FC { props ->
    val (t) = useTranslation("vulnerability")
    val (color, criticalityLabel) = when (props.vulnerability.progress) {
        in 0f..FOR_GREEN -> Colors.SUCCESS.value to "Low"
        in FOR_GREEN..FOR_YELLOW -> Colors.WARNING.value to "Medium"
        in FOR_YELLOW..FOR_ORANGE -> Colors.ORANGE.value to "High"
        in FOR_YELLOW..MAX_VALUE -> Colors.DANGER.value to "Critical"
        else -> throw IllegalStateException("Progress should be in [0; 10.0], got ${props.vulnerability.progress}")
    }
    div {
        className = ClassName("card shadow")
        style = jso {
            height = HEADER_HEIGHT.unsafeCast<Height>()
        }
        div {
            className = ClassName("card-body")
            div {
                className = ClassName("row")
                div {
                    className = ClassName("col-3 mr-1")
                    @Suppress("MAGIC_NUMBER", "MagicNumber")
                    div {
                        className = ClassName("row")

                        val severityNum = props.vulnerability.severity.let {
                            if (it.isNotEmpty() && it.contains(":")) calculateScore(it) else props.vulnerability.progress
                        }
                        progressBar(severityNum, color = color, size = "6.5rem", lineWidth = "3.5rem", showPercentageSymbol = true)
                    }
                }
                div {
                    className = ClassName("col-6")
                    div {
                        className = ClassName("row align-items-center mb-2")
                        h4 {
                            className = ClassName("text-gray-900 mb-2")
                            +"Criticality Scoring".t()
                        }
                    }
                    div {
                        className = ClassName("row align-items-center mb-2")
                        div {
                            className = ClassName("text-center text-xs font-weight-bold text-uppercase p-1")
                            style = jso {
                                border = "0.1rem solid $color".unsafeCast<Border>()
                                borderRadius = "1rem".unsafeCast<BorderRadius>()
                                this.color = color.unsafeCast<ColorProperty>()
                            }
                            +criticalityLabel
                        }
                    }
                    div {
                        className = ClassName("row")
                        a {
                            className = ClassName("nav-link text-xs d-flex pl-0 active")
                            href = "https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator"
                            style = jso {
                                textDecoration = underline
                            }
                            +"NVD CVSS"
                        }
                    }
                }
            }
        }
    }
}

/**
 * [Props] of [vulnerabilityBadge]
 */
external interface VulnerabilityBadgeProps : Props {
    /**
     * [VulnerabilityDto] to display
     */
    var vulnerability: VulnerabilityDto
}
