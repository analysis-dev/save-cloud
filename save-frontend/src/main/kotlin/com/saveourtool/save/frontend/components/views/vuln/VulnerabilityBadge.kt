@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.frontend.externals.progressbar.progressBar
import com.saveourtool.save.frontend.themes.Colors
import js.core.jso
import react.FC
import react.Props
import react.dom.html.ReactHTML.div
import web.cssom.*

private const val FOR_GREEN = 34
private const val FOR_YELLOW = 67
private const val MAX_VALUE = 100

val vulnerabilityBadge: FC<VulnerabilityBadgeProps> = FC { props ->
    div {
        className = ClassName("col")
        val (color, criticalityLabel) = when (props.vulnerability.progress) {
            in 0..FOR_GREEN -> Colors.SUCCESS.value to "Low"
            in FOR_GREEN..FOR_YELLOW -> Colors.WARNING.value to "Moderate"
            in FOR_YELLOW..MAX_VALUE -> Colors.DANGER.value to "Critical"
            else -> throw IllegalStateException("Progress should be in [0; 100], got ${props.vulnerability.progress}")
        }

        div {
            div {
                className = ClassName("row mb-2")
                div {
                    className = ClassName("mx-auto")
                    @Suppress("MAGIC_NUMBER", "MagicNumber")
                    progressBar(props.vulnerability.progress, color = color, size = 150, lineWidth = 45)
                    div {
                        className = ClassName("text-center font-weight-bold text-uppercase mx-auto p-1")
                        style = jso {
                            border = "1px solid $color".unsafeCast<Border>()
                            borderRadius = "1rem".unsafeCast<BorderRadius>()
                            this.color = color.unsafeCast<ColorProperty>()
                            position = "absolute".unsafeCast<Position>()
                            top = "70%".unsafeCast<Top>()
                            left = "50%".unsafeCast<Left>()
                            transform = "translate(-50%, -50%)".unsafeCast<Transform>()
                        }
                        +criticalityLabel
                    }
                }
            }
        }
    }
}

/**
 * [Props] of [vulnerabilityBadge]
 */
external interface VulnerabilityBadgeProps : Props {
    /**
     * [VulnerabilityDto] to display
     */
    var vulnerability: VulnerabilityDto
}
