@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.CommentDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.frontend.components.basic.commentWindow
import com.saveourtool.save.frontend.components.basic.newCommentWindow
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo

import js.core.jso
import react.FC
import react.Props
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h4
import react.useState
import web.cssom.ClassName
import web.cssom.Cursor

import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

private const val DEFAULT_MAX_COMMENT_AMOUNT = 5

val vulnerabilityCommentTab: FC<VulnerabilityCommentTabProps> = FC { props ->
    val (comments, setComments) = useState(emptyList<CommentDto>())
    val (isAllCommentsShown, setIsAllCommentsShown) = useState(false)

    val (commentForDeletion, setCommentForDeletion) = useState<CommentDto?>(null)
    val getComments = useDeferredRequest {
        val newComments = post(
            url = "$apiUrl/comments/get-all",
            headers = jsonHeaders,
            body = window.location.hash,
            loadingHandler = ::noopLoadingHandler,
        ).unsafeMap {
            it.decodeFromJsonString<List<CommentDto>>()
        }

        setComments(newComments)
    }

    useRequest(arrayOf(commentForDeletion)) {
        commentForDeletion?.let { comment ->
            post(
                url = "$apiUrl/comments/delete",
                headers = jsonHeaders,
                body = Json.encodeToString(comment),
                loadingHandler = ::loadingHandler,
            ).run {
                if (ok) {
                    getComments()
                    setCommentForDeletion(null)
                }
            }
        }
    }

    val display: List<CommentDto>.() -> Unit = {
        forEach { message ->
            div {
                className = ClassName("col-12 mt-4")
                commentWindow {
                    comment = message
                    currentUserInfo = props.currentUserInfo
                    this.setCommentForDeletion = { setCommentForDeletion(it) }
                }
            }
        }
    }

    val enrollCommentsRequest = useDeferredRequest {
        val newComments = post(
            url = "$apiUrl/comments/get-all",
            headers = jsonHeaders,
            body = window.location.hash,
            loadingHandler = ::loadingHandler,
        ).unsafeMap {
            it.decodeFromJsonString<List<CommentDto>>()
        }

        setComments(newComments)
    }

    useOnce { getComments() }

    if (comments.size > DEFAULT_MAX_COMMENT_AMOUNT && !isAllCommentsShown) {
        comments.take(DEFAULT_MAX_COMMENT_AMOUNT / 2).display()
        div {
            className = ClassName("col-12 mt-4")
            onClick = { setIsAllCommentsShown(true) }
            style = jso { cursor = "pointer".unsafeCast<Cursor>() }
            h4 {
                className = ClassName("text-center card p-2 shadow")
                +"Show all ${comments.size} comments"
            }
        }
        comments.takeLast(DEFAULT_MAX_COMMENT_AMOUNT / 2).display()
    } else {
        comments.display()
    }

    props.currentUserInfo?.let { userInfo ->
        div {
            className = ClassName("col-12 mt-5")
            newCommentWindow {
                addComment = { enrollCommentsRequest() }
                currentUserInfo = userInfo
            }
        }
    } ?: div {
        className = ClassName("col-12 mt-4")
        h4 {
            className = ClassName("text-center card p-2 shadow")
            +"Authorize in order to write comments"
        }
    }
}

/**
 * [Props] of vulnerability comment tab component
 */
external interface VulnerabilityCommentTabProps : Props {
    /**
     * Vulnerability dto of vulnerability
     */
    var vulnerability: VulnerabilityDto

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?
}
