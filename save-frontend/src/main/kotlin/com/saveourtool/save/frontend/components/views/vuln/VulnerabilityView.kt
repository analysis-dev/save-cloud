/**
 * View for FossGraph
 */

@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityLanguage
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.span
import web.cssom.*

const val HEADER_HEIGHT = "9rem"

@Suppress(
    "MAGIC_NUMBER",
    "TOO_LONG_FUNCTION",
    "LongMethod",
    "TYPE_ALIAS",
    "EMPTY_BLOCK_STRUCTURE_ERROR",
)
val vulnerabilityView: FC<VulnerabilitiesViewProps> = FC { props ->
    useBackground(Style.VULN_LIGHT)
    useTooltip()

    val (isEditDisabled, setIsEditDisabled) = useState(true)
    val (vulnerability, setVulnerability) = useState(VulnerabilityDto.empty)
    val (selectedMenu, setSelectedMenu) = useState(VulnerabilityTab.INFO)
    val (isTableView, setIsTableView) = useState(false)
    val addProjectWindowOpenness = useWindowOpenness()

    val fetchVulnerability = useDeferredRequest {
        val vulnerabilityNew: VulnerabilityDto = get(
            url = "$apiUrl/vulnerabilities/by-identifier-with-description?identifier=${props.identifier}",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString()
            }

        setVulnerability(vulnerabilityNew)
    }

    useOnce(fetchVulnerability)

    val permissions = Permissions(
        isSuperAdmin = props.currentUserInfo?.isSuperAdmin() == true,
        isOwner = vulnerability.userInfo.id?.let { props.currentUserInfo?.id == it } ?: false,
        isParticipant = props.currentUserInfo in vulnerability.participants
    )

    div {
        className = ClassName("d-flex align-items-center justify-content-center mb-4")
        h1 {
            className = ClassName("h3 mb-0 text-center text-gray-800")
            +vulnerability.identifier
        }
        languageSpan(vulnerability.language)
    }

    div {
        className = ClassName("row justify-content-center align-items-center")
        // ===================== HEADER WITH MENU ==================================================================
        headerMenu {
            this.selectedMenu = selectedMenu
            this.vulnerability = vulnerability
            this.currentUserInfo = props.currentUserInfo
            this.permissions = permissions
            this.isTableView = isTableView
            this.addProjectWindowOpenness = addProjectWindowOpenness
            this.setIsTableView = setIsTableView
            this.setSelectedMenu = setSelectedMenu
        }
    }
    div {
        className = ClassName("row justify-content-center")
        // ===================== LEFT COLUMN =======================================================================
        div {
            className = ClassName("col-3 mr-3")
            vulnerabilityGeneralInfo {
                this.vulnerability = vulnerability
                this.fetchVulnerability = fetchVulnerability
                this.canEditVulnerability = permissions.isOwner || permissions.isSuperAdmin || permissions.isParticipant
                this.userInfo = props.currentUserInfo
                this.setIsEditDisabled = setIsEditDisabled
                this.isEditDisabled = isEditDisabled
            }
        }
        // ===================== RIGHT COLUMN =======================================================================
        div {
            className = ClassName("col-6")
            div {
                className = ClassName("mt-3")
                when (selectedMenu) {
                    VulnerabilityTab.INFO -> vulnerabilityInfoTab {
                        this.vulnerability = vulnerability
                        this.currentUserInfo = props.currentUserInfo
                        this.fetchVulnerability = fetchVulnerability
                        this.isTableView = isTableView
                        this.addProjectWindowOpenness = addProjectWindowOpenness
                        this.isEditDisabled = isEditDisabled
                        this.setIsEditDisabled = setIsEditDisabled
                    }

                    VulnerabilityTab.COMMENTS -> vulnerabilityCommentTab {
                        this.vulnerability = vulnerability
                        this.currentUserInfo = props.currentUserInfo
                    }
                }
            }
        }
    }
}

/**
 * Enum that contains values for vulnerability
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityTab {
    INFO,
    COMMENTS,
    // PROPOSED_CHANGES,
    ;

    companion object : TabMenuBar<VulnerabilityTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityTab = INFO
        override val regexForUrlClassification = "/${FrontendRoutes.PROFILE}"
        override fun valueOf(elem: String): VulnerabilityTab = VulnerabilityTab.valueOf(elem)
        override fun values(): Array<VulnerabilityTab> = VulnerabilityTab.values()
    }
}

/**
 * [Props] for FossGraphView
 */
external interface VulnerabilitiesViewProps : Props {
    /**
     * Identifier of security vulnerabilities
     */
    var identifier: String

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?
}

/**
 * @property isSuperAdmin
 * @property isOwner
 * @property isParticipant
 */
internal data class Permissions(
    val isSuperAdmin: Boolean,
    val isOwner: Boolean,
    val isParticipant: Boolean
)

private fun ChildrenBuilder.languageSpan(language: VulnerabilityLanguage) {
    span {
        className = ClassName("border border-danger text-danger ml-2 pl-1 pr-1")
        style = jso {
            borderRadius = "2em".unsafeCast<BorderRadius>()
        }
        +language.value
    }
}

/**
 * @param currentUserInfo
 * @param vulnerability
 * @return if user can press edit button
 */
internal fun hasRightsToEdit(currentUserInfo: UserInfo?, vulnerability: VulnerabilityDto) =
        // globalRole is enriched on the App.kt level with "users/global-role" (based on ROLE from spring security authority)
        // and is not stored in DB, so we cannot check userInfo directly, because in the getAllParticipants() users will have this field null
        currentUserInfo.isSuperAdmin() || currentUserInfo?.name in vulnerability.getAllParticipants().map { it.name }
