/**
 * View for FossGraph
 */

@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.span
import web.cssom.*

import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

const val HEADER_HEIGHT = "9rem"

@Suppress(
    "MAGIC_NUMBER",
    "TOO_LONG_FUNCTION",
    "LongMethod",
    "TYPE_ALIAS",
    "EMPTY_BLOCK_STRUCTURE_ERROR",
)
val vulnerabilityView: FC<VulnerabilitiesViewProps> = FC { props ->
    useBackground(Style.VULN_LIGHT)
    useTooltip()

    val (isEditDisabled, setIsEditDisabled) = useState(true)
    val (vulnerability, setVulnerability) = useState<VulnerabilityExt>()
    val (selectedMenu, setSelectedMenu) = useState(VulnerabilityTab.INFO)
    val (isTableView, setIsTableView) = useState(false)
    val (countComments, setCountComments) = useState(0)
    val addProjectWindowOpenness = useWindowOpenness()

    useRequest {
        val newComments = get(
            url = "$apiUrl/comments/get-all-count",
            params = jso<dynamic> {
                section = window.location.pathname
            },
            headers = jsonHeaders,
            loadingHandler = ::noopLoadingHandler,
        ).unsafeMap {
            it.decodeFromJsonString<Int>()
        }

        setCountComments(newComments)
    }

    val fetchVulnerability = useDeferredRequest {
        val vulnerabilityNew: VulnerabilityExt = get(
            url = "$apiUrl/vulnerabilities/by-identifier-with-description?identifier=${props.identifier}",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString()
            }

        setVulnerability(vulnerabilityNew)
    }

    val enrollRequest = useDeferredRequest {
        post(
            "$apiUrl/vulnerabilities/update",
            jsonHeaders,
            Json.encodeToString(vulnerability),
            loadingHandler = ::loadingHandler,
        )
    }

    useOnce(fetchVulnerability)

    if (vulnerability != undefined) {
        val permissions = Permissions(
            isSuperAdmin = props.currentUserInfo?.isSuperAdmin() == true,
            isOwner = vulnerability.metadataDto.user.id?.let { props.currentUserInfo?.id == it } ?: false,
            isParticipant = props.currentUserInfo in vulnerability.saveContributors
        )

        div {
            className = ClassName("d-flex align-items-center justify-content-center mb-4")
            h1 {
                className = ClassName("h3 mb-0 text-center text-gray-800")
                +vulnerability.cosv.id
            }
            vulnerability.cosv.affected?.forEach { affected ->
                affected.`package`?.language?.let {
                    languageSpan(it)
                }
            }
        }

        div {
            className = ClassName("row justify-content-center align-items-center")
            // ===================== HEADER WITH MENU ==================================================================
            headerMenu {
                this.selectedMenu = selectedMenu
                this.vulnerability = vulnerability
                this.setVulnerability = setVulnerability
                this.currentUserInfo = props.currentUserInfo
                this.permissions = permissions
                this.isTableView = isTableView
                this.addProjectWindowOpenness = addProjectWindowOpenness
                this.isEditDisabled = isEditDisabled
                this.setIsTableView = setIsTableView
                this.setSelectedMenu = setSelectedMenu
                this.countComments = countComments
            }
        }
        div {
            className = ClassName("row justify-content-center")
            // ===================== LEFT COLUMN =======================================================================
            div {
                className = ClassName("col-3 mr-3")
                vulnerabilityGeneralInfoProps {
                    this.vulnerability = vulnerability
                    this.setVulnerability = setVulnerability
                    this.fetchVulnerability = fetchVulnerability
                    this.currentUserInfo = props.currentUserInfo
                    this.setIsEditDisabled = setIsEditDisabled
                    this.isEditDisabled = isEditDisabled
                    this.enrollRequest = enrollRequest
                    this.setSelectedMenu = setSelectedMenu
                }
            }
            // ===================== RIGHT COLUMN =======================================================================
            div {
                className = ClassName("col-6 px-0")
                div {
                    className = ClassName("mt-3")
                    when (selectedMenu) {
                        VulnerabilityTab.INFO -> vulnerabilityInfoTab {
                            this.vulnerability = vulnerability
                            this.setVulnerability = setVulnerability
                            this.currentUserInfo = props.currentUserInfo
                            this.fetchVulnerability = fetchVulnerability
                            this.isTableView = isTableView
                            this.addProjectWindowOpenness = addProjectWindowOpenness
                            this.isEditDisabled = isEditDisabled
                            this.enrollRequest = enrollRequest
                        }

                        VulnerabilityTab.COMMENTS -> vulnerabilityCommentTab {
                            this.vulnerability = vulnerability
                            this.currentUserInfo = props.currentUserInfo
                            this.countComments = countComments
                            this.setCountComments = setCountComments
                        }

                        VulnerabilityTab.HISTORY -> vulnerabilityHistoryTab {
                            this.identifier = props.identifier
                        }

                        VulnerabilityTab.CHANGES -> vulnerabilityChangesTab {
                            this.identifier = props.identifier
                        }

                        VulnerabilityTab.RAW -> vulnerabilityRawDataTab {
                            this.vulnerability = vulnerability
                        }
                    }
                }
            }
        }
    }
}

/**
 * Enum that contains values for vulnerability
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityTab {
    INFO,
    COMMENTS,
    HISTORY,
    CHANGES,
    RAW,
    // PROPOSED_CHANGES,
    ;

    companion object : TabMenuBar<VulnerabilityTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityTab = INFO
        override val regexForUrlClassification = "/${FrontendRoutes.VULN_PROFILE}"
        override fun valueOf(elem: String): VulnerabilityTab = VulnerabilityTab.valueOf(elem)
        override fun values(): Array<VulnerabilityTab> = VulnerabilityTab.values()
    }
}

/**
 * [Props] for FossGraphView
 */
external interface VulnerabilitiesViewProps : Props {
    /**
     * Identifier of security vulnerabilities
     */
    var identifier: String

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?
}

/**
 * @property isSuperAdmin
 * @property isOwner
 * @property isParticipant
 */
internal data class Permissions(
    val isSuperAdmin: Boolean,
    val isOwner: Boolean,
    val isParticipant: Boolean
)

private fun ChildrenBuilder.languageSpan(language: String) {
    span {
        className = ClassName("border border-danger text-danger ml-2 pl-1 pr-1")
        style = jso {
            borderRadius = "2em".unsafeCast<BorderRadius>()
        }
        +language
    }
}

/**
 * @param pointerCursor
 * @return returns the css for editable text form
 */
fun borderEditStyle(pointerCursor: Boolean = false): CSSProperties = jso {
    borderColor = "#5711d9".unsafeCast<BorderColor>()
    borderStyle = "dashed".unsafeCast<BorderStyle>()
    borderWidth = "thin".unsafeCast<BorderWidth>()
    if (pointerCursor) {
        cursor = "pointer".unsafeCast<Cursor>()
    }
}
