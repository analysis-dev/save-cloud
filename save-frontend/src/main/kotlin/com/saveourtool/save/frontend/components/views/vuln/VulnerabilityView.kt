/**
 * View for FossGraph
 */

@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.CommentDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityLanguage
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.components.views.contests.tab
import com.saveourtool.save.frontend.externals.fontawesome.faTrash
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.aria.ariaDescribedBy
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.h6
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.textarea
import react.router.useNavigate
import web.cssom.*

import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

@Suppress(
    "MAGIC_NUMBER",
    "TOO_LONG_FUNCTION",
    "LongMethod",
    "TYPE_ALIAS",
    "EMPTY_BLOCK_STRUCTURE_ERROR",
)
val vulnerabilityView: FC<VulnerabilitiesViewProps> = FC { props ->
    particles()
    useBackground(Style.VULN_LIGHT)
    useTooltip()

    val deleteVulnerabilityWindowOpenness = useWindowOpenness()
    val rejectVulnerabilityWindowOpenness = useWindowOpenness()
    val navigate = useNavigate()

    val (rejectComment, setRejectComment) = useState(CommentDto.empty)
    val (vulnerability, setVulnerability) = useState(VulnerabilityDto.empty)
    val (selectedMenu, setSelectedMenu) = useState(VulnerabilityTab.INFO)

    val enrollUpdateRequest = useDeferredRequest {
        val vulnerabilityUpdate = vulnerability.copy(status = VulnerabilityStatus.APPROVED)
        val response = post(
            url = "$apiUrl/vulnerabilities/approve",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityUpdate),
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULN}")
        }
    }

    val enrollRejectRequest = useDeferredRequest {
        if (rejectComment.message.isNotEmpty()) {
            val commentNew = rejectComment.copy(section = window.location.pathname)
            post(
                url = "$apiUrl/comments/save",
                headers = jsonHeaders,
                body = Json.encodeToString(commentNew),
                loadingHandler = ::noopLoadingHandler,
                responseHandler = ::noopResponseHandler,
            )
        }

        val vulnerabilityUpdate = vulnerability.copy(status = VulnerabilityStatus.REJECTED)
        val response = post(
            url = "$apiUrl/vulnerabilities/reject",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityUpdate),
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULN}")
        }
    }

    val enrollDeleteRequest = useDeferredRequest {
        val response = delete(
            url = "$apiUrl/vulnerabilities/delete?name=${props.name}",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULN}")
        }
    }

    val fetchVulnerability = useDeferredRequest {
        val vulnerabilityNew: VulnerabilityDto = get(
            url = "$apiUrl/vulnerabilities/by-name-with-description?name=${props.name}",
            headers = jsonHeaders,
            loadingHandler = ::noopLoadingHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString()
            }

        setVulnerability(vulnerabilityNew)
    }

    displayModal(
        rejectVulnerabilityWindowOpenness.isOpen(),
        "Reject of vulnerability",
        bodyBuilder = {
            div {
                h6 {
                    className = ClassName("modal-title")
                    +"Are you sure you want to reject this vulnerability?"
                }
                textarea {
                    className = ClassName("border-secondary form-control p-3 border-1")
                    onChange = { event -> setRejectComment { it.copy(message = event.target.value) } }
                    value = rejectComment.message
                    ariaDescribedBy = "${InputTypes.COMMENT.name}Span"
                    rows = 5
                    id = InputTypes.COMMENT.name
                    required = true
                    placeholder = "Write a comment"
                }
            }
        },
        modalStyle = mediumTransparentModalStyle,
        onCloseButtonPressed = rejectVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok") {
            enrollRejectRequest()
            rejectVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close", "secondary") {
            rejectVulnerabilityWindowOpenness.closeWindow()
        }
    }

    displayModal(
        deleteVulnerabilityWindowOpenness.isOpen(),
        "Deletion of vulnerability",
        "Are you sure you want to remove this vulnerability?",
        mediumTransparentModalStyle,
        deleteVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok") {
            enrollDeleteRequest()
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close", "secondary") {
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
    }

    useOnce(fetchVulnerability)

    div {
        className = ClassName("")

        val isSuperAdmin = props.currentUserInfo?.globalRole?.isHigherOrEqualThan(Role.SUPER_ADMIN) == true
        val isOwner = vulnerability.userInfo.id?.let { props.currentUserInfo?.id == it } ?: false
        val isParticipant = props.currentUserInfo in vulnerability.participants

        div {
            className = ClassName("d-flex align-items-center justify-content-center mb-4")
            h1 {
                className = ClassName("h3 mb-0 text-center text-gray-800")
                +vulnerability.name
            }
            languageSpan(vulnerability.language)
            div {
                className = ClassName("mr-3")
                style = jso {
                    position = "absolute".unsafeCast<Position>()
                    right = "0%".unsafeCast<Left>()
                }
                if (isSuperAdmin && vulnerability.status != VulnerabilityStatus.APPROVED) {
                    buttonBuilder(label = "Approve", classes = "mr-2", style = "success") {
                        enrollUpdateRequest()
                    }
                }
                if (isSuperAdmin && vulnerability.status != VulnerabilityStatus.APPROVED) {
                    buttonBuilder(label = "Reject", classes = "mr-2", style = "warning") {
                        rejectVulnerabilityWindowOpenness.openWindow()
                    }
                }
                if (isSuperAdmin || isOwner) {
                    buttonBuilder(
                        faTrash,
                        "danger",
                        isOutline = true,
                        title = "Delete vulnerability",
                        classes = "btn-sm"
                    ) {
                        deleteVulnerabilityWindowOpenness.openWindow()
                    }
                }
            }
        }

        div {
            className = ClassName("row justify-content-center")
            // ===================== LEFT COLUMN =======================================================================
            div {
                className = ClassName("col-3 mr-3")
                vulnerabilityGeneralInfo {
                    this.vulnerability = vulnerability
                    this.fetchVulnerability = fetchVulnerability
                    this.canEditVulnerability = isOwner || isSuperAdmin || isParticipant
                }
            }
            // ===================== RIGHT COLUMN =======================================================================
            div {
                className = ClassName("col-6")

                div {
                    className = ClassName("mb-4 mt-2")
                    tab(selectedMenu.name, VulnerabilityTab.values().map { it.name }, "nav nav-tabs mt-3") { value ->
                        setSelectedMenu { VulnerabilityTab.valueOf(value) }
                    }

                    when (selectedMenu) {
                        VulnerabilityTab.INFO -> vulnerabilityInfoTab {
                            this.vulnerability = vulnerability
                            this.currentUserInfo = props.currentUserInfo
                            this.fetchVulnerability = fetchVulnerability
                        }
                        VulnerabilityTab.COMMENTS -> vulnerabilityCommentTab {
                            this.vulnerability = vulnerability
                            this.currentUserInfo = props.currentUserInfo
                        }
                    }
                }
            }
        }
    }
}

/**
 * Enum that contains values for vulnerability
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityTab {
    INFO,
    COMMENTS,
    ;

    companion object : TabMenuBar<VulnerabilityTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityTab = INFO
        override val regexForUrlClassification = "/${FrontendRoutes.PROFILE}"
        override fun valueOf(elem: String): VulnerabilityTab = VulnerabilityTab.valueOf(elem)
        override fun values(): Array<VulnerabilityTab> = VulnerabilityTab.values()
    }
}

/**
 * [Props] for FossGraphView
 */
external interface VulnerabilitiesViewProps : Props {
    /**
     * Name of security vulnerabilities
     */
    var name: String

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?
}

private fun ChildrenBuilder.languageSpan(language: VulnerabilityLanguage) {
    span {
        className = ClassName("border border-danger text-danger ml-2 pl-1 pr-1")
        style = jso {
            borderRadius = "2em".unsafeCast<BorderRadius>()
        }
        +language.value
    }
}
