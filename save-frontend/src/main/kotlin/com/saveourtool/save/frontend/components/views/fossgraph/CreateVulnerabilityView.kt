@file:Suppress("HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE")

package com.saveourtool.save.frontend.components.views.fossgraph

import com.saveourtool.save.entities.OrganizationDto
import com.saveourtool.save.entities.vulnerability.*
import com.saveourtool.save.frontend.components.basic.markdown
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.inputform.inputTextFormOptional
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.externals.fontawesome.*
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.utils.isNotNull
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.VFC
import react.dom.aria.ariaDescribedBy
import react.dom.html.ReactHTML.button
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.form
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.input
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.option
import react.dom.html.ReactHTML.select
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.textarea
import react.router.useNavigate
import react.useState
import web.cssom.ClassName
import web.html.ButtonType
import web.html.InputType

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

@Suppress(
    "MAGIC_NUMBER",
    "MagicNumber",
    "LONG_LINE",
    "MaxLineLength",
)
val createVulnerabilityView: VFC = VFC {
    useBackground(Style.BLUE)

    val navigate = useNavigate()
    useTooltip()

    val (vulnerability, setVulnerability) = useState(VulnerabilityDto.empty)
    val (deleteProject, setDeleteProject) = useState<VulnerabilityProjectDto?>(null)
    val (conflictErrorMessage, setConflictErrorMessage) = useState<String?>(null)
    val (duplicateVulnerability, setDuplicateVulnerability) = useState<VulnerabilityDto?>(null)
    val (userOrganizations, setUserOrganizations) = useState(emptyList<OrganizationDto>())

    val projectWindowOpenness = useWindowOpenness()
    val deleteProjectWindowOpenness = useWindowOpenness()

    useRequest {
        val organizations = get(
            url = "$apiUrl/organizations/get/list",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
            responseHandler = ::noopResponseHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString<List<OrganizationDto>>()
            }

        setUserOrganizations(organizations)
    }

    val fetchProject: (VulnerabilityProjectDto) -> Unit = { project ->
        setVulnerability {
            it.copy(projects = it.projects.plus(project))
        }
        projectWindowOpenness.closeWindow()
    }

    val enrollRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/vulnerabilities/save",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerability),
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        }
    }

    val enrollCheckVulnerabilityRequest = useDeferredRequest {
        val response = get(
            url = "$apiUrl/vulnerabilities/by-id-name-and-status",
            params = jso<dynamic> {
                vulnerabilityIdentifier = vulnerability.vulnerabilityIdentifier
                status = VulnerabilityStatus.APPROVED
            },
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
            responseHandler = ::noopResponseHandler,
        )
        if (response.ok) {
            val vulnerabilityNew = response.unsafeMap {
                it.decodeFromJsonString<VulnerabilityDto>()
            }
            setDuplicateVulnerability(vulnerabilityNew)
        } else {
            setDuplicateVulnerability(null)
            enrollRequest()
        }
    }

    displayModal(
        deleteProjectWindowOpenness.isOpen(),
        "Deletion of project",
        "Are you sure you want to remove this project from the vulnerability?",
        mediumTransparentModalStyle,
        deleteProjectWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok") {
            deleteProject?.let { project ->
                setVulnerability {
                    it.copy(projects = it.projects.minus(project))
                }
            }
            deleteProjectWindowOpenness.closeWindow()
        }
        buttonBuilder("Close", "secondary") {
            deleteProjectWindowOpenness.closeWindow()
        }
    }

    vulnerabilityProjectWindow {
        windowOpenness = projectWindowOpenness
        fetchProjectCredentials = fetchProject
    }

    div {
        className = ClassName("page-header align-items-start min-vh-100")
        span {
            className = ClassName("mask bg-gradient-dark opacity-6")
        }
        div {
            className = ClassName("row justify-content-center")
            div {
                className = ClassName("col-sm-4 mt-5")
                div {
                    className = ClassName("container card o-hidden border-0 shadow-lg my-2 card-body p-0")
                    div {
                        className = ClassName("p-5 text-center")
                        h1 {
                            className = ClassName("h4 text-gray-900 mb-4")
                            +"Propose a new vulnerability"
                        }
                        form {
                            className = ClassName("needs-validation")
                            div {
                                className = ClassName("row")

                                div {
                                    className = ClassName("col-12 mt-3 mb-3 pl-2 pr-2 text-left")
                                    label {
                                        className = ClassName("form-label")
                                        +"Short description"
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event ->
                                                setVulnerability { it.copy(shortDescription = event.target.value) }
                                            }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 1
                                            id = InputTypes.DESCRIPTION.name
                                            required = true
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Short description of vulnerability"
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 mt-3 mb-3 pl-2 pr-2 text-left")
                                    label {
                                        className = ClassName("form-label")
                                        +"Description"
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event ->
                                                setVulnerability { it.copy(description = event.target.value) }
                                            }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 3
                                            id = InputTypes.DESCRIPTION.name
                                            required = true
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Description of vulnerability"
                                        }
                                    }
                                }

                                inputTextFormOptional {
                                    form = InputTypes.CVE_NAME
                                    textValue = vulnerability.vulnerabilityIdentifier
                                    validInput = !duplicateVulnerability.isNotNull()
                                    classes = "col-12 mt-3 mb-3 pl-2 pr-2 text-left"
                                    name = "Original vulnerability identifier"
                                    onChangeFun = { event ->
                                        setVulnerability { it.copy(vulnerabilityIdentifier = event.target.value) }
                                        setDuplicateVulnerability(null)
                                    }
                                }

                                inputTextFormOptional {
                                    form = InputTypes.GIT_URL
                                    textValue = vulnerability.relatedLink
                                    validInput = conflictErrorMessage.isNullOrEmpty()
                                    classes = "col-12 mt-3 mb-3 pl-2 pr-2 text-left"
                                    name = "Related link"
                                    onChangeFun = { event ->
                                        setVulnerability { it.copy(relatedLink = event.target.value) }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 pl-2 pr-2 mt-3 text-left align-self-center")
                                    +"Language"

                                    selectorBuilder(
                                        vulnerability.language.value,
                                        VulnerabilityLanguage.values().map { it.toString() },
                                        classes = "input-group form-control custom-select",
                                    ) { event ->
                                        val entries = event.target.value
                                        val languageSelect = requireNotNull(VulnerabilityLanguage.values().find { it.value == entries })
                                        setVulnerability(
                                            vulnerability.copy(
                                                language = languageSelect
                                            )
                                        )
                                    }
                                }

                                div {
                                    className = ClassName("col-12 mt-3 mb-3 pl-2 pr-2 text-left")
                                    label {
                                        className = ClassName("form-label")
                                        +"Criticality"
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        input {
                                            type = InputType.number
                                            className = ClassName("form-control")
                                            required = true
                                            defaultValue = 0
                                            onChange = { event ->
                                                val progress = event.target.value.toInt()
                                                if (progress !in (0..100)) {
                                                    setConflictErrorMessage("Progress must be a number from 0 to 100")
                                                } else {
                                                    setVulnerability { it.copy(progress = event.target.value.toInt()) }
                                                    setConflictErrorMessage(null)
                                                }
                                            }
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Vulnerability criticality percentage (1..100)"
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 pl-2 pr-2 mt-3 text-left align-self-center")
                                    +"Organization"

                                    select {
                                        className = ClassName("form-control input-group input-group custom-select")
                                        val elements = userOrganizations.map { it.name }.toMutableList()
                                        elements.add(0, "")
                                        elements.map {
                                            option {
                                                value = it
                                                +it
                                            }
                                        }
                                        onChange = { event ->
                                            val value = event.target.value
                                            if (value.isNotEmpty()) {
                                                setVulnerability { it.copy(organization = OrganizationDto(value)) }
                                            }
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 mt-3 d-flex align-items-center justify-content-between")

                                    div {
                                        className = ClassName("form-label mb-0 text-left")
                                        +"Affected projects:"
                                    }
                                    div {
                                        className = ClassName("")
                                        buttonBuilder(faPlus, isOutline = true, classes = "btn-sm rounded-circle") {
                                            projectWindowOpenness.openWindow()
                                        }
                                    }
                                }

                                vulnerability.projects.forEach { project ->
                                    val url = project.url
                                    div {
                                        className = ClassName("col-12 mt-2 px-2 d-flex align-items-center")
                                        div {
                                            className = ClassName("col-2 d-flex justify-content-center align-items-center")
                                            fontAwesomeIcon(
                                                when {
                                                    url.contains("github") -> faGithub
                                                    url.contains("codehub") -> faCopyright
                                                    else -> faHome
                                                },
                                            )
                                        }
                                        div {
                                            className = ClassName("col-8 text-left pl-0")
                                            +url
                                        }
                                        buttonBuilder(style = "", classes = "col-2", icon = faTimesCircle) {
                                            setDeleteProject(project)
                                            deleteProjectWindowOpenness.openWindow()
                                        }
                                    }
                                }
                            }
                        }

                        button {
                            type = ButtonType.button
                            className = ClassName("btn btn-info mt-4")
                            +"Propose a vulnerability"
                            disabled = vulnerability.description.isNullOrEmpty() || vulnerability.shortDescription.isEmpty() || conflictErrorMessage.isNotNull() || duplicateVulnerability != null
                            onClick = {
                                if (!vulnerability.vulnerabilityIdentifier.isNullOrEmpty()) {
                                    enrollCheckVulnerabilityRequest()
                                } else {
                                    enrollRequest()
                                }
                            }
                        }

                        conflictErrorMessage?.let {
                            div {
                                className = ClassName("invalid-feedback d-block text-center")
                                +it
                            }
                        }
                        duplicateVulnerability?.let {
                            div {
                                className = ClassName("invalid-feedback d-block text-center")
                                markdown(
                                    "Vulnerability associated with this identifier: [${vulnerability.vulnerabilityIdentifier}](/#/${FrontendRoutes.VULNERABILITIES}/${duplicateVulnerability.name}) already exists"
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
