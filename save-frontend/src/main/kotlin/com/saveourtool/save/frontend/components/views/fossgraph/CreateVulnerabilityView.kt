@file:Suppress("HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE")

package com.saveourtool.save.frontend.components.views.fossgraph

import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.externals.fontawesome.*
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.validation.FrontendRoutes

import csstype.ClassName
import react.VFC
import react.dom.aria.ariaDescribedBy
import react.dom.html.ButtonType
import react.dom.html.ReactHTML.button
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.form
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.textarea
import react.router.useNavigate
import react.useState

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

val createVulnerabilityView: VFC = VFC {
    useBackground(Style.BLUE)

    val navigate = useNavigate()

    val (vulnerability, setVulnerability) = useState(VulnerabilityDto.empty)
    val (deleteProject, setDeleteProject) = useState<VulnerabilityProjectDto?>(null)

    val projectWindowOpenness = useWindowOpenness()
    val deleteProjectWindowOpenness = useWindowOpenness()

    val fetchProject: (VulnerabilityProjectDto) -> Unit = { project ->
        setVulnerability {
            it.copy(projects = it.projects.plus(project))
        }
        projectWindowOpenness.closeWindow()
    }

    val enrollRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/vulnerabilities/save",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerability),
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.FOSS_GRAPH}")
        }
    }

    displayModal(
        deleteProjectWindowOpenness.isOpen(),
        "Deletion of project",
        "Are you sure you want to remove this project from the vulnerability?",
        mediumTransparentModalStyle,
        deleteProjectWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok") {
            deleteProject?.let { project ->
                setVulnerability {
                    it.copy(projects = it.projects.minus(project))
                }
            }
            deleteProjectWindowOpenness.closeWindow()
        }
        buttonBuilder("Close", "secondary") {
            deleteProjectWindowOpenness.closeWindow()
        }
    }

    vulnerabilityProjectWindow {
        windowOpenness = projectWindowOpenness
        vulnerabilityName = vulnerability.name
        fetchProjectCredentials = fetchProject
    }

    div {
        className = ClassName("page-header align-items-start min-vh-100")
        span {
            className = ClassName("mask bg-gradient-dark opacity-6")
        }
        div {
            className = ClassName("row justify-content-center")
            div {
                className = ClassName("col-sm-4 mt-5")
                div {
                    className = ClassName("container card o-hidden border-0 shadow-lg my-2 card-body p-0")
                    div {
                        className = ClassName("p-5 text-center")
                        h1 {
                            className = ClassName("h4 text-gray-900 mb-4")
                            +"Propose a new vulnerability"
                        }
                        form {
                            className = ClassName("needs-validation")
                            div {
                                className = ClassName("row-3")

                                div {
                                    className = ClassName("col-md-12 mt-3 mb-3 pl-2 pr-2 text-left")
                                    label {
                                        className = ClassName("form-label")
                                        +"Description"
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event ->
                                                setVulnerability { it.copy(description = event.target.value) }
                                            }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 2
                                            id = InputTypes.DESCRIPTION.name
                                            required = false
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-md-12 pl-2 pr-2 mt-3 text-left")

                                    label {
                                        className = ClassName("form-label")
                                        +"Affected projects:"
                                    }
                                }

                                vulnerability.projects.forEachIndexed { index, project ->
                                    val url = project.url
                                    div {
                                        className = ClassName("row mt-2 mr-0 justify-content-between align-items-center")
                                        div {
                                            className = ClassName("col-11 d-flex justify-content-start align-items-center")
                                            div {
                                                className = ClassName("col-2 align-items-center")
                                                fontAwesomeIcon(
                                                    when {
                                                        url.contains("github") -> faGithub
                                                        url.contains("codehub") -> faCopyright
                                                        else -> faHome
                                                    },
                                                )
                                            }
                                            div {
                                                className = ClassName("col-10 text-left align-self-center pl-0")
                                                +url
                                            }
                                        }
                                        div {
                                            className = ClassName("col-1 align-self-right d-flex align-items-center justify-content-end")
                                            buttonBuilder(style = "", classes = "col-2 align-items-center mr-2", icon = faTimesCircle) {
                                                setDeleteProject(project)
                                                deleteProjectWindowOpenness.openWindow()
                                            }
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-md-12 pl-2 pr-2 mt-3 text-left")

                                    buttonBuilder("+") {
                                        projectWindowOpenness.openWindow()
                                    }
                                }
                            }
                        }

                        button {
                            type = ButtonType.button
                            className = ClassName("btn btn-info mt-4")
                            +"Propose a vulnerability"
                            disabled = vulnerability.description.isNullOrEmpty()
                            onClick = {
                                enrollRequest()
                            }
                        }
                    }
                }
            }
        }
    }
}
