@file:Suppress(
    "HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE",
)

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.filters.VulnerabilityFilter
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.components.basic.*
import com.saveourtool.save.frontend.components.basic.table.filters.vulnerabilitiesFiltersRow
import com.saveourtool.save.frontend.components.tables.*
import com.saveourtool.save.frontend.components.views.contests.tab
import com.saveourtool.save.frontend.themes.Colors
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.frontend.utils.noopResponseHandler
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.main
import react.dom.html.ReactHTML.td
import react.dom.html.ReactHTML.th
import react.dom.html.ReactHTML.tr
import react.router.dom.Link
import web.cssom.Border
import web.cssom.ClassName
import web.cssom.ColorProperty
import web.cssom.rem

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

/**
 * [FC] for [vulnerabilityCollectionView]
 */
val vulnerabilityCollectionView: FC<FossGraphCollectionViewProps> = FC { props ->
    useBackground(Style.VULN_DARK)
    particles()

    val (vulnerabilityFilters, setVulnerabilityFilters) = useState(VulnerabilityFilter.approved)
    val (selectedMenu, setSelectedMenu) = useState(VulnerabilityListTab.PUBLIC)
    val (publicTable, setPublicTable) = useState(true)

    val vulnerabilityListTable: FC<FiltersProps> = useMemo(publicTable) {
        tableComponent(
            columns = {
                columns {
                    column(id = "name", header = "Name", { name }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                div {
                                    className = ClassName("row")
                                    Link {
                                        to = "/${FrontendRoutes.VULN}/${cellContext.row.original.name}"
                                        +cellContext.value
                                    }
                                }
                                div {
                                    className = ClassName("row mt-1")
                                    cellContext.row.original.tags.forEach { tag ->
                                        div {
                                            className = ClassName("rounded-pill px-1 mr-2")
                                            style = jso {
                                                fontSize = 0.8.rem
                                                color = Colors.VULN_PRIMARY.value.unsafeCast<ColorProperty>()
                                                border = "0.01rem solid $color".unsafeCast<Border>()
                                            }
                                            +tag
                                        }
                                    }
                                }
                            }
                        }
                    }
                    column(id = "short_description", header = "Description", { progress }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.row.original.shortDescription
                            }
                        }
                    }
                    column(id = "progress", header = "Criticality", { progress }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +"${cellContext.row.original.progress}"
                            }
                        }
                    }
                    column(id = "language", header = "Language", { language }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +"${cellContext.row.original.language}"
                            }
                        }
                    }
                    column(id = "user", header = "Author", { userInfo.name }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                cellContext.row.original.userInfo.let { user ->
                                    renderUserAvatarWithName(user) {
                                        height = 2.rem
                                        width = 2.rem
                                    }
                                }
                            }
                        }
                    }
                    column(id = "organization", header = "Organization", { organization?.name }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                cellContext.row.original.organization?.let { organization ->
                                    renderOrganizationWithName(organization) {
                                        height = 2.rem
                                        width = 2.rem
                                    }
                                }
                            }
                        }
                    }
                    if (!publicTable) {
                        column(id = "status", header = "Status", { status }) { cellContext ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle")
                                    +"${cellContext.row.original.status}"
                                }
                            }
                        }
                    }
                }
            },
            initialPageSize = @Suppress("MAGIC_NUMBER") 10,
            useServerPaging = false,
            isTransparentGrid = true,
        ) {
            arrayOf(it.filters)
        }
    }

    main {
        className = ClassName("main-content mt-5 ps text-gray-800")
        div {
            className = ClassName("page-header align-items-start min-vh-100")
            div {
                className = ClassName("d-flex justify-content-center")
                div {
                    className = ClassName("col-4 d-flex align-items-stretch")
                    fossGraphIntroductionComponent()
                }
                div {
                    className = ClassName("card flex-md-row col-7 d-flex align-items-stretch")
                    div {
                        className = ClassName("col")
                        div {
                            @Suppress("TOO_MANY_LINES_IN_LAMBDA")
                            props.currentUserInfo?.globalRole?.let { role ->
                                val tabList = if (role.isHigherOrEqualThan(Role.SUPER_ADMIN)) {
                                    VulnerabilityListTab.values().map { it.name }
                                } else {
                                    VulnerabilityListTab.values().filter { it != VulnerabilityListTab.ADMIN }
                                        .map { it.name }
                                }
                                tab(selectedMenu.name, tabList, "nav nav-tabs mt-3") { value ->
                                    setSelectedMenu { VulnerabilityListTab.valueOf(value) }
                                    setVulnerabilityFilters { getFiltersByTab(VulnerabilityListTab.valueOf(value), setPublicTable) }
                                }
                            }

                            vulnerabilityListTable {
                                filters = vulnerabilityFilters
                                getData = { _, _ ->
                                    post(
                                        url = "$apiUrl/vulnerabilities/${props.currentUserInfo?.globalRole?.let { "by-filters" } ?: "get-all-public"}",
                                        headers = jsonHeaders,
                                        body = Json.encodeToString(vulnerabilityFilters),
                                        loadingHandler = ::loadingHandler,
                                        responseHandler = ::noopResponseHandler,
                                    ).unsafeMap {
                                        it.decodeFromJsonString()
                                    }
                                }
                                commonHeaderBuilder = { cb, tableInstance, _ ->
                                    with(cb) {
                                        tr {
                                            th {
                                                colSpan = tableInstance.visibleColumnsCount()
                                                vulnerabilitiesFiltersRow {
                                                    filter = vulnerabilityFilters
                                                    onChangeFilter = { filterValue ->
                                                        filterValue?.let { setVulnerabilityFilters(filterValue) }
                                                            ?: run {
                                                                setVulnerabilityFilters {
                                                                    getFiltersByTab(
                                                                        selectedMenu,
                                                                        setPublicTable
                                                                    )
                                                                }
                                                            }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * `Props` for fossGraphCollectionView
 */
@Suppress("MISSING_KDOC_CLASS_ELEMENTS")
external interface FossGraphCollectionViewProps : Props {
    var currentUserInfo: UserInfo?
}

/**
 * Enum that contains values for vulnerability
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityListTab {
    PUBLIC,
    ADMIN,
    OWNER,
    ;

    companion object : TabMenuBar<VulnerabilityListTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityListTab = PUBLIC
        override val regexForUrlClassification = "/${FrontendRoutes.VULN}"
        override fun valueOf(elem: String): VulnerabilityListTab = VulnerabilityListTab.valueOf(elem)
        override fun values(): Array<VulnerabilityListTab> = VulnerabilityListTab.values()
    }
}

/**
 * `Props` for vulnerabilities table
 */
external interface FiltersProps : TableProps<VulnerabilityDto> {
    /**
     * All filters in one value [filters]
     */
    var filters: VulnerabilityFilter?
}

private fun getFiltersByTab(selectedMenu: VulnerabilityListTab, setPublicTable: StateSetter<Boolean>) = when (selectedMenu) {
    VulnerabilityListTab.PUBLIC -> {
        setPublicTable(true)
        VulnerabilityFilter.approved
    }
    VulnerabilityListTab.ADMIN -> {
        setPublicTable(false)
        VulnerabilityFilter(
            prefixName = "",
            status = VulnerabilityStatus.CREATED,
        )
    }
    VulnerabilityListTab.OWNER -> {
        setPublicTable(false)
        VulnerabilityFilter(
            prefixName = "",
            status = null,
            isOwner = true,
        )
    }
}
