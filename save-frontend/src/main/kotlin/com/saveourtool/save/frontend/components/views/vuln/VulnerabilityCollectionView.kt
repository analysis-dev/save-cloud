@file:Suppress(
    "HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE",
)

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.cosv.VulnerabilityMetadataDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.filters.VulnerabilityFilter
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.components.basic.*
import com.saveourtool.save.frontend.components.basic.table.filters.vulnerabilitiesFiltersRow
import com.saveourtool.save.frontend.components.tables.*
import com.saveourtool.save.frontend.components.views.contests.tab
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.themes.Colors
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.frontend.utils.noopResponseHandler
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.main
import react.dom.html.ReactHTML.td
import react.dom.html.ReactHTML.th
import react.dom.html.ReactHTML.tr
import react.router.dom.Link
import web.cssom.*

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

internal val columnHeight = 63.rem

/**
 * [FC] for [vulnerabilityCollectionView]
 */
val vulnerabilityCollectionView: FC<VulnerabilityCollectionViewProps> = FC { props ->
    useBackground(Style.VULN_DARK)
    particles()

    val (t, i18n) = useTranslation(TABLE_HEADERS_LOCALE_NAMESPACE)

    val (vulnerabilityFilter, setVulnerabilityFilter) = useState(props.filter ?: VulnerabilityFilter.approved)
    val (selectedMenu, setSelectedMenu) = useState(VulnerabilityListTab.PUBLIC)
    val (publicTable, setPublicTable) = useState(true)
    val (isOwnerTab, setIsOwnerTab) = useState(false)
    val (countVulnerability, setCountVulnerability) = useState(0)

    val enrollRequest = useDeferredRequest {
        val count: Int = post(
            url = "$apiUrl/vulnerabilities/count/by-filter",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityFilter),
            loadingHandler = ::noopLoadingHandler,
            responseHandler = ::noopResponseHandler,
        ).unsafeMap {
            it.decodeFromJsonString()
        }
        setCountVulnerability(count)
    }

    val vulnerabilityListTable: FC<FiltersProps> = useMemo(isOwnerTab, publicTable, i18n.language) {
        tableComponent(
            columns = {
                columns {
                    column(id = "identifier", header = "Identifier".t(), { identifier }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                div {
                                    className = ClassName("row")
                                    Link {
                                        to = "/${FrontendRoutes.VULNERABILITY_SINGLE}/${cellContext.row.original.identifier}"
                                        +cellContext.value
                                    }
                                }
                                div {
                                    className = ClassName("row mt-1")
                                    cellContext.row.original.tags.forEach { tag ->
                                        div {
                                            className = ClassName("rounded-pill px-1 mr-2")
                                            style = jso {
                                                fontSize = 0.8.rem
                                                color = Colors.VULN_PRIMARY.value.unsafeCast<ColorProperty>()
                                                border = "0.01rem solid $color".unsafeCast<Border>()
                                            }
                                            +tag
                                        }
                                    }
                                }
                            }
                        }
                    }
                    column(id = "short_description", header = "Description".t(), { summary }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.row.original.summary
                            }
                        }
                    }
                    column(id = "progress", header = "Criticality".t(), { severityNum }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +"${cellContext.row.original.severityNum}"
                            }
                        }
                    }
                    column(id = "language", header = "Language".t(), { language }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +"${cellContext.row.original.language}"
                            }
                        }
                    }
                    // don't show submitter on owner tab, it's always current user
                    if (!isOwnerTab) {
                        column(id = "user", header = "COSV Submitter".t(), { user.name }) { cellContext ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle")
                                    cellContext.row.original.user.let { user ->
                                        renderUserAvatarWithName(user) {
                                            height = 2.rem
                                            width = 2.rem
                                        }
                                    }
                                }
                            }
                        }
                    }
                    column(id = "organization", header = "Organization".t(), { organization?.name }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                cellContext.row.original.organization?.let { organization ->
                                    renderOrganizationWithName(organization) {
                                        height = 2.rem
                                        width = 2.rem
                                    }
                                }
                            }
                        }
                    }
                    if (!publicTable) {
                        column(id = "status", header = "Status".t(), { status }) { cellContext ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle")
                                    +"${cellContext.row.original.status}"
                                }
                            }
                        }
                    }
                }
            },
            initialPageSize = @Suppress("MAGIC_NUMBER") 7,
            useServerPaging = true,
            tableOptionsCustomizer = { tableOptions ->
                enableExpanding(tableOptions)
            },
            isTransparentGrid = true,
        ) {
            arrayOf(it.filters, it.count)
        }
    }

    main {
        className = ClassName("main-content mt-5 ps text-gray-800")
        div {
            className = ClassName("page-header align-items-start min-vh-100")
            div {
                className = ClassName("d-flex justify-content-center mb-1")
                div {
                    className = ClassName("col-4 align-items-stretch")
                    vulnerabilityIntroductionComponent()
                }
                div {
                    className = ClassName("card flex-md-row col-7 d-flex align-items-stretch mb-2")
                    style = jso {
                        minHeight = columnHeight
                    }
                    div {
                        className = ClassName("col")
                        div {
                            @Suppress("TOO_MANY_LINES_IN_LAMBDA")
                            props.currentUserInfo?.globalRole?.let { role ->
                                val tabList = if (role.isSuperAdmin()) {
                                    VulnerabilityListTab.values().map { it.name }
                                } else {
                                    VulnerabilityListTab.values().filter { it != VulnerabilityListTab.ADMIN }
                                        .map { it.name }
                                }
                                tab(selectedMenu.name, tabList, "nav nav-tabs mt-3") { value ->
                                    setSelectedMenu { VulnerabilityListTab.valueOf(value) }
                                    setVulnerabilityFilter {
                                        getFiltersByTab(VulnerabilityListTab.valueOf(value), setPublicTable, setIsOwnerTab, props.currentUserInfo)
                                    }
                                }
                            }

                            vulnerabilityListTable {
                                filters = vulnerabilityFilter
                                count = countVulnerability
                                getData = { page, size ->
                                    post(
                                        url = "$apiUrl/vulnerabilities/by-filter",
                                        params = jso<dynamic> {
                                            this.page = page
                                            this.size = size
                                        },
                                        headers = jsonHeaders,
                                        body = Json.encodeToString(vulnerabilityFilter),
                                        loadingHandler = ::loadingHandler,
                                        responseHandler = ::noopResponseHandler,
                                    ).unsafeMap {
                                        it.decodeFromJsonString()
                                    }
                                }
                                getPageCount = { pageSize ->
                                    enrollRequest()
                                    countVulnerability / pageSize + 1
                                }
                                commonHeaderBuilder = { cb, tableInstance, _ ->
                                    with(cb) {
                                        tr {
                                            th {
                                                colSpan = tableInstance.visibleColumnsCount()
                                                vulnerabilitiesFiltersRow {
                                                    filter = vulnerabilityFilter
                                                    onChangeFilter = { filterValue ->
                                                        filterValue?.let { setVulnerabilityFilter(filterValue) }
                                                            ?: run {
                                                                setVulnerabilityFilter {
                                                                    getFiltersByTab(
                                                                        selectedMenu,
                                                                        setPublicTable,
                                                                        setIsOwnerTab,
                                                                        props.currentUserInfo
                                                                    )
                                                                }
                                                            }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * `Props` for fossGraphCollectionView
 */
external interface VulnerabilityCollectionViewProps : Props {
    /**
     * Current logged-in user
     */
    var currentUserInfo: UserInfo?

    /**
     * All [VulnerabilityFilter]
     */
    var filter: VulnerabilityFilter?
}

/**
 * Enum that contains values for vulnerability
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityListTab {
    PUBLIC,
    ADMIN,
    OWNER,
    ;

    companion object : TabMenuBar<VulnerabilityListTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityListTab = PUBLIC
        override val regexForUrlClassification = "/${FrontendRoutes.VULN}"
        override fun valueOf(elem: String): VulnerabilityListTab = VulnerabilityListTab.valueOf(elem)
        override fun values(): Array<VulnerabilityListTab> = VulnerabilityListTab.values()
    }
}

/**
 * `Props` for vulnerabilities table
 */
external interface FiltersProps : TableProps<VulnerabilityMetadataDto> {
    /**
     * All filters in one value [filters]
     */
    var filters: VulnerabilityFilter?

    /**
     * Count of vulnerability
     */
    var count: Int?
}

private fun getFiltersByTab(
    selectedMenu: VulnerabilityListTab,
    setPublicTable: StateSetter<Boolean>,
    setIsOwnerTab: StateSetter<Boolean>,
    currentUserInfo: UserInfo?
) = when (selectedMenu) {
    VulnerabilityListTab.PUBLIC -> {
        setPublicTable(true)
        setIsOwnerTab(false)
        VulnerabilityFilter.approved
    }
    VulnerabilityListTab.ADMIN -> {
        setPublicTable(false)
        setIsOwnerTab(false)
        VulnerabilityFilter(
            identifierPrefix = "",
            statuses = listOf(VulnerabilityStatus.PENDING_REVIEW),
        )
    }
    VulnerabilityListTab.OWNER -> {
        setPublicTable(false)
        setIsOwnerTab(true)
        VulnerabilityFilter(
            identifierPrefix = "",
            statuses = null,
            isOwner = true,
            authorName = currentUserInfo?.name
        )
    }
}
