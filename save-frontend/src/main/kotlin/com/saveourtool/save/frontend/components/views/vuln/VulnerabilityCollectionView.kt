@file:Suppress(
    "HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE",
)

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.filters.VulnerabilityFilter
import com.saveourtool.save.frontend.TabMenuBar
import com.saveourtool.save.frontend.components.basic.fossGraphIntroductionComponent
import com.saveourtool.save.frontend.components.basic.renderAvatar
import com.saveourtool.save.frontend.components.basic.renderUserAvatarWithName
import com.saveourtool.save.frontend.components.basic.table.filters.vulnerabilitiesFiltersRow
import com.saveourtool.save.frontend.components.tables.*
import com.saveourtool.save.frontend.components.views.contests.tab
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.frontend.utils.noopResponseHandler
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.validation.FrontendRoutes

import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.main
import react.dom.html.ReactHTML.td
import react.dom.html.ReactHTML.th
import react.dom.html.ReactHTML.tr
import react.router.dom.Link
import react.router.useNavigate
import web.cssom.ClassName
import web.cssom.rem

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

/**
 * [FC] for fossGraphCollection view
 */
val vulnerabilityCollectionView: FC<FossGraphCollectionViewProps> = FC { props ->
    useBackground(Style.VULN_DARK)
    particles()
    val navigate = useNavigate()

    // by the default (if user was logged in) - we need to redirect him to OWNER tab (especially after the creation of new vulnerability)
    val (vulnerabilityFilters, setVulnerabilityFilters) =
            props.currentUserInfo
                ?.let { useState(VulnerabilityFilter(prefixName = "", status = VulnerabilityStatus.CREATED, isOwner = true)) }
                ?: useState(VulnerabilityFilter.approved)

    val (selectedMenu, setSelectedMenu) =
            props.currentUserInfo?.let { useState(VulnerabilityListTab.OWNER) } ?: useState(VulnerabilityListTab.PUBLIC)

    val (publicTable, setPublicTable) = useState(true)

    val fossGraphTable: FC<FiltersProps> = tableComponent(
        columns = {
            columns {
                column(id = "name", header = "Name", { name }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            Link {
                                to = "/${FrontendRoutes.VULN}/${cellContext.row.original.name}"
                                +cellContext.value
                            }
                        }
                    }
                }
                column(id = "short_description", header = "Description", { progress }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            +cellContext.row.original.shortDescription
                        }
                    }
                }
                column(id = "progress", header = "Criticality", { progress }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            +"${ cellContext.row.original.progress }"
                        }
                    }
                }
                column(id = "language", header = "Language", { language }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            +"${ cellContext.row.original.language }"
                        }
                    }
                }
                column(id = "user", header = "Author", { userInfo.name }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            cellContext.row.original.userInfo.let { user ->
                                renderUserAvatarWithName(user) {
                                    height = 2.rem
                                    width = 2.rem
                                }
                            }
                        }
                    }
                }
                column(id = "organization", header = "Organization", { organization?.name }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            cellContext.row.original.organization?.let { organization ->
                                Link {
                                    renderAvatar(organization) {
                                        height = 2.rem
                                        width = 2.rem
                                    }
                                    to = "/${organization.name}"
                                    +" ${organization.name}"
                                }
                            }
                        }
                    }
                }
                if (!publicTable) {
                    column(id = "status", header = "Status", { status }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +"${cellContext.row.original.status}"
                            }
                        }
                    }
                }
            }
        },
        initialPageSize = @Suppress("MAGIC_NUMBER") 10,
        useServerPaging = false,
        isTransparentGrid = true,
        commonHeader = { tableInstance, _ ->
            tr {
                th {
                    colSpan = tableInstance.visibleColumnsCount()
                    vulnerabilitiesFiltersRow {
                        name = vulnerabilityFilters.prefixName
                        onChangeFilters = { filterValue ->
                            val filter = if (filterValue.isNullOrEmpty()) {
                                VulnerabilityFilter("", vulnerabilityFilters.status)
                            } else {
                                VulnerabilityFilter(filterValue, vulnerabilityFilters.status)
                            }
                            setVulnerabilityFilters { filter }

                            navigate(
                                to = buildString {
                                    "/${FrontendRoutes.VULN}"
                                    filterValue?.let { append("?vulnerabilityName=$filterValue") }
                                }
                            )
                        }
                    }
                }
            }
        }
    ) {
        arrayOf(it.filters)
    }

    main {
        className = ClassName("main-content mt-5 ps text-gray-800")
        div {
            className = ClassName("page-header align-items-start min-vh-100")
            div {
                className = ClassName("d-flex justify-content-center")
                div {
                    className = ClassName("col-4 d-flex align-items-stretch")
                    fossGraphIntroductionComponent()
                }
                div {
                    className = ClassName("card flex-md-row col-7 d-flex align-items-stretch")
                    div {
                        className = ClassName("col")
                        div {
                            @Suppress("TOO_MANY_LINES_IN_LAMBDA")
                            props.currentUserInfo?.globalRole?.let { role ->
                                val tabList = if (role.isHigherOrEqualThan(Role.SUPER_ADMIN)) {
                                    VulnerabilityListTab.values().map { it.name }
                                } else {
                                    VulnerabilityListTab.values().filter { it != VulnerabilityListTab.ADMIN }
                                        .map { it.name }
                                }
                                tab(selectedMenu.name, tabList, "nav nav-tabs mt-3") { value ->
                                    setSelectedMenu { VulnerabilityListTab.valueOf(value) }
                                    when (VulnerabilityListTab.valueOf(value)) {
                                        VulnerabilityListTab.PUBLIC -> {
                                            setVulnerabilityFilters {
                                                VulnerabilityFilter.approved
                                            }
                                            setPublicTable(true)
                                        }

                                        VulnerabilityListTab.ADMIN -> {
                                            setVulnerabilityFilters {
                                                VulnerabilityFilter(
                                                    prefixName = "",
                                                    status = VulnerabilityStatus.CREATED,
                                                )
                                            }
                                            setPublicTable(false)
                                        }

                                        VulnerabilityListTab.OWNER -> {
                                            setVulnerabilityFilters {
                                                VulnerabilityFilter(
                                                    prefixName = "",
                                                    status = VulnerabilityStatus.CREATED,
                                                    isOwner = true,
                                                )
                                            }
                                            setPublicTable(false)
                                        }
                                    }
                                }
                            }

                            fossGraphTable {
                                filters = vulnerabilityFilters
                                getData = { _, _ ->
                                    post(
                                        url = "$apiUrl/vulnerabilities/${props.currentUserInfo?.globalRole?.let { "by-filters" } ?: "get-all-public"}",
                                        headers = jsonHeaders,
                                        body = Json.encodeToString(vulnerabilityFilters),
                                        loadingHandler = ::noopLoadingHandler,
                                        responseHandler = ::noopResponseHandler,
                                    ).unsafeMap {
                                        it.decodeFromJsonString()
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * `Props` for fossGraphCollectionView
 */
@Suppress("MISSING_KDOC_CLASS_ELEMENTS")
external interface FossGraphCollectionViewProps : Props {
    var currentUserInfo: UserInfo?
}

/**
 * Enum that contains values for vulnerability
 */
@Suppress("WRONG_DECLARATIONS_ORDER")
enum class VulnerabilityListTab {
    PUBLIC,
    ADMIN,
    OWNER,
    ;

    companion object : TabMenuBar<VulnerabilityListTab> {
        override val nameOfTheHeadUrlSection = ""
        override val defaultTab: VulnerabilityListTab = PUBLIC
        override val regexForUrlClassification = "/${FrontendRoutes.VULN}"
        override fun valueOf(elem: String): VulnerabilityListTab = VulnerabilityListTab.valueOf(elem)
        override fun values(): Array<VulnerabilityListTab> = VulnerabilityListTab.values()
    }
}

/**
 * `Props` for vulnerabilities table
 */
external interface FiltersProps : TableProps<VulnerabilityDto> {
    /**
     * All filters in one value [filters]
     */
    var filters: VulnerabilityFilter?
}
