@file:Suppress("HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.OrganizationDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityLanguage
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.frontend.components.basic.addUserComponent
import com.saveourtool.save.frontend.components.basic.markdown
import com.saveourtool.save.frontend.components.basic.renderAvatar
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.inputform.inputTextFormOptional
import com.saveourtool.save.frontend.components.modal.MAX_Z_INDEX
import com.saveourtool.save.frontend.components.views.vuln.component.uploadCosvButton
import com.saveourtool.save.frontend.externals.fontawesome.*
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.utils.isNotNull
import com.saveourtool.save.validation.FrontendRoutes
import com.saveourtool.save.validation.isValidUrl

import js.core.jso
import react.ChildrenBuilder
import react.VFC
import react.dom.aria.ariaDescribedBy
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.form
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.input
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.option
import react.dom.html.ReactHTML.select
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.textarea
import react.router.useNavigate
import react.useState
import web.cssom.ClassName
import web.cssom.ZIndex
import web.cssom.rem
import web.html.InputType

import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

@Suppress(
    "MAGIC_NUMBER",
    "MagicNumber",
    "LONG_LINE",
    "MaxLineLength",
)
val createVulnerabilityView: VFC = VFC {
    useBackground(Style.VULN_DARK)
    val navigate = useNavigate()
    useTooltip()

    val (vulnerability, setVulnerability) = useState(VulnerabilityDto.empty)
    val (conflictErrorMessage, setConflictErrorMessage) = useState<String?>(null)
    val (duplicateVulnerability, setDuplicateVulnerability) = useState<VulnerabilityDto?>(null)
    val (userOrganizations, setUserOrganizations) = useState(emptyList<OrganizationDto>())
    val (isGenerateIdentifier, setIsGenerateIdentifier) = useState(false)

    val (t) = useTranslation("proposing")

    val projectWindowOpenness = useWindowOpenness()

    useRequest {
        val organizations = get(
            url = "$apiUrl/organizations/get/list",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
            responseHandler = ::noopResponseHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString<List<OrganizationDto>>()
            }

        setUserOrganizations(organizations)
    }

    val fetchProject: (VulnerabilityProjectDto) -> Unit = { project ->
        setVulnerability {
            it.copy(projects = it.projects.plus(project))
        }
        projectWindowOpenness.closeWindow()
    }

    val enrollRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/vulnerabilities/save",
            headers = jsonHeaders,
            params = jso<dynamic> { this.isGenerateIdentifier = isGenerateIdentifier },
            body = Json.encodeToString(vulnerability),
            loadingHandler = ::loadingHandler,
            responseHandler = ::responseHandlerWithValidation,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        } else if (response.isConflict()) {
            setConflictErrorMessage(response.unpackMessageOrHttpStatus())
        }
    }

    val enrollCheckVulnerabilityRequest = useDeferredRequest {
        val response = get(
            url = "$apiUrl/vulnerabilities/by-identifier",
            params = jso<dynamic> {
                identifier = vulnerability.identifier
            },
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
            responseHandler = ::noopResponseHandler,
        )
        if (response.ok) {
            val vulnerabilityNew = response.unsafeMap {
                it.decodeFromJsonString<VulnerabilityDto>()
            }
            setDuplicateVulnerability(vulnerabilityNew)
        } else {
            setDuplicateVulnerability(null)
            enrollRequest()
        }
    }

    vulnerabilityProjectWindow {
        windowOpenness = projectWindowOpenness
        fetchProjectCredentials = fetchProject
    }

    div {
        particles()
        className = ClassName("page-header align-items-start min-vh-100")
        span {
            className = ClassName("mask bg-gradient-dark opacity-6")
        }
        div {
            className = ClassName("row justify-content-center ")
            div {
                className = ClassName("col-sm-4 mt-3")
                div {
                    className = ClassName("container card o-hidden border-0 shadow-lg my-2 card-body p-0 text-gray-900")
                    style = jso {
                        zIndex = (MAX_Z_INDEX - 1).unsafeCast<ZIndex>()
                    }
                    div {
                        className = ClassName("p-5 text-center")
                        h1 {
                            className = ClassName("h4 mb-4")
                            +"Propose a new vulnerability".t()
                        }
                        uploadCosvButton {
                            isImage = false
                        }
                        form {
                            className = ClassName("needs-validation")
                            div {
                                className = ClassName("row")

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    requiredTitle("Vulnerability identifier".t(), "identifier-input-form")
                                    input {
                                        val valid = if (isGenerateIdentifier || vulnerability.identifier.isEmpty()) {
                                            ""
                                        } else if (duplicateVulnerability.isNotNull() || !vulnerability.validateIdentifier()) {
                                            "is-invalid"
                                        } else {
                                            "is-valid"
                                        }
                                        id = "identifier-input-form"
                                        disabled = isGenerateIdentifier
                                        className = ClassName("col-12 my-2 px-2 text-left form-control $valid")
                                        value = vulnerability.identifier
                                        placeholder = "${"Identifier".t()}..."
                                        onChange = { event ->
                                            setVulnerability { it.copy(identifier = event.target.value) }
                                            setConflictErrorMessage(null)
                                            setDuplicateVulnerability(null)
                                        }
                                    }
                                    div {
                                        className = ClassName("form-check")
                                        input {
                                            id = "generate-id-checkbox"
                                            type = "checkbox".unsafeCast<InputType>()
                                            className = ClassName("form-check-input")
                                            value = isGenerateIdentifier
                                            onChange = { _ ->
                                                setIsGenerateIdentifier { oldIsGenerateIdentifier ->
                                                    !oldIsGenerateIdentifier.also { newIsGenerateIdentifier ->
                                                        if (!newIsGenerateIdentifier) {
                                                            setVulnerability { it.copy(identifier = "") }
                                                        }
                                                    }
                                                }
                                                setConflictErrorMessage(null)
                                                setDuplicateVulnerability(null)
                                            }
                                        }
                                        label {
                                            className = ClassName("form-check-label")
                                            htmlFor = "generate-id-checkbox"
                                            +"Generate identifier".t()
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    requiredTitle("Short description".t())
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event -> setVulnerability { it.copy(shortDescription = event.target.value) } }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 1
                                            id = InputTypes.DESCRIPTION.name
                                            required = true
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Short description of vulnerability"
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    label {
                                        className = ClassName("form-label mb-0")
                                        +"Description".t()
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event -> setVulnerability { it.copy(description = event.target.value) } }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 3
                                            id = InputTypes.DESCRIPTION.name
                                            required = true
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Description of vulnerability"
                                        }
                                    }
                                }

                                inputTextFormOptional {
                                    form = InputTypes.GIT_URL
                                    textValue = vulnerability.relatedLink
                                    validInput = vulnerability.relatedLink?.isValidUrl()
                                    classes = "col-12 my-2 px-2 text-left"
                                    name = "Related link".t()
                                    onChangeFun = { event -> setVulnerability { it.copy(relatedLink = event.target.value) } }
                                }

                                div {
                                    className = ClassName("col-12 px-2 my-2 text-left align-self-center")
                                    +"Language".t()

                                    selectorBuilder(
                                        vulnerability.language.value,
                                        VulnerabilityLanguage.values().map { it.toString() },
                                        classes = "input-group form-control custom-select",
                                    ) { event ->
                                        val entries = event.target.value
                                        val languageSelect = requireNotNull(VulnerabilityLanguage.values().find { it.value == entries })
                                        setVulnerability(vulnerability.copy(language = languageSelect))
                                    }
                                }

                                inputTextFormOptional {
                                    form = InputTypes.COSV_VECTORE
                                    textValue = vulnerability.relatedLink
                                    classes = "col-12 my-2 px-2 text-left"
                                    name = "Severity score vector"
                                    onChangeFun = { event -> setVulnerability { it.copy(severity = event.target.value) } }
                                }

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    label {
                                        className = ClassName("form-label mb-0")
                                        +"Criticality".t()
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        input {
                                            type = InputType.number
                                            className = ClassName("form-control")
                                            required = true
                                            defaultValue = 0
                                            onChange = { event ->
                                                val progress = event.target.value.toFloat()
                                                if (progress !in (0f..10f)) {
                                                    setConflictErrorMessage("Progress must be an float number with only one digit after the decimal point from 0 to 10.0")
                                                } else {
                                                    setVulnerability { it.copy(progress = progress) }
                                                    setConflictErrorMessage(null)
                                                }
                                            }
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Vulnerability criticality percentage (0..10.0)"
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 my-2 text-left align-self-center")
                                    +"Organization".t()

                                    select {
                                        className = ClassName("form-control input-group input-group custom-select")
                                        val elements = userOrganizations.map { it.name }.toMutableList()
                                        elements.add(0, "")
                                        elements.map {
                                            option {
                                                value = it
                                                +it
                                            }
                                        }
                                        onChange = { event ->
                                            val value = event.target.value
                                            if (value.isNotEmpty()) {
                                                setVulnerability { it.copy(organization = OrganizationDto(value)) }
                                            }
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 mt-2 text-left")
                                    label {
                                        className = ClassName("form-label mb-0")
                                        +"Collaborators".t()
                                    }
                                    addUserComponent {
                                        idsToSkip = vulnerability.participants.mapNotNull { it.id }.toSet()
                                        onUserAdd = { newUser ->
                                            setVulnerability { vuln -> vuln.copy(participants = vuln.participants.plus(newUser)) }
                                        }
                                    }

                                    div {
                                        vulnerability.participants.forEach { user ->
                                            div {
                                                className = ClassName("mt-2 d-flex align-items-center")
                                                div {
                                                    className = ClassName("col-2 d-flex justify-content-center align-items-center")
                                                    renderAvatar(user) {
                                                        width = 2.rem
                                                        height = 2.rem
                                                    }
                                                }
                                                div {
                                                    className = ClassName("col-8 text-left pl-0")
                                                    +user.name
                                                }
                                                buttonBuilder(style = "", classes = "col-2", icon = faTimesCircle) {
                                                    if (window.confirm("Remove user ${user.name} from this vulnerability?")) {
                                                        setVulnerability { it.copy(participants = it.participants.minus(user)) }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 mt-2")
                                    div {
                                        className = ClassName("d-flex align-items-center justify-content-between")
                                        label {
                                            className = ClassName("form-label mb-0")
                                            +"${"Affected projects".t()}:"
                                        }
                                        div {
                                            className = ClassName("")
                                            buttonBuilder(faPlus, isOutline = true, classes = "btn-sm rounded-circle") {
                                                projectWindowOpenness.openWindow()
                                            }
                                        }
                                    }

                                    vulnerability.projects.forEach { project ->
                                        val url = project.url
                                        div {
                                            className = ClassName("mt-2 d-flex align-items-center")
                                            div {
                                                className = ClassName("col-2 d-flex justify-content-center align-items-center")
                                                fontAwesomeIcon(
                                                    when {
                                                        url.contains("github") -> faGithub
                                                        url.contains("codehub") -> faCopyright
                                                        else -> faHome
                                                    },
                                                )
                                            }
                                            div {
                                                className = ClassName("col-8 text-left pl-0")
                                                +url
                                            }
                                            buttonBuilder(style = "", classes = "col-2", icon = faTimesCircle) {
                                                if (window.confirm("Remove project ${project.name} from this vulnerability?")) {
                                                    setVulnerability { it.copy(projects = it.projects.minus(project)) }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        buttonBuilder(
                            "Propose a vulnerability".t(),
                            "primary",
                            classes = "mt-4",
                            isOutline = false,
                            isDisabled = vulnerability.description.isNullOrEmpty() || vulnerability.shortDescription.isEmpty() || conflictErrorMessage.isNotNull() || duplicateVulnerability != null || !vulnerability.validateIdentifier()
                        ) {
                            if (isGenerateIdentifier) {
                                enrollRequest()
                            } else {
                                enrollCheckVulnerabilityRequest()
                            }
                        }

                        conflictErrorMessage?.let {
                            div {
                                className = ClassName("invalid-feedback d-block text-center")
                                +it
                            }
                        }
                        duplicateVulnerability?.let {
                            div {
                                className = ClassName("invalid-feedback d-block text-center")
                                markdown(
                                    "Vulnerability associated with this identifier: [${vulnerability.identifier}](/${FrontendRoutes.VULNERABILITY_SINGLE}/${duplicateVulnerability.identifier}) already exists"
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

private fun ChildrenBuilder.requiredTitle(title: String, htmlForId: String? = null) {
    label {
        htmlForId?.let { htmlFor = it }
        className = ClassName("form-label mb-0")
        +title
        span {
            className = ClassName("text-danger text-left")
            +"*"
        }
    }
}
