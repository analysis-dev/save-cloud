@file:Suppress("HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.cvsscalculator.CvssVersion
import com.saveourtool.save.cvsscalculator.calculateBaseScore
import com.saveourtool.save.cvsscalculator.v3.CvssVectorV3
import com.saveourtool.save.entities.OrganizationDto
import com.saveourtool.save.frontend.components.basic.addUserComponent
import com.saveourtool.save.frontend.components.basic.markdown
import com.saveourtool.save.frontend.components.basic.renderAvatar
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.inputform.inputTextFormOptional
import com.saveourtool.save.frontend.components.modal.MAX_Z_INDEX
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.largeTransparentModalStyle
import com.saveourtool.save.frontend.components.views.vuln.component.cvssBaseScoreCalculator
import com.saveourtool.save.frontend.components.views.vuln.component.uploadCosvButton
import com.saveourtool.save.frontend.externals.fontawesome.*
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.themes.Colors
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.utils.*
import com.saveourtool.save.validation.FrontendRoutes
import com.saveourtool.save.validation.isValidUrl

import com.saveourtool.osv4k.Reference
import com.saveourtool.osv4k.ReferenceType
import com.saveourtool.osv4k.Severity
import com.saveourtool.osv4k.SeverityType
import js.core.jso
import react.ChildrenBuilder
import react.VFC
import react.dom.aria.ariaDescribedBy
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.form
import react.dom.html.ReactHTML.h1
import react.dom.html.ReactHTML.input
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.option
import react.dom.html.ReactHTML.select
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.textarea
import react.router.useNavigate
import react.useState
import web.cssom.*
import web.html.InputType

import kotlin.Float
import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

@Suppress(
    "MAGIC_NUMBER",
    "MagicNumber",
    "LONG_LINE",
    "MaxLineLength",
)
val createVulnerabilityView: VFC = VFC {
    useBackground(Style.VULN_DARK)
    val navigate = useNavigate()
    useTooltip()

    val (cosv, setCosv) = useState(ManualCosvSchema(id = "", modified = getCurrentLocalDateTime()))
    val (conflictErrorMessage, setConflictErrorMessage) = useState<String?>(null)
    val (isAlreadyExisted, setIsAlreadyExisted) = useState(false)
    val (userOrganizations, setUserOrganizations) = useState(emptyList<OrganizationDto>())
    val (selectedOrganizationName, setSelectedOrganizationName) = useState<String>()
    val (isGenerateIdentifier, setIsGenerateIdentifier) = useState(false)

    val (t) = useTranslation("proposing")

    val cvssCalculatorWindowOpenness = useWindowOpenness()

    useRequest {
        val organizations = get(
            url = "$apiUrl/organizations/get/list",
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
            responseHandler = ::noopResponseHandler,
        )
            .unsafeMap {
                it.decodeFromJsonString<List<OrganizationDto>>()
            }

        setUserOrganizations(organizations)
    }

    val enrollRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/cosv/save",
            headers = jsonHeaders,
            params = jso<dynamic> {
                this.isGenerateIdentifier = isGenerateIdentifier
                selectedOrganizationName?.let {
                    organizationName = it
                }
            },
            body = Json.encodeToString(cosv),
            loadingHandler = ::loadingHandler,
            responseHandler = ::responseHandlerWithValidation,
        )
        if (response.ok) {
            navigate(to = "/${FrontendRoutes.VULNERABILITIES}")
        } else if (response.isConflict()) {
            setConflictErrorMessage(response.unpackMessageOrHttpStatus())
        }
    }

    val enrollCheckVulnerabilityRequest = useDeferredRequest {
        val response = get(
            url = "$apiUrl/vulnerabilities/by-identifier",
            params = jso<dynamic> {
                identifier = cosv.id
            },
            headers = jsonHeaders,
            loadingHandler = ::loadingHandler,
            responseHandler = ::noopResponseHandler,
        )
        if (response.ok) {
            setIsAlreadyExisted(true)
        } else {
            setIsAlreadyExisted(false)
            enrollRequest()
        }
    }

    @Suppress("EMPTY_BLOCK_STRUCTURE_ERROR")
    displayModal(
        cvssCalculatorWindowOpenness.isOpen(),
        "Base Score Calculator".t(),
        bodyBuilder = {
            cvssBaseScoreCalculator {
                onCloseButton = { cvssCalculatorWindowOpenness.closeWindow() }
                onCloseButtonPassed = { baseMetrics ->
                    val cvssVector = CvssVectorV3(CvssVersion.CVSS_V3_1, baseMetrics)
                    setCosv { it.copy(severity = listOf(Severity(type = SeverityType.CVSS_V3, score = cvssVector.scoreVectorString(), scoreNum = cvssVector.calculateBaseScore().toString()))) }
                    setConflictErrorMessage(null)
                }
            }
        },
        modalStyle = largeTransparentModalStyle,
        onCloseButtonPressed = cvssCalculatorWindowOpenness.closeWindowAction(),
        customWidth = jso { width = 45.rem }
    ) { }

    div {
        particles()
        className = ClassName("page-header align-items-start min-vh-100")
        span {
            className = ClassName("mask bg-gradient-dark opacity-6")
        }
        div {
            className = ClassName("row justify-content-center ")
            div {
                className = ClassName("col-sm-4 mt-3")
                div {
                    className = ClassName("container card o-hidden border-0 shadow-lg my-2 card-body p-0 text-gray-900")
                    style = jso {
                        zIndex = (MAX_Z_INDEX - 1).unsafeCast<ZIndex>()
                    }
                    div {
                        className = ClassName("p-5 text-center")
                        h1 {
                            className = ClassName("h4 mb-4")
                            +"Propose a new vulnerability".t()
                        }
                        uploadCosvButton {
                            isImage = false
                        }
                        form {
                            className = ClassName("needs-validation")
                            div {
                                className = ClassName("row")

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    requiredTitle("Vulnerability identifier".t(), "identifier-input-form")
                                    input {
                                        val valid = if (isGenerateIdentifier || cosv.id.isEmpty()) {
                                            ""
                                        } else if (isAlreadyExisted || !validateIdentifier(cosv.id)) {
                                            "is-invalid"
                                        } else {
                                            "is-valid"
                                        }
                                        id = "identifier-input-form"
                                        disabled = isGenerateIdentifier
                                        className = ClassName("col-12 my-2 px-2 text-left form-control $valid")
                                        value = cosv.id
                                        placeholder = "${"Identifier".t()}..."
                                        onChange = { event ->
                                            setCosv { it.copy(id = event.target.value) }
                                            setConflictErrorMessage(null)
                                            setIsAlreadyExisted(false)
                                        }
                                    }
                                    div {
                                        className = ClassName("form-check")
                                        input {
                                            id = "generate-id-checkbox"
                                            type = "checkbox".unsafeCast<InputType>()
                                            className = ClassName("form-check-input")
                                            value = isGenerateIdentifier
                                            onChange = { _ ->
                                                setIsGenerateIdentifier { oldIsGenerateIdentifier ->
                                                    !oldIsGenerateIdentifier.also { newIsGenerateIdentifier ->
                                                        if (!newIsGenerateIdentifier) {
                                                            setCosv { it.copy(id = "") }
                                                        }
                                                    }
                                                }
                                                setConflictErrorMessage(null)
                                                setIsAlreadyExisted(false)
                                            }
                                        }
                                        label {
                                            className = ClassName("form-check-label")
                                            htmlFor = "generate-id-checkbox"
                                            +"Generate identifier".t()
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    requiredTitle("Summary".t())
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event -> setCosv { it.copy(summary = event.target.value) } }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 1
                                            id = InputTypes.DESCRIPTION.name
                                            required = true
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Summary of vulnerability"
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 my-2 px-2 text-left")
                                    label {
                                        className = ClassName("form-label mb-0")
                                        +"Details".t()
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }
                                    div {
                                        className = ClassName("input-group needs-validation")
                                        textarea {
                                            className = ClassName("form-control")
                                            onChange = { event -> setCosv { it.copy(details = event.target.value) } }
                                            ariaDescribedBy = "${InputTypes.DESCRIPTION.name}Span"
                                            rows = 3
                                            id = InputTypes.DESCRIPTION.name
                                            required = true
                                            asDynamic()["data-toggle"] = "tooltip"
                                            asDynamic()["data-placement"] = "bottom"
                                            title = "Details of vulnerability"
                                        }
                                    }
                                }

                                cosv.getRelatedLink().let { relatedLink ->
                                    inputTextFormOptional {
                                        form = InputTypes.GIT_URL
                                        textValue = relatedLink
                                        validInput = relatedLink?.isValidUrl()
                                        classes = "col-12 my-2 px-2 text-left"
                                        name = "Related link".t()
                                        onChangeFun = { event ->
                                            setCosv { it.copy(references = listOf(Reference(ReferenceType.WEB, event.target.value))) }
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 my-2 text-left align-self-center")

                                    label {
                                        className = ClassName("form-label mb-0")
                                        +"Severity score vector".t()
                                        span {
                                            className = ClassName("text-danger text-left")
                                            +"*"
                                        }
                                    }

                                    div {
                                        className = ClassName("row px-2")

                                        input {
                                            style = jso {
                                                val colorBg = getColor(cosv.severity?.firstOrNull()?.scoreNum?.toFloat() ?: 0f)
                                                color = Colors.WHITE.value.unsafeCast<Color>()
                                                backgroundColor = colorBg.unsafeCast<BackgroundColor>()
                                            }
                                            type = InputType.text
                                            required = true
                                            value = cosv.severity?.firstOrNull()
                                                ?.scoreNum
                                                ?.toFloat() ?: 0f
                                            disabled = true
                                            className = ClassName("col-2 form-control text-center")
                                        }

                                        input {
                                            type = InputType.text
                                            required = true
                                            value = cosv.severity?.firstOrNull()
                                                ?.score
                                                .orEmpty()
                                            placeholder = InputTypes.COSV_VECTORE.placeholder
                                            disabled = false
                                            className = ClassName("col-9 form-control")
                                            onChange = { event ->
                                                val vector = event.target.value
                                                val score = try {
                                                    val result = calculateBaseScore(vector)
                                                    setConflictErrorMessage(null)
                                                    result
                                                } catch (e: IllegalArgumentException) {
                                                    setConflictErrorMessage("Invalid severity score vector: ${e.message}")
                                                    null
                                                }
                                                val severity = Severity(
                                                    type = SeverityType.CVSS_V3,
                                                    score = vector,
                                                    scoreNum = score?.toString(),
                                                )
                                                setCosv { it.copy(severity = listOf(severity)) }
                                            }
                                        }

                                        buttonBuilder(faPlus, "secondary", classes = "col-1") {
                                            cvssCalculatorWindowOpenness.openWindow()
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 my-2 text-left align-self-center")
                                    +"Organization".t()

                                    select {
                                        className = ClassName("form-control input-group input-group custom-select")
                                        val elements = userOrganizations.map { it.name }.toMutableList()
                                        elements.add(0, "")
                                        elements.map {
                                            option {
                                                value = it
                                                +it
                                            }
                                        }
                                        onChange = { event ->
                                            val value = event.target.value
                                            if (value.isNotEmpty()) {
                                                setSelectedOrganizationName(value)
                                            }
                                        }
                                    }
                                }

                                div {
                                    className = ClassName("col-12 px-2 mt-2 text-left")
                                    label {
                                        className = ClassName("form-label mb-0")
                                        +"Collaborators".t()
                                    }
                                    addUserComponent {
                                        namesToSkip = cosv.credits?.map { it.name }
                                            ?.toSet()
                                            .orEmpty()
                                        onUserAdd = { newUser ->
                                            val credit = newUser.asCredit()
                                            setCosv { it.copy(credits = it.credits?.plus(credit) ?: listOf(credit)) }
                                        }
                                    }

                                    div {
                                        cosv.credits?.forEach { credit ->
                                            div {
                                                className = ClassName("mt-2 d-flex align-items-center")
                                                div {
                                                    className = ClassName("col-2 d-flex justify-content-center align-items-center")
                                                    renderAvatar(credit.asSaveContribute()) {
                                                        width = 2.rem
                                                        height = 2.rem
                                                    }
                                                }
                                                div {
                                                    className = ClassName("col-8 text-left pl-0")
                                                    +credit.name
                                                }
                                                buttonBuilder(style = "", classes = "col-2", icon = faTimesCircle) {
                                                    if (window.confirm("Remove user ${credit.name} from this vulnerability?")) {
                                                        setCosv { it.copy(credits = it.credits?.minus(credit)) }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        buttonBuilder(
                            "Propose a vulnerability".t(),
                            "primary",
                            classes = "mt-4",
                            isOutline = false,
                            isDisabled = cosv.summary.isNullOrEmpty() || cosv.details.isNullOrEmpty() || cosv.severity.isNullOrEmpty() || conflictErrorMessage.isNotNull() || isAlreadyExisted || !validateIdentifier(cosv.id)
                        ) {
                            if (isGenerateIdentifier) {
                                enrollRequest()
                            } else {
                                enrollCheckVulnerabilityRequest()
                            }
                        }

                        conflictErrorMessage?.let {
                            div {
                                className = ClassName("invalid-feedback d-block text-center")
                                +it
                            }
                        }
                        if (isAlreadyExisted) {
                            div {
                                className = ClassName("invalid-feedback d-block text-center")
                                markdown(
                                    "Vulnerability associated with this identifier: [${cosv.id}](/${FrontendRoutes.VULNERABILITY_SINGLE}/${cosv.id}) already exists"
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

private fun ChildrenBuilder.requiredTitle(title: String, htmlForId: String? = null) {
    label {
        htmlForId?.let { htmlFor = it }
        className = ClassName("form-label mb-0")
        +title
        span {
            className = ClassName("text-danger text-left")
            +"*"
        }
    }
}

private fun getColor(value: Float): String = when (value) {
    0f -> Colors.NONE.value
    in 0.1f..3.9f -> Colors.SUCCESS.value
    in 3.9f..6.9f -> Colors.WARNING.value
    in 6.9f..8.9f -> Colors.ORANGE.value
    in 8.9f..10f -> Colors.DANGER.value
    else -> throw IllegalStateException("Progress should be in [0; 10.0], got $value")
}
