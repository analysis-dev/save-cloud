@file:Suppress("FILE_NAME_INCORRECT", "FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.fossgraph

import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectType
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.components.tables.TableProps
import com.saveourtool.save.frontend.components.tables.columns
import com.saveourtool.save.frontend.components.tables.tableComponent
import com.saveourtool.save.frontend.components.tables.value
import com.saveourtool.save.frontend.externals.fontawesome.faFile
import com.saveourtool.save.frontend.externals.fontawesome.faPlus
import com.saveourtool.save.frontend.externals.fontawesome.faTrashAlt
import com.saveourtool.save.frontend.utils.*

import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.td
import react.router.dom.Link
import web.cssom.ClassName

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

val vulnerabilityInfoTab: FC<VulnerabilityInfoTabProps> = FC { props ->
    val projectWindowOpenness = useWindowOpenness()
    val deleteVulnerabilityWindowOpenness = useWindowOpenness()

    val (vulnerability, setVulnerability) = useStateFromProps(props.vulnerability)
    val (vulnerabilityProjects, setVulnerabilityProjects) = useStateFromProps(props.vulnerability.projects.toSet())
    val (isUpdateVulnerability, setIsUpdateVulnerability) = useState(false)
    val (deleteProject, setDeleteProject) = useState<VulnerabilityProjectDto?>(null)

    val enrollRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/vulnerabilities/save-projects",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityProjects),
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            setIsUpdateVulnerability(false)
        }
    }

    val fetchProject: (VulnerabilityProjectDto) -> Unit = { project ->
        setVulnerability {
            it.copy(projects = it.projects.plus(project.copy(vulnerabilityName = it.name)))
        }
        setVulnerabilityProjects {
            it.plus(project.copy(vulnerabilityName = vulnerability.name))
        }
        setIsUpdateVulnerability(true)
        projectWindowOpenness.closeWindow()
    }

    val enrollDeleteProjectRequest = useDeferredRequest {
        deleteProject?.let { project ->
            val response = delete(
                url = "$apiUrl/vulnerabilities/delete-project?projectName=${project.name}&vulnerabilityName=${props.vulnerability.name}",
                headers = jsonHeaders,
                loadingHandler = ::loadingHandler,
            )
            if (response.ok) {
                setVulnerability { it.copy(projects = it.projects.minus(project)) }
            }
        }
    }

    vulnerabilityProjectWindow {
        this.windowOpenness = projectWindowOpenness
        this.fetchProjectCredentials = fetchProject
    }

    @Suppress(
        "TYPE_ALIAS",
        "MAGIC_NUMBER",
    )
    val openSourceProjectTable: FC<TableProps<VulnerabilityProjectDto>> = tableComponent(
        columns = {
            columns {
                column(id = "name", header = "Name", { name }) { cellContext ->
                    Fragment.create {
                        td {
                            Link {
                                to = cellContext.row.original.url
                                +cellContext.value
                            }
                        }
                    }
                }
                column(id = "versions", header = "Versions", { versions }) { cellContext ->
                    Fragment.create {
                        td {
                            +cellContext.value
                        }
                    }
                }
                column("delete", "") { cellProps ->
                    Fragment.create {
                        td {
                            div {
                                className = ClassName("d-flex justify-content-end")
                                buttonBuilder(faTrashAlt, style = "") {
                                    setDeleteProject(value = cellProps.row.original)
                                    deleteVulnerabilityWindowOpenness.openWindow()
                                }
                            }
                        }
                    }
                }
            }
        },
        initialPageSize = 10,
        useServerPaging = false,
        isTransparentGrid = true,
    )

    @Suppress(
        "TYPE_ALIAS",
        "MAGIC_NUMBER",
    )
    val projectTable: FC<TableProps<VulnerabilityProjectDto>> = tableComponent(
        columns = {
            columns {
                column(id = "name", header = "Name", { name }) { cellContext ->
                    Fragment.create {
                        td {
                            Link {
                                to = cellContext.row.original.url
                                +cellContext.value
                            }
                        }
                    }
                }
                column(id = "versions", header = "Versions", { versions }) { cellContext ->
                    Fragment.create {
                        td {
                            +cellContext.value
                        }
                    }
                }
                column("delete", "") { cellProps ->
                    Fragment.create {
                        td {
                            div {
                                className = ClassName("d-flex justify-content-end")
                                buttonBuilder(faTrashAlt, style = "") {
                                    setDeleteProject(value = cellProps.row.original)
                                    deleteVulnerabilityWindowOpenness.openWindow()
                                }
                            }
                        }
                    }
                }
            }
        },
        initialPageSize = 10,
        useServerPaging = false,
        isTransparentGrid = true,
    )

    displayModal(
        deleteVulnerabilityWindowOpenness.isOpen(),
        "Deletion of project",
        "Are you sure you want to remove this project?",
        mediumTransparentModalStyle,
        deleteVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok") {
            enrollDeleteProjectRequest()
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close", "secondary") {
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
    }

    div {
        className = ClassName("d-flex justify-content-end")
        buttonBuilder(faPlus, classes = "mr-2", isOutline = true, title = "Add more info") {
            projectWindowOpenness.openWindow()
        }
        buttonBuilder(faFile, isDisabled = !isUpdateVulnerability, title = "Save") {
            enrollRequest()
        }
    }
    div {
        className = ClassName("mt-5 text-xs text-center font-weight-bold text-primary text-uppercase mb-3")
        +"Affected open source projects"
    }

    openSourceProjectTable {
        getData = { _, _ ->
            vulnerabilityProjects.filter { it.type == VulnerabilityProjectType.PROJECT }.toTypedArray()
        }
    }

    div {
        className = ClassName("mt-5 text-xs text-center font-weight-bold text-primary text-uppercase mb-3")
        +"Affected libraries"
    }

    projectTable {
        getData = { _, _ ->
            vulnerabilityProjects.filter { it.type == VulnerabilityProjectType.LIBRARY }.toTypedArray()
        }
    }

    div {
        className = ClassName("mt-5 text-xs text-center font-weight-bold text-primary text-uppercase mb-3")
        +"Commits with fix"
    }

    projectTable {
        getData = { _, _ ->
            vulnerabilityProjects.filter { it.type == VulnerabilityProjectType.COMMIT }.toTypedArray()
        }
    }
}

/**
 * [Props] of vulnerability info tab component
 */
external interface VulnerabilityInfoTabProps : Props {
    /**
     * Vulnerability dto of vulnerability
     */
    var vulnerability: VulnerabilityDto
}
