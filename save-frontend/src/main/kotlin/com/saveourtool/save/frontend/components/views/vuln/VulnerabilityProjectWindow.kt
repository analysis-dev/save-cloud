@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectType
import com.saveourtool.save.frontend.components.inputform.InputTypes
import com.saveourtool.save.frontend.components.inputform.inputTextFormOptional
import com.saveourtool.save.frontend.components.inputform.inputTextFormRequired
import com.saveourtool.save.frontend.components.modal.modal
import com.saveourtool.save.frontend.externals.i18next.useTranslation
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.validation.isValidUrl

import react.FC
import react.Props
import react.dom.html.ReactHTML.button
import react.dom.html.ReactHTML.div
import react.useEffect
import react.useState
import web.cssom.ClassName
import web.html.ButtonType

/**
 * Component that allows to add new project in vulnerability
 */
val vulnerabilityProjectWindow: FC<VulnerabilityProjectWindowProps> = FC { props ->
    val (conflictErrorMessage, setConflictErrorMessage) = useState<String?>(null)
    val (vulnerabilityProject, setVulnerabilityProject) = useState(VulnerabilityProjectDto.empty)

    useEffect(props.windowOpenness.isOpen()) {
        if (props.windowOpenness.isOpen()) {
            setVulnerabilityProject {
                props.type?.let { type ->
                    VulnerabilityProjectDto.empty.copy(type = type)
                } ?: VulnerabilityProjectDto.empty
            }
        }
    }

    val (t) = useTranslation("vulnerability")
    val projectTypeName = vulnerabilityProject.type.value
    val nameOrHash = if (vulnerabilityProject.type == VulnerabilityProjectType.COMMIT) "Hash" else "Name"

    modal { modalProps ->
        modalProps.isOpen = props.windowOpenness.isOpen()

        div {
            className = ClassName("col-12 pl-2 pr-2 mt-3 text-left align-self-center")
            +"Project type".t()

            selectorBuilder(
                vulnerabilityProject.type.value.t(),
                VulnerabilityProjectType.values().map { it.toString().t() },
                classes = "input-group form-control custom-select",
                isDisabled = props.type != null
            ) { event ->
                val entries = event.target.value
                setVulnerabilityProject { project ->
                    project.copy(
                        type = VulnerabilityProjectType.values().find {
                            it.value.t() == entries.t()
                        }!!
                    )
                }
            }
        }

        inputTextFormRequired {
            form = if (vulnerabilityProject.type == VulnerabilityProjectType.COMMIT) InputTypes.COMMIT_HASH else InputTypes.PROJECT_NAME
            conflictMessage = "${nameOrHash.t()} ${"must not be empty".t()}"
            textValue = vulnerabilityProject.name
            validInput = vulnerabilityProject.name.isNotBlank()
            classes = "col-12 pl-2 pr-2 mt-3 text-left"
            name = "${projectTypeName.t()} ${nameOrHash.t()}"
            onChangeFun = { event ->
                setVulnerabilityProject(vulnerabilityProject.copy(name = event.target.value))
                setConflictErrorMessage(null)
            }
        }

        inputTextFormRequired {
            form = InputTypes.GIT_URL
            textValue = vulnerabilityProject.url
            validInput = vulnerabilityProject.url.isValidUrl()
            classes = "col-12 pl-2 pr-2 mt-3 text-left"
            name = "${projectTypeName.t()} Url"
            onChangeFun = { event ->
                setVulnerabilityProject(vulnerabilityProject.copy(url = event.target.value))
                setConflictErrorMessage(null)
            }
        }

        if (vulnerabilityProject.type != VulnerabilityProjectType.COMMIT) {
            inputTextFormOptional {
                form = InputTypes.PROJECT_VERSION
                textValue = vulnerabilityProject.versions
                validInput = conflictErrorMessage.isNullOrEmpty()
                classes = "col-12 pl-2 pr-2 mt-3 text-left"
                name = "Versions".t()
                onChangeFun = { event ->
                    setVulnerabilityProject(vulnerabilityProject.copy(versions = event.target.value))
                }
            }
        }

        div {
            className = ClassName("d-sm-flex align-items-center justify-content-center mt-4")
            button {
                type = ButtonType.button
                className = ClassName("btn btn-outline-primary mr-3")
                onClick = {
                    if (vulnerabilityProject.name.isBlank() || !vulnerabilityProject.url.isValidUrl()) {
                        setConflictErrorMessage("Please input a valid $nameOrHash and URL".t())
                    } else {
                        props.fetchProjectCredentials(vulnerabilityProject)
                        setVulnerabilityProject(VulnerabilityProjectDto.empty)
                    }
                }
                +"Add".t()
            }
            button {
                type = ButtonType.button
                className = ClassName("btn btn-outline-primary")
                onClick = {
                    props.onClose?.invoke()
                    props.windowOpenness.closeWindow()
                }
                +"Cancel".t()
            }
        }

        conflictErrorMessage?.let {
            div {
                className = ClassName("invalid-feedback d-block text-center")
                +it
            }
        }
    }
}

/**
 * VulnerabilityProjectWindow component props
 */
external interface VulnerabilityProjectWindowProps : Props {
    /**
     * Window openness
     */
    var windowOpenness: WindowOpenness

    /**
     * Request to fetch project credentials
     */
    var fetchProjectCredentials: (VulnerabilityProjectDto) -> Unit

    /**
     * Preselected vulnerability type
     */
    var type: VulnerabilityProjectType?

    /**
     * Callback that should be invoked on modal window close
     */
    var onClose: (() -> Unit)?
}
