@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.fossgraph

import com.saveourtool.save.entities.vulnerability.VulnerabilityDateDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDateType
import com.saveourtool.save.frontend.components.inputform.*
import com.saveourtool.save.frontend.components.inputform.inputTextDisabled
import com.saveourtool.save.frontend.components.modal.modal
import com.saveourtool.save.frontend.utils.*

import react.FC
import react.Props
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.span
import react.useState
import web.cssom.ClassName

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

/**
 * Component that allows to add new project in vulnerability
 */
val vulnerabilityDateModal: FC<VulnerabilityDateModalProps> = FC { props ->
    val (vulnerabilityDate, setVulnerabilityDate) = useState(VulnerabilityDateDto.empty)

    val addDate = useDeferredRequest {
        post(
            url = "$apiUrl/vulnerabilities/save-date",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityDate.copy(vulnerabilityName = props.vulnerabilityName)),
            loadingHandler = ::loadingHandler,
        ).run {
            if (ok) {
                props.onSuccess()
                props.windowOpenness.closeWindow()
            }
        }
    }

    modal { modalProps ->
        modalProps.isOpen = props.windowOpenness.isOpen()

        inputTextDisabled(
            InputTypes.CVE_NAME,
            "mt-3",
            "Vulnerability name",
            props.vulnerabilityName,
            true,
        )

        div {
            className = ClassName("mt-3")
            label {
                className = ClassName("form-label")
                +"Date type"
                span {
                    className = ClassName("text-danger text-left")
                    +"*"
                }
            }

            selectorBuilder(
                vulnerabilityDate.type.value,
                VulnerabilityDateType.values().map { it.value },
                classes = "form-control custom-select",
            ) { event ->
                setVulnerabilityDate { date ->
                    val type = requireNotNull(
                        event.target.value.let { typeName ->
                            VulnerabilityDateType.values().find { it.value == typeName }
                        }
                    )
                    date.copy(type = type)
                }
            }
        }

        inputDateFormRequired(
            InputTypes.CVE_DATE,
            true,
            "mt-3",
            "Date",
        ) { event ->
            setVulnerabilityDate { date ->
                date.copy(date = event.target.value.dateStringToLocalDateTime())
            }
        }

        div {
            className = ClassName("d-sm-flex align-items-center justify-content-around mt-4")
            buttonBuilder("Add") {
                addDate()
            }
            buttonBuilder("Cancel", style = "secondary") {
                setVulnerabilityDate(VulnerabilityDateDto.empty)
                props.windowOpenness.closeWindow()
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityDateModal] component
 */
external interface VulnerabilityDateModalProps : Props {
    /**
     * Window openness
     */
    var windowOpenness: WindowOpenness

    /**
     * Callback invoked on successful date save
     */
    var onSuccess: () -> Unit

    /**
     * Name of vulnerability that the date should be linked to
     */
    var vulnerabilityName: String
}
