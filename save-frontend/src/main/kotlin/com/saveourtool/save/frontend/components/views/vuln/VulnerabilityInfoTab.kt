@file:Suppress("FILE_NAME_INCORRECT", "FILE_NAME_MATCH_CLASS")

package com.saveourtool.save.frontend.components.views.vuln

import com.saveourtool.save.entities.vulnerability.VulnerabilityDateDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectType
import com.saveourtool.save.frontend.components.basic.carousel
import com.saveourtool.save.frontend.components.basic.timelineComponent
import com.saveourtool.save.frontend.components.modal.displayModal
import com.saveourtool.save.frontend.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.components.tables.TableProps
import com.saveourtool.save.frontend.components.tables.columns
import com.saveourtool.save.frontend.components.tables.tableComponent
import com.saveourtool.save.frontend.components.tables.value
import com.saveourtool.save.frontend.externals.fontawesome.*
import com.saveourtool.save.frontend.utils.*
import com.saveourtool.save.info.UserInfo

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h4
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.td
import react.router.dom.Link
import web.cssom.*

import kotlinx.browser.window
import kotlinx.datetime.LocalDateTime
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

val vulnerabilityInfoTab: FC<VulnerabilityInfoTabProps> = FC { props ->
    val projectWindowOpenness = useWindowOpenness()
    val dateWindowOpenness = useWindowOpenness()
    val deleteVulnerabilityWindowOpenness = useWindowOpenness()

    val (deleteProject, setDeleteProject) = useState<VulnerabilityProjectDto?>(null)

    val isAbleToEdit = props.currentUserInfo.isSuperAdmin() || props.currentUserInfo in props.vulnerability.getAllParticipants()

    val (vulnerabilityProjects, setVulnerabilityProjects) = useState<List<VulnerabilityProjectDto>>(emptyList())

    val enrollRequest = useDeferredRequest {
        val response = post(
            url = "$apiUrl/vulnerabilities/save-projects",
            headers = jsonHeaders,
            body = Json.encodeToString(vulnerabilityProjects),
            loadingHandler = ::loadingHandler,
        )
        if (response.ok) {
            props.fetchVulnerability()
        }
    }

    val fetchProject: (VulnerabilityProjectDto) -> Unit = { project ->
        setVulnerabilityProjects {
            it.plus(project.copy(vulnerabilityName = props.vulnerability.name))
        }
        enrollRequest()
        projectWindowOpenness.closeWindow()
    }

    val enrollDeleteProjectRequest = useDeferredRequest {
        deleteProject?.let { project ->
            val response = delete(
                url = "$apiUrl/vulnerabilities/delete-project?projectName=${project.name}&vulnerabilityName=${props.vulnerability.name}",
                headers = jsonHeaders,
                loadingHandler = ::loadingHandler,
            )
            if (response.ok) {
                props.fetchVulnerability()
            }
        }
    }

    val (dateToDelete, setDateToDelete) = useState<VulnerabilityDateDto?>(null)
    useRequest(arrayOf(dateToDelete)) {
        dateToDelete?.let { dateDto ->
            val response = post(
                url = "$apiUrl/vulnerabilities/delete-date",
                headers = jsonHeaders,
                body = Json.encodeToString(dateDto),
                loadingHandler = ::loadingHandler,
            )
            if (response.ok) {
                props.fetchVulnerability()
            }
        }
    }

    vulnerabilityProjectWindow {
        windowOpenness = projectWindowOpenness
        fetchProjectCredentials = fetchProject
    }
    vulnerabilityDateModal {
        windowOpenness = dateWindowOpenness
        vulnerabilityName = props.vulnerability.name
        onSuccess = props.fetchVulnerability
    }

    @Suppress(
        "TYPE_ALIAS",
        "MAGIC_NUMBER",
    )
    val projectTable: FC<TableProps<VulnerabilityProjectDto>> = tableComponent(
        columns = {
            columns {
                column(id = "name", header = "Name", { name }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            Link {
                                to = cellContext.row.original.url
                                +cellContext.value
                            }
                        }
                    }
                }
                column(id = "versions", header = "Versions", { versions }) { cellContext ->
                    Fragment.create {
                        td {
                            className = ClassName("align-middle")
                            +cellContext.value
                        }
                    }
                }
                props.currentUserInfo?.let { userInfo ->
                    if (userInfo.isSuperAdmin() || userInfo.id == props.vulnerability.userInfo.id) {
                        column("delete", "") { cellProps ->
                            Fragment.create {
                                td {
                                    className = ClassName("align-middle")
                                    div {
                                        className = ClassName("d-flex justify-content-end")
                                        buttonBuilder(faTrashAlt, style = "") {
                                            setDeleteProject(value = cellProps.row.original)
                                            deleteVulnerabilityWindowOpenness.openWindow()
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        initialPageSize = 10,
        useServerPaging = false,
        isTransparentGrid = true,
    )

    displayModal(
        deleteVulnerabilityWindowOpenness.isOpen(),
        "Deletion of project",
        "Are you sure you want to remove this project?",
        mediumTransparentModalStyle,
        deleteVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok") {
            enrollDeleteProjectRequest()
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close", "secondary") {
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
    }

    val (isTableView, setIsTableView) = useState(false)

    div {
        className = ClassName("d-flex justify-content-end my-2")
        if (isAbleToEdit) {
            buttonBuilder(faPlus, classes = "mr-2 btn-sm", isOutline = true, title = "Add more info") {
                projectWindowOpenness.openWindow()
            }
        }
        val icon = if (isTableView) faImage else faTable
        val label = if (isTableView) "card" else "table"
        buttonBuilder(icon, "secondary", classes = "btn-sm", isOutline = true, title = "Change to $label mode") {
            setIsTableView { !it }
        }
    }

    if (props.vulnerability.dates.isNotEmpty()) {
        timelineComponent {
            dates = props.vulnerability.getDatesWithLabels()
            onAddClick = { dateWindowOpenness.openWindow() }
                .takeIf { isAbleToEdit }
            onNodeClick = { date: LocalDateTime, type: String ->
                props.vulnerability.dates
                    .find { it.type.value == type && it.date == date }
                    ?.let {
                        if (window.confirm("Are you sure you want to delete a date?")) {
                            setDateToDelete(it)
                        }
                    }
                    ?: Unit
            }
                .takeIf { isAbleToEdit }
        }
    } else {
        renderPlaceholder(isAbleToEdit, "No dates mentioned") { dateWindowOpenness.openWindow() }
    }

    renderProjects(
        "Affected libraries",
        VulnerabilityProjectType.LIBRARY,
        props.vulnerability.projects.toSet(),
        projectTable,
        isTableView,
        isAbleToEdit,
    ) {
        projectWindowOpenness.openWindow()
    }

    renderProjects(
        "Commits with fix",
        VulnerabilityProjectType.COMMIT,
        props.vulnerability.projects.toSet(),
        projectTable,
        isTableView,
        isAbleToEdit,
    ) {
        projectWindowOpenness.openWindow()
    }

    renderProjects(
        "Affected open source projects",
        VulnerabilityProjectType.PROJECT,
        props.vulnerability.projects.toSet(),
        projectTable,
        isTableView,
        isAbleToEdit,
    ) {
        projectWindowOpenness.openWindow()
    }
}

/**
 * [Props] of vulnerability info tab component
 */
external interface VulnerabilityInfoTabProps : Props {
    /**
     * Vulnerability dto of vulnerability
     */
    var vulnerability: VulnerabilityDto

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?

    /**
     * Callback to update vulnerability
     */
    var fetchVulnerability: () -> Unit
}

@Suppress("TYPE_ALIAS", "TOO_MANY_PARAMETERS", "LongParameterList")
private fun ChildrenBuilder.renderProjects(
    sectionName: String,
    projectType: VulnerabilityProjectType,
    projects: Set<VulnerabilityProjectDto>,
    table: FC<TableProps<VulnerabilityProjectDto>>,
    isTableView: Boolean,
    isAbleToEdit: Boolean,
    openProjectWindowFor: (VulnerabilityProjectType) -> Unit,
) {
    div {
        className = ClassName("mt-4")
        div {
            className = ClassName("mb-3 text-xs text-center font-weight-bold text-primary text-uppercase")
            +sectionName
        }
        val data = projects.filter { it.type == projectType }
        if (data.isNotEmpty()) {
            if (isTableView) {
                div {
                    className = ClassName("mt-0 p-0")
                    table {
                        getData = { _, _ -> data.toTypedArray() }
                        cardBodyClassName = "p-0 card"
                    }
                }
            } else {
                carousel(
                    data,
                    "${projectType.value}-carousel",
                    outerClasses = "border border-secondary",
                ) {
                    renderProjectCard(it)
                }
            }
        } else {
            renderPlaceholder(isAbleToEdit) { openProjectWindowFor(projectType) }
        }
    }
}

private fun ChildrenBuilder.renderProjectCard(project: VulnerabilityProjectDto) {
    div {
        className = ClassName("card card-body")
        h4 {
            className = ClassName("text-center text-primary")
            Link {
                className = ClassName("mb-2")
                to = project.url
                +project.name
            }
        }
        span {
            className = ClassName("text-sm text-center mt-2 mb-3")
            if (project.versions.isBlank()) {
                +"No version information"
            } else {
                renderVersions(project.versions.split(", "))
            }
        }
    }
}

private fun ChildrenBuilder.renderVersions(versions: List<String>) {
    versions.run {
        first() to last().takeIf { size > 2 }
    }.let { (firstVersion, lastVersion) ->
        span {
            +firstVersion
        }
        +" ... "
        span {
            +lastVersion
        }
    }
}

private fun ChildrenBuilder.renderPlaceholder(
    isAbleToEdit: Boolean,
    noInformationLabel: String = "No information",
    onClickFun: () -> Unit,
) {
    if (isAbleToEdit) {
        div {
            className = ClassName("d-flex justify-content-center")
            onClick = { onClickFun() }
            style = jso {
                cursor = "pointer".unsafeCast<Cursor>()
                borderStyle = "dashed".unsafeCast<BorderStyle>()
                borderWidth = "thin".unsafeCast<BorderWidth>()
            }
            fontAwesomeIcon(faPlus, "m-5", "lg")
        }
    } else {
        renderTablePlaceholder(borderStyleString = "dashed") { +noInformationLabel }
    }
}
