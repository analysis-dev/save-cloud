package com.saveourtool.save.entities.vulnerability

import com.saveourtool.save.entities.OrganizationDto
import com.saveourtool.save.info.UserInfo
import kotlinx.datetime.LocalDateTime
import kotlinx.serialization.Serializable

/**
 * TODO: Migrate fully to CosvMetadata and VulnerabilityExt
 *
 * @property identifier name of vulnerability
 * @property progress vulnerability criticality percentage
 * @property projects links to projects with this vulnerability
 * @property description description of vulnerability
 * @property shortDescription
 * @property relatedLink
 * @property language
 * @property userInfo creator vulnerability
 * @property organization
 * @property dates
 * @property participants
 * @property status
 * @property creationDateTime [LocalDateTime] of creation
 * @property lastUpdatedDateTime [LocalDateTime] of last updating
 * @property tags
 * @property severity
 */
@Serializable
data class VulnerabilityDto(
    val identifier: String,
    val progress: Float,
    val projects: List<VulnerabilityProjectDto>,
    val description: String?,
    val shortDescription: String,
    val relatedLink: String?,
    val language: VulnerabilityLanguage,
    val userInfo: UserInfo,
    val organization: OrganizationDto?,
    val dates: List<VulnerabilityDateDto>,
    val participants: List<UserInfo>,
    val status: VulnerabilityStatus,
    val creationDateTime: LocalDateTime? = null,
    val lastUpdatedDateTime: LocalDateTime? = null,
    val tags: Set<String> = emptySet(),
    val severity: String = "",
) {
    /**
     * @return all [participants] and owner's [userInfo]
     */
    fun getAllParticipants() = participants.plus(userInfo)

    /**
     * Validation of [identifier]
     *
     * @return true if [identifier] is empty (our own should be set on backend)
     *   or starts with one of [vulnerabilityPrefixes] (reused existed identifier), false otherwise
     */
    fun validateIdentifier() = identifier.isEmpty() || vulnerabilityPrefixes.any { identifier.startsWith(it) }

    companion object {
        val empty = VulnerabilityDto(
            "",
            0f,
            emptyList(),
            "",
            "",
            null,
            VulnerabilityLanguage.OTHER,
            UserInfo(name = ""),
            null,
            emptyList(),
            emptyList(),
            VulnerabilityStatus.PENDING_REVIEW,
        )
        val vulnerabilityPrefixes = listOf(
            "CVE-",
        )
    }
}
