package com.saveourtool.save.entities.vulnerabilities

import com.saveourtool.save.entities.Organization
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityLanguage
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.spring.entity.BaseEntityWithDateAndDto

import com.fasterxml.jackson.annotation.JsonIgnore

import javax.persistence.*

import kotlinx.datetime.toKotlinLocalDateTime

/**
 * @property identifier vulnerability identifier
 * @property description description of vulnerability
 * @property progress vulnerability criticality percentage (1..100)
 * @property projects links to projects with this vulnerability
 * @property userId creator vulnerability
 * @property shortDescription short description of vulnerability
 * @property relatedLink
 * @property language
 * @property organization
 * @property status
 **/
@Entity
@Suppress("LongParameterList")
class Vulnerability(
    var identifier: String,

    var shortDescription: String,

    var description: String,

    var progress: Int,

    var relatedLink: String?,

    @Enumerated(EnumType.STRING)
    var language: VulnerabilityLanguage,

    @Enumerated(EnumType.STRING)
    var status: VulnerabilityStatus,

    @OneToMany(
        fetch = FetchType.EAGER,
        cascade = [CascadeType.ALL],
        mappedBy = "vulnerability",
        targetEntity = VulnerabilityProject::class,
    )
    @JsonIgnore
    var projects: List<VulnerabilityProject>,

    var userId: Long,

    @ManyToOne
    @JoinColumn(name = "organization_id")
    var organization: Organization?,
) : BaseEntityWithDateAndDto<VulnerabilityDto>() {
    /**
     * @return a vulnerability dto
     */
    override fun toDto() = VulnerabilityDto(
        identifier = identifier,
        progress = progress,
        projects = projects.map { it.toDto() },
        description = null,
        shortDescription = shortDescription,
        relatedLink = relatedLink,
        language = language,
        userInfo = UserInfo(name = ""),
        organization = organization?.toDto(),
        dates = emptyList(),
        participants = emptyList(),
        status = status,
        creationDateTime = createDate?.toKotlinLocalDateTime(),
        lastUpdatedDateTime = updateDate?.toKotlinLocalDateTime(),
    )

    /**
     * @return a vulnerability dto with description
     */
    fun toDtoWithDescription() = VulnerabilityDto(
        identifier = identifier,
        progress = progress,
        projects = projects.map { it.toDto() },
        description = description,
        shortDescription = shortDescription,
        relatedLink = relatedLink,
        language = language,
        userInfo = UserInfo(name = ""),
        organization = organization?.toDto(),
        dates = emptyList(),
        participants = emptyList(),
        status = status,
        creationDateTime = createDate?.toKotlinLocalDateTime(),
        lastUpdatedDateTime = updateDate?.toKotlinLocalDateTime(),
    )
}
