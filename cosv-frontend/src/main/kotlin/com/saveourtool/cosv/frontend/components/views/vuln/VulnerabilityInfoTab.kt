@file:Suppress(
    "FILE_NAME_INCORRECT",
    "FILE_NAME_MATCH_CLASS",
    "HEADER_MISSING_IN_NON_SINGLE_CLASS_FILE",
)

package com.saveourtool.cosv.frontend.components.views.vuln

import com.saveourtool.cosv.frontend.components.views.vuln.component.timelineComponent
import com.saveourtool.osv4k.Affected
import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.entities.vulnerability.VulnerabilityDateDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityDateType
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectType
import com.saveourtool.save.frontend.common.components.basic.carousel
import com.saveourtool.save.frontend.common.components.modal.displayModal
import com.saveourtool.save.frontend.common.components.modal.mediumTransparentModalStyle
import com.saveourtool.save.frontend.common.components.tables.TableProps
import com.saveourtool.save.frontend.common.components.tables.columns
import com.saveourtool.save.frontend.common.components.tables.tableComponent
import com.saveourtool.save.frontend.common.components.tables.value
import com.saveourtool.save.frontend.common.externals.fontawesome.faPlus
import com.saveourtool.save.frontend.common.externals.fontawesome.faTrashAlt
import com.saveourtool.save.frontend.common.externals.fontawesome.fontAwesomeIcon
import com.saveourtool.save.frontend.common.externals.i18next.TranslationFunction
import com.saveourtool.save.frontend.common.externals.i18next.useTranslation
import com.saveourtool.save.frontend.common.utils.*
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.utils.ELLIPSIS
import com.saveourtool.save.utils.asTimelineEntry
import com.saveourtool.save.utils.getTimeline
import com.saveourtool.save.utils.listToShortString

import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h4
import react.dom.html.ReactHTML.span
import react.dom.html.ReactHTML.td
import react.router.dom.Link
import web.cssom.*

import kotlinx.browser.window
import kotlinx.datetime.LocalDateTime
import kotlinx.serialization.json.JsonObject

val vulnerabilityInfoTab: FC<VulnerabilityInfoTabProps> = FC { props ->
    val (t, i18n) = useTranslation("vulnerability")
    val dateWindowOpenness = useWindowOpenness()
    val deleteVulnerabilityWindowOpenness = useWindowOpenness()

    val (deleteProject, setDeleteProject) = useState<CosvAffected?>(null)
    val (vulnerabilityProjects, setVulnerabilityProjects) = useStateFromProps(props.vulnerability.cosv.affected ?: emptyList())  // <List<VulnerabilityProjectDto>>(emptyList())

    val fetchProject: (Affected<JsonObject, JsonObject, JsonObject>) -> Unit = { project ->
        setVulnerabilityProjects {
            it.plus(project)
        }
        props.setVulnerability(
            props.vulnerability.copy(
                cosv = props.vulnerability.cosv.copy(
                    affected = vulnerabilityProjects.plus(project)
                )
            )
        )
        props.addProjectWindowOpenness.closeWindow()
    }

    @Suppress("MISSING_KDOC_ON_FUNCTION")
    fun deleteProject() {
        deleteProject?.let {
            props.setVulnerability(
                props.vulnerability.copy(
                    cosv = props.vulnerability.cosv.copy(
                        affected = props.vulnerability.cosv.affected?.minus(deleteProject)
                    )
                )
            )

            setVulnerabilityProjects {
                it.minus(deleteProject)
            }
        }
        props.enrollRequest()
    }

    val (requestedType, setRequestedType) = useState<VulnerabilityProjectType?>(null)

    useEffect(requestedType) {
        requestedType?.let { props.addProjectWindowOpenness.openWindow() }
    }

    vulnerabilityProjectWindow {
        windowOpenness = props.addProjectWindowOpenness
        fetchProjectCredentials = fetchProject
        type = requestedType
        onClose = { setRequestedType(null) }
    }

    vulnerabilityDateModal {
        windowOpenness = dateWindowOpenness
        identifier = props.vulnerability.cosv.id
        onSuccess = props.fetchVulnerability
        this.vulnerability = props.vulnerability
        this.setVulnerability = props.setVulnerability
    }

    @Suppress("TYPE_ALIAS", "MAGIC_NUMBER", "UnusedPrivateProperty")
    val projectTable: FC<AffectedProjectTableProps> = useMemo(i18n.language) {
        tableComponent(
            columns = {
                columns {
                    column(id = "name", header = "Name".t(), { `package`?.name ?: "Undefined" }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                cellContext.row.original.`package`?.repository.let { url ->
                                    if (url.isNullOrEmpty()) {
                                        +"${cellContext.row.original.`package`?.ecosystem ?: ""} (${cellContext.value})"
                                    } else {
                                        Link {
                                            to = url
                                            +"${cellContext.row.original.`package`?.ecosystem ?: ""} (${cellContext.value})"
                                        }
                                    }
                                }
                            }
                        }
                    }
                    column(id = "versions", header = "Versions".t(), { versions }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.value.listToShortString()
                            }
                        }
                    }
                    column(id = "purl", header = "Purl".t(), { `package`?.purl ?: "Undefined" }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.value
                            }
                        }
                    }
                    props.currentUserInfo?.let { userInfo ->
                        if (userInfo.isSuperAdmin() || userInfo.id == props.vulnerability.metadataDto.user.id) {
                            column("delete", "") { cellProps ->
                                Fragment.create {
                                    td {
                                        className = ClassName("align-middle")
                                        div {
                                            className = ClassName("d-flex justify-content-end")
                                            buttonBuilder(faTrashAlt, style = "") {
                                                setDeleteProject(value = cellProps.row.original)
                                                deleteVulnerabilityWindowOpenness.openWindow()
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            initialPageSize = 10,
            useServerPaging = false,
            isTransparentGrid = true,
        ) {
            arrayOf(it.projects)
        }
    }

    @Suppress("TYPE_ALIAS", "MAGIC_NUMBER", "UnusedPrivateProperty")
    val commitFixTable: FC<AffectedProjectTableProps> = useMemo(i18n.language) {
        tableComponent(
            columns = {
                columns {
                    column(id = "name", header = "Name".t(), { `package`?.name ?: "Undefined" }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                cellContext.row.original.`package`?.repository.let { url ->
                                    if (url.isNullOrEmpty()) {
                                        +"${cellContext.row.original.`package`?.ecosystem ?: ""} (${cellContext.value})"
                                    } else {
                                        Link {
                                            to = url
                                            +"${cellContext.row.original.`package`?.ecosystem ?: ""} (${cellContext.value})"
                                        }
                                    }
                                }
                            }
                        }
                    }
                    column(id = "versions", header = "Versions".t(), { ranges?.flatMap { it.events }?.map { it.fixed }?.filterNotNull() }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.value.listToShortString()
                            }
                        }
                    }
                    column(id = "purl", header = "Purl".t(), { `package`?.purl ?: "Undefined" }) { cellContext ->
                        Fragment.create {
                            td {
                                className = ClassName("align-middle")
                                +cellContext.value
                            }
                        }
                    }
                }
            },
            initialPageSize = 10,
            useServerPaging = false,
            isTransparentGrid = true,
        ) {
            arrayOf(it.projects)
        }
    }

    displayModal(
        deleteVulnerabilityWindowOpenness.isOpen(),
        "Delete project".t(),
        "Are you sure you want to remove this project?".t(),
        mediumTransparentModalStyle,
        deleteVulnerabilityWindowOpenness.closeWindowAction(),
    ) {
        buttonBuilder("Ok".t()) {
            deleteProject()
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
        buttonBuilder("Close".t(), "secondary") {
            deleteVulnerabilityWindowOpenness.closeWindow()
        }
    }

    // this timeline is always shown as we always have at least creation date
    timelineComponent {
        this.vulnerability = props.vulnerability

        dates = props.vulnerability.cosv
            .getTimeline()
            .plus(
                VulnerabilityDateDto(
                    props.vulnerability.metadataDto.vulnerabilityMetadataDto.submitted,
                    VulnerabilityDateType.SUBMITTED_COSV,
                    props.vulnerability.cosv.id,
                )
            )

        onAddClick = { dateWindowOpenness.openWindow() }
            .takeIf { !props.isEditDisabled }

        onNodeClick = { date: LocalDateTime, type: String ->
            props.vulnerability.cosv.getTimeline()
                .find { it.type.value == type && it.date == date }
                ?.let { dateToDelete ->
                    if (window.confirm("Are you sure you want to delete a date?".t())) {
                        when (dateToDelete.type) {
                            VulnerabilityDateType.DISCLOSED, VulnerabilityDateType.FIXED, VulnerabilityDateType.FOUND, VulnerabilityDateType.INTRODUCED -> {
                                // FixMe: unify it with [[addThisDateToCosvTimeline]]

                                val newTimeline = this.vulnerability.cosv.timeline?.let {
                                    it - dateToDelete.asTimelineEntry()
                                }
                                props.setVulnerability(
                                    this.vulnerability.copy(
                                        cosv = this.vulnerability.cosv.copy(
                                            timeline = newTimeline
                                        )
                                    )
                                )
                            }

                            VulnerabilityDateType.WITHDRAWN -> props.setVulnerability(
                                props.vulnerability.copy(
                                    cosv = props.vulnerability.cosv.copy(
                                        withdrawn = null
                                    )
                                )
                            )

                            VulnerabilityDateType.PUBLISHED -> props.setVulnerability(
                                props.vulnerability.copy(
                                    cosv = props.vulnerability.cosv.copy(
                                        published = null
                                    )
                                )
                            )

                            else -> {

                            }
                        }
                    }
                }
                ?: Unit
        }
            .takeIf { !props.isEditDisabled }
    }

    @Suppress("COMPLEX_EXPRESSION")
    renderProjects(
        "Affected projects".t(),
        "affectedCarousel",
        VulnerabilityProjectType.PROJECT,
        vulnerabilityProjects,
        projectTable,
        props.isTableView,
        !props.isEditDisabled,
        t,
    ) {
        setRequestedType(it)
    }

    @Suppress("COMPLEX_EXPRESSION")
    renderProjects(
        "Commits with fix".t(),
        "commitsCarousel",
        VulnerabilityProjectType.COMMIT,
        vulnerabilityProjects,
        commitFixTable,
        props.isTableView,
        !props.isEditDisabled,
        t,
    ) {
        setRequestedType(it)
    }
}

typealias CosvTableProps = TableProps<Affected<JsonObject, JsonObject, JsonObject>>
typealias CosvAffected = Affected<JsonObject, JsonObject, JsonObject>

/**
 * [Props] of vulnerability table
 */
external interface AffectedProjectTableProps : CosvTableProps {
    /**
     * Vulnerability projects
     */
    var projects: List<CosvAffected>
}

/**
 * [Props] of vulnerability info tab component
 */
external interface VulnerabilityInfoTabProps : Props {
    /**
     * Vulnerability dto of vulnerability: with cosv and metadata
     */
    var vulnerability: VulnerabilityExt

    /**
     * Vulnerability setter
     */
    var setVulnerability: StateSetter<VulnerabilityExt?>

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?

    /**
     * Callback to update vulnerability
     */
    var fetchVulnerability: () -> Unit

    /**
     * view selection: table or carousel
     */
    var isTableView: Boolean

    /**
     * set state for the window where you can add project/commit/library
     */
    var addProjectWindowOpenness: WindowOpenness

    /**
     * If the edit button was not yet pressed
     */
    var isEditDisabled: Boolean

    /**
     * Callback to update vulnerability
     */
    var enrollRequest: () -> Unit
}

@Suppress(
    "TYPE_ALIAS",
    "TOO_MANY_PARAMETERS",
    "LongParameterList",
    "IDENTIFIER_LENGTH"
)
private fun ChildrenBuilder.renderProjects(
    sectionName: String,
    carouselBodyId: String,
    projectType: VulnerabilityProjectType,
    projects: List<CosvAffected>,
    table: FC<AffectedProjectTableProps>,
    isTableView: Boolean,
    isAbleToEdit: Boolean,
    t: TranslationFunction,
    openProjectWindowFor: (VulnerabilityProjectType) -> Unit,
) {
    div {
        className = ClassName("mt-4")
        div {
            className = ClassName("mb-3 text-xs text-center font-weight-bold text-primary-blue text-uppercase")
            +sectionName
        }
        if (projects.isNotEmpty() && !isAbleToEdit) {
            if (isTableView) {
                div {
                    className = ClassName("mt-0 p-0")
                    table {
                        getData = { _, _ -> projects.toTypedArray() }
                        this.projects = projects
                        cardBodyClassName = "p-0 card"
                    }
                }
            } else {
                carousel(
                    projects.toList(),
                    carouselBodyId,
                    outerClasses = "border border-secondary",
                ) {
                    renderProjectCard(it, projectType, t)
                }
            }
        } else {
            renderPlaceholder(isAbleToEdit, "No information".t()) { openProjectWindowFor(projectType) }
        }
    }
}

@Suppress("IDENTIFIER_LENGTH")
private fun ChildrenBuilder.renderProjectCard(
    project: CosvAffected,
    projectType: VulnerabilityProjectType,
    t: TranslationFunction
) {
    div {
        className = ClassName("card card-body")
        h4 {
            className = ClassName("text-center text-primary-blue mb-2")
            project.`package`?.repository.let { repositoryUrl ->
                if (repositoryUrl.isNullOrEmpty()) {
                    +"${project.`package`?.ecosystem} (${project.`package`?.name})"
                } else {
                    Link {
                        to = repositoryUrl
                        +"${project.`package`?.ecosystem} (${project.`package`?.name})"
                    }
                }
            }
        }
        span {
            className = ClassName("text-sm text-center mt-2 mb-3")
            val versionsCosv = when (projectType) {
                VulnerabilityProjectType.COMMIT -> project.ranges?.flatMap { it.events }?.map { it.fixed }
                else -> project.versions ?: project.ranges?.flatMap { it.events }?.map { it.introduced }
            }
            versionsCosv?.let {
                renderVersions(it)
            } ?: +"No version information".t()
        }
    }
}

private fun ChildrenBuilder.renderVersions(versions: List<String?>) {
    versions.filterNotNull().run {
        if (size <= 2) {
            forEach { span { +it } }
        } else {
            span { +first() }
            +" $ELLIPSIS "
            span { +last() }
        }
    }
}

private fun ChildrenBuilder.renderPlaceholder(
    isAbleToEdit: Boolean,
    noInformationLabel: String,
    onClickFun: () -> Unit,
) {
    if (isAbleToEdit) {
        div {
            className = ClassName("d-flex justify-content-center vulnerability-placeholder")
            onClick = { onClickFun() }
            style = borderEditStyle(pointerCursor = true)
            fontAwesomeIcon(faPlus, "m-5", "lg")
        }
    } else {
        renderTablePlaceholder(borderStyleString = "dashed") { +noInformationLabel }
    }
}
