@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.cosv.frontend.components.views.vuln

import com.saveourtool.frontend.common.components.basic.commentWindow
import com.saveourtool.frontend.common.components.basic.newCommentWindow
import com.saveourtool.frontend.common.externals.i18next.useTranslation
import com.saveourtool.frontend.common.utils.*
import com.saveourtool.save.entities.CommentDto
import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.info.UserInfo

import js.core.jso
import react.FC
import react.Props
import react.StateSetter
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h4
import react.useState
import web.cssom.ClassName
import web.cssom.Cursor

import kotlinx.browser.window
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json

private const val DEFAULT_MAX_COMMENT_AMOUNT = 5

val vulnerabilityCommentTab: FC<VulnerabilityCommentTabProps> = FC { props ->
    val (t) = useTranslation("comments")
    val (comments, setComments) = useState(emptyList<CommentDto>())
    val (isAllCommentsShown, setIsAllCommentsShown) = useState(false)

    val (commentForDeletion, setCommentForDeletion) = useState<CommentDto?>(null)
    val getComments = useDeferredRequest {
        val newComments = get(
            url = "$apiUrl/comments/get-all",
            headers = jsonHeaders,
            params = jso<dynamic> {
                section = window.location.pathname
            },
            loadingHandler = ::noopLoadingHandler,
        ).unsafeMap {
            it.decodeFromJsonString<List<CommentDto>>()
        }

        setComments(newComments)
    }

    useRequest(arrayOf(commentForDeletion)) {
        commentForDeletion?.let { comment ->
            post(
                url = "$apiUrl/comments/delete",
                headers = jsonHeaders,
                body = Json.encodeToString(comment),
                loadingHandler = ::loadingHandler,
            ).run {
                if (ok) {
                    getComments()
                    setCommentForDeletion(null)
                    props.setCountComments(props.countComments - 1)
                }
            }
        }
    }

    val display: List<CommentDto>.() -> Unit = {
        forEach { message ->
            div {
                className = ClassName("col-12 mt-3 px-0")
                commentWindow {
                    comment = message
                    currentUserInfo = props.currentUserInfo
                    this.setCommentForDeletion = { setCommentForDeletion(it) }
                }
            }
        }
    }

    useOnce { getComments() }

    if (comments.size > DEFAULT_MAX_COMMENT_AMOUNT && !isAllCommentsShown) {
        comments.take(DEFAULT_MAX_COMMENT_AMOUNT / 2).display()
        div {
            className = ClassName("col-12 mt-3 px-0")
            onClick = { setIsAllCommentsShown(true) }
            style = jso { cursor = "pointer".unsafeCast<Cursor>() }
            h4 {
                className = ClassName("text-center card p-2 shadow")
                +"Show all ${comments.size} comments"
            }
        }
        comments.takeLast(DEFAULT_MAX_COMMENT_AMOUNT / 2).display()
    } else {
        comments.display()
    }

    props.currentUserInfo?.let { userInfo ->
        div {
            className = ClassName("col-12 mt-3 px-0")
            newCommentWindow {
                addComment = {
                    getComments()
                    props.setCountComments(props.countComments + 1)
                }
                currentUserInfo = userInfo
            }
        }
    } ?: div {
        className = ClassName("col-12 mt-3 px-0")
        h4 {
            className = ClassName("text-center card p-2 shadow")
            +"Authorize in order to write comments".t()
        }
    }
}

/**
 * [Props] of vulnerability comment tab component
 */
external interface VulnerabilityCommentTabProps : Props {
    /**
     * Vulnerability dto of vulnerability
     */
    var vulnerability: VulnerabilityExt

    /**
     * Information about current user
     */
    var currentUserInfo: UserInfo?

    /**
     * Count comments
     */
    var countComments: Int

    /**
     * Comment count setter
     */
    var setCountComments: StateSetter<Int>
}
