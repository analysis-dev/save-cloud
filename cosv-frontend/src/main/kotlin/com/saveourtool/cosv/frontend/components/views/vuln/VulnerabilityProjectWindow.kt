@file:Suppress("FILE_NAME_MATCH_CLASS")

package com.saveourtool.cosv.frontend.components.views.vuln

import com.saveourtool.osv4k.*
import com.saveourtool.save.entities.vulnerability.VulnerabilityLanguage
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectType
import com.saveourtool.save.frontend.common.components.inputform.InputTypes
import com.saveourtool.save.frontend.common.components.inputform.inputTextFormOptional
import com.saveourtool.save.frontend.common.components.inputform.inputTextFormRequired
import com.saveourtool.save.frontend.common.components.modal.modal
import com.saveourtool.save.frontend.common.externals.i18next.useTranslation
import com.saveourtool.save.frontend.common.utils.*
import com.saveourtool.save.frontend.common.utils.WindowOpenness
import com.saveourtool.save.frontend.common.utils.selectorBuilder
import com.saveourtool.save.utils.PRETTY_DELIMITER
import com.saveourtool.save.validation.isValidUrl

import react.FC
import react.Props
import react.dom.html.ReactHTML.button
import react.dom.html.ReactHTML.div
import react.useEffect
import react.useState
import web.cssom.ClassName
import web.html.ButtonType

import kotlinx.serialization.json.JsonObject

/**
 * Component that allows to add new project in vulnerability
 */
val vulnerabilityProjectWindow: FC<VulnerabilityProjectWindowProps> = FC { props ->

    val emptyRange: Range<JsonObject> = Range(
        type = RangeType.ECOSYSTEM,
        null,
        listOf(
            Event(
                introduced = "0"
            )
        ),
        null,
    )

    val emptyAffected: Affected<JsonObject, JsonObject, JsonObject> = Affected(
        `package` = Package("", ""),
        severity = null,
        ranges = emptyList(),
        versions = emptyList(),
        null,
        null,
        null,
    )
    val (conflictErrorMessage, setConflictErrorMessage) = useState<String?>(null)
    val (vulnerabilityProject, setVulnerabilityProject) = useState(emptyAffected)
    val (range, setRange) = useState(emptyRange)

    useEffect(props.windowOpenness.isOpen()) {
        if (props.windowOpenness.isOpen()) {
            setVulnerabilityProject(emptyAffected)
        }
    }

    val (t) = useTranslation("vulnerability")

    modal { modalProps ->
        modalProps.isOpen = props.windowOpenness.isOpen()
        val packageOrNull = vulnerabilityProject.`package`

        div {
            className = ClassName("row")

            inputTextFormRequired {
                val ecosystemOrNull = vulnerabilityProject.`package`?.ecosystem
                form = InputTypes.PROJECT_NAME
                conflictMessage = "Name must not be empty".t()
                textValue = ecosystemOrNull.orEmpty()
                validInput = !ecosystemOrNull.isNullOrBlank()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Ecosystem"
                onChangeFun = { event ->
                    val newPackage = packageOrNull?.copy(ecosystem = event.target.value)
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                    setConflictErrorMessage(null)
                }
            }

            inputTextFormRequired {
                val nameOrNull = packageOrNull?.name
                form = InputTypes.PROJECT_NAME
                conflictMessage = "Name must not be empty".t()
                textValue = nameOrNull.orEmpty()
                validInput = !nameOrNull.isNullOrBlank()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Project Name".t()
                onChangeFun = { event ->
                    val newPackage = packageOrNull?.copy(name = event.target.value)
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                    setConflictErrorMessage(null)
                }
            }

            inputTextFormRequired {
                val repositoryOrNull = packageOrNull?.repository
                form = InputTypes.GIT_URL
                textValue = repositoryOrNull.orEmpty()
                validInput = repositoryOrNull.isValidUrl()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Project URL".t()
                onChangeFun = { event ->
                    val newPackage = packageOrNull?.copy(repository = event.target.value)
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                    setConflictErrorMessage(null)
                }
            }

            inputTextFormOptional {
                form = InputTypes.PURL
                textValue = packageOrNull?.purl.orEmpty()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Purl"
                onChangeFun = { event ->
                    val newPackage = packageOrNull?.copy(purl = event.target.value)
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                }
            }

            div {
                className = ClassName("col-6 pl-2 pr-2 mt-3 text-left")
                +"Language".t()

                selectorBuilder(
                    packageOrNull?.language.orEmpty(),
                    VulnerabilityLanguage.values().map { it.toString() },
                    classes = "input-group form-control custom-select",
                ) { event ->
                    val newPackage = packageOrNull?.copy(language = event.target.value)
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                }
            }

            div {
                className = ClassName("col-6 pl-2 pr-2 mt-3 text-left")
                +"Type version"

                selectorBuilder(
                    range.type.name,
                    RangeType.values().map { it.toString() },
                    classes = "input-group form-control custom-select",
                ) { event ->
                    val entries = event.target.value
                    val typeSelect = requireNotNull(RangeType.valueOf(entries))
                    val newRange = range.copy(type = typeSelect)
                    setRange(newRange)
                    setVulnerabilityProject(vulnerabilityProject.copy(ranges = listOf(newRange)))
                }
            }

            inputTextFormOptional {
                form = InputTypes.VERSION
                textValue = range.events.first().introduced
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Introduces version"
                onChangeFun = { event ->
                    val newRange = range.copy(events = listOf(range.events.first().copy(introduced = event.target.value)))
                    setRange(newRange)
                    setVulnerabilityProject(vulnerabilityProject.copy(ranges = listOf(newRange)))
                }
            }

            inputTextFormOptional {
                form = InputTypes.GIT_URL
                textValue = packageOrNull?.introducedCommits?.first().orEmpty()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Introduces URL commits"
                onChangeFun = { event ->
                    val newPackage = packageOrNull?.copy(introducedCommits = listOf(event.target.value))
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                }
            }

            inputTextFormOptional {
                form = InputTypes.VERSION
                textValue = range.events.first()
                    .fixed
                    .orEmpty()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "The first version with the fix"
                onChangeFun = { event ->
                    val newRange = range.copy(events = listOf(range.events.first().copy(fixed = event.target.value)))
                    setRange(newRange)
                    setVulnerabilityProject(vulnerabilityProject.copy(ranges = listOf(newRange)))
                }
            }

            inputTextFormOptional {
                form = InputTypes.GIT_URL
                textValue = packageOrNull?.fixedCommits?.first().orEmpty()
                classes = "col-6 pl-2 pr-2 mt-3 text-left"
                name = "Commits URL with the fix"
                onChangeFun = { event ->
                    val newPackage = packageOrNull?.copy(fixedCommits = listOf(event.target.value))
                    setVulnerabilityProject(vulnerabilityProject.copy(`package` = newPackage))
                }
            }
        }

        inputTextFormOptional {
            form = InputTypes.PROJECT_VERSION
            textValue = vulnerabilityProject.versions?.joinToString(PRETTY_DELIMITER).orEmpty()
            classes = "mt-3 text-left"
            name = "Affected versions".t()
            onChangeFun = { event ->
                setVulnerabilityProject(vulnerabilityProject.copy(versions = event.target.value.split(PRETTY_DELIMITER)))
            }
        }

        div {
            className = ClassName("d-sm-flex align-items-center justify-content-center mt-4")
            button {
                type = ButtonType.button
                className = ClassName("btn btn-outline-primary mr-3")
                onClick = {
                    if (packageOrNull?.name.isNullOrBlank() || !packageOrNull?.repository.isValidUrl()) {
                        setConflictErrorMessage("Please input a valid name and URL".t())
                    } else {
                        props.fetchProjectCredentials(vulnerabilityProject)
                        setVulnerabilityProject(emptyAffected)
                    }
                }
                +"Add".t()
            }
            button {
                type = ButtonType.button
                className = ClassName("btn btn-outline-primary")
                onClick = {
                    props.onClose?.invoke()
                    props.windowOpenness.closeWindow()
                }
                +"Cancel".t()
            }
        }

        conflictErrorMessage?.let {
            div {
                className = ClassName("invalid-feedback d-block text-center")
                +it
            }
        }
    }
}

/**
 * VulnerabilityProjectWindow component props
 */
external interface VulnerabilityProjectWindowProps : Props {
    /**
     * Window openness
     */
    var windowOpenness: WindowOpenness

    /**
     * Request to fetch project credentials
     */
    var fetchProjectCredentials: (Affected<JsonObject, JsonObject, JsonObject>) -> Unit

    /**
     * Preselected vulnerability type
     */
    var type: VulnerabilityProjectType?

    /**
     * Callback that should be invoked on modal window close
     */
    var onClose: (() -> Unit)?
}
