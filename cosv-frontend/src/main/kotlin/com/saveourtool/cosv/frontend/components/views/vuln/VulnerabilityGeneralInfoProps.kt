package com.saveourtool.cosv.frontend.components.views.vuln

import com.saveourtool.osv4k.ConfirmType
import com.saveourtool.osv4k.Credit
import com.saveourtool.save.entities.cosv.VulnerabilityExt
import com.saveourtool.save.entities.cosv.VulnerabilityMetadataDto.Companion.SUMMARY_LENGTH
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.frontend.common.components.basic.renderAvatar
import com.saveourtool.save.frontend.common.components.basic.renderUserAvatarWithName
import com.saveourtool.save.frontend.common.components.basic.userBoard
import com.saveourtool.save.frontend.common.components.inputform.InputTypes
import com.saveourtool.save.frontend.common.components.inputform.inputTextFormRequired
import com.saveourtool.save.frontend.common.externals.fontawesome.*
import com.saveourtool.save.frontend.common.externals.i18next.useTranslation
import com.saveourtool.save.frontend.common.utils.*
import com.saveourtool.save.frontend.common.utils.buttonBuilder
import com.saveourtool.save.frontend.common.utils.isSuperAdmin
import com.saveourtool.save.frontend.common.utils.selectorBuilder
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.utils.NO_BREAK_SPACE
import com.saveourtool.save.utils.PRETTY_DELIMITER
import com.saveourtool.save.utils.getRelatedLink
import com.saveourtool.save.utils.shorten
import com.saveourtool.save.utils.toUnixCalendarFormat
import com.saveourtool.save.validation.isValidName

import js.core.jso
import react.*
import react.dom.html.ReactHTML.div
import react.dom.html.ReactHTML.h6
import react.dom.html.ReactHTML.hr
import react.dom.html.ReactHTML.label
import react.dom.html.ReactHTML.p
import react.dom.html.ReactHTML.pre
import react.dom.html.ReactHTML.textarea
import react.router.dom.Link
import web.cssom.ClassName
import web.cssom.TextDecoration.Companion.underline
import web.cssom.rem

import kotlinx.datetime.TimeZone

/**
 * [FC] that is used to display some general vulnerability information
 */
@Suppress("EMPTY_BLOCK_STRUCTURE_ERROR", "MAGIC_NUMBER")
val vulnerabilityGeneralInfoProps: FC<VulnerabilityGeneralInfoProps> = FC { props ->
    val (t) = useTranslation("vulnerability")
    val (cachedVulnerability, setCachedVulnerability) = useState<VulnerabilityExt>()

    with(props.vulnerability) {
        div {
            className = ClassName("card shadow mt-3 mb-4")

            div {
                className = ClassName("card-body")
                div {
                    className = ClassName("row mb-4")
                    div {
                        className = ClassName("col-6 align-self-center")
                        div {
                            className = ClassName("font-weight-bold text-primary-blue text-uppercase")
                            +cosv.id
                        }
                    }
                    if (props.isEditDisabled) {
                        // only Super Users or owners/participants of unapproved vulnerability can edit it
                        if (hasRightsToEdit(props.currentUserInfo, this@with)) {
                            buttonBuilder(
                                labelBuilder = {
                                    p {
                                        className = ClassName("mb-0")
                                        style = jso {
                                            textDecoration = underline
                                        }
                                        +("Edit".t() + NO_BREAK_SPACE)
                                        fontAwesomeIcon(icon = faEdit)
                                    }
                                },
                                isOutline = true, classes = "text-xs text-left ml-auto"
                            ) {
                                setCachedVulnerability(props.vulnerability.copy())
                                props.setIsEditDisabled(false)
                            }
                        }
                    } else {
                        buttonBuilder(faCheck, "link", isOutline = true, classes = "text-muted text-left ml-auto") {
                            props.enrollRequest()
                            props.setIsEditDisabled(true)
                        }
                        buttonBuilder(faTimesCircle, null, isOutline = true) {
                            props.setVulnerability(cachedVulnerability)
                            props.setIsEditDisabled(true)
                        }
                    }
                }
                // ================= summary ===================
                textarea {
                    className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                    value = cosv.summary ?: props.vulnerability.metadataDto.vulnerabilityMetadataDto.summary
                    disabled = props.isEditDisabled
                    rows = 2
                    if (!props.isEditDisabled) {
                        style = borderEditStyle()
                    }
                    onChange = { event ->
                        props.setVulnerability { vulnerability ->
                            vulnerability?.copy(
                                cosv = cosv.copy(summary = event.target.value.shorten(SUMMARY_LENGTH))
                            )
                        }
                    }
                }
                hr { }

                // ================= Last update time ===================

                div {
                    className = ClassName("d-flex justify-content-between align-items-center")
                    label {
                        className = ClassName("m-0")
                        +"Last update time:".t()
                    }
                    label {
                        className = ClassName("m-0")
                        buttonBuilder(
                            cosv.modified.toUnixCalendarFormat(TimeZone.UTC),
                            classes = "btn-sm"
                        ) {
                            props.setSelectedMenu(VulnerabilityTab.HISTORY)
                        }
                    }
                }
                hr { }

                // ================= Details ===================

                h6 {
                    className = ClassName("font-weight-bold text-primary-blue mb-4")
                    +"Details".t()
                }
                textarea {
                    className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                    value = cosv.details
                    disabled = props.isEditDisabled
                    rows = 8
                    if (!props.isEditDisabled) {
                        style = borderEditStyle()
                    }
                    onChange = { event ->
                        props.setVulnerability { vulnerability ->
                            vulnerability?.copy(
                                cosv = cosv.copy(details = event.target.value)
                            )
                        }
                    }
                }

                // ================= CWE IDS ===================

                if (cosv.cweIds?.isNotEmpty() == true) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"CWE IDs".t()
                    }

                    textarea {
                        className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                        value = cosv.cweIds!!.joinToString(PRETTY_DELIMITER)
                        disabled = props.isEditDisabled
                        rows = 3
                        if (!props.isEditDisabled) {
                            style = borderEditStyle()
                        }
                        onChange = { event ->
                            props.setVulnerability { vulnerability ->
                                vulnerability?.copy(
                                    cosv = cosv.copy(cweIds = event.target.value.split(PRETTY_DELIMITER))
                                )
                            }
                        }
                    }
                }

                // ================= CWE Names ===================

                if (cosv.cweNames?.isNotEmpty() == true) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"CWE Names".t()
                    }

                    textarea {
                        className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                        value = cosv.cweNames!!.joinToString("\n\n")
                        disabled = props.isEditDisabled
                        rows = 8
                        if (!props.isEditDisabled) {
                            style = borderEditStyle()
                        }
                        onChange = { event ->
                            props.setVulnerability { vulnerability ->
                                vulnerability?.copy(
                                    cosv = cosv.copy(cweNames = event.target.value.split("\n\n"))
                                )
                            }
                        }
                    }
                }

                // ================= Aliases ===================

                if (cosv.aliases?.isNotEmpty() == true) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Aliases".t()
                    }

                    textarea {
                        className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                        value = cosv.aliases!!.joinToString(PRETTY_DELIMITER)
                        disabled = props.isEditDisabled
                        rows = 3
                        if (!props.isEditDisabled) {
                            style = borderEditStyle()
                        }
                        onChange = { event ->
                            props.setVulnerability { vulnerability ->
                                @Suppress("COMPLEX_EXPRESSION")
                                vulnerability?.copy(
                                    cosv = cosv.copy(aliases = event.target.value.split(PRETTY_DELIMITER).distinct())
                                )
                            }
                        }
                    }
                }

                // ================= Related Vulnerabilities ===================

                if (cosv.related?.isNotEmpty() == true) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Related Vulnerabilities".t()
                    }

                    textarea {
                        className = ClassName("auto_height form-control-plaintext px-2 pt-0 pb-0 text-gray-900")
                        value = cosv.related!!.joinToString(PRETTY_DELIMITER)
                        disabled = props.isEditDisabled
                        rows = 3
                        if (!props.isEditDisabled) {
                            style = borderEditStyle()
                        }
                        onChange = { event ->
                            props.setVulnerability { vulnerability ->
                                vulnerability?.copy(
                                    cosv = cosv.copy(related = event.target.value.split(PRETTY_DELIMITER))
                                )
                            }
                        }
                    }
                }

                // ================= tags ===================

                if (!props.isEditDisabled || props.vulnerability.metadataDto.vulnerabilityMetadataDto.tags.isNotEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Tags".t()
                    }
                    div {
                        vulnerabilityTagsComponent {
                            this.currentUserInfo = props.currentUserInfo
                            this.vulnerability = props.vulnerability
                            this.isEditDisabled = props.isEditDisabled
                            this.setVulnerabilityExt = props.setVulnerability
                        }
                    }
                }

                // ================= relatedLink ===================

                if (!cosv.getRelatedLink().isNullOrEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"References".t()
                    }
                    Link {
                        to = cosv.getRelatedLink().toString()
                        +cosv.getRelatedLink()
                    }
                }

                // ================= Organization's SAVE owner ===================

                metadataDto.user.run {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-3")
                        +"COSV Submitter".t()
                    }
                    renderUserAvatarWithName(this@run, isHorizontal = true, classes = "mr-2") {
                        height = 4.rem
                        width = 4.rem
                    }
                }

                // ================= Organization ===================

                metadataDto.organization?.let { org ->
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-3")
                        +"Organization".t()
                    }
                    Link {
                        renderAvatar(org) {
                            height = 4.rem
                            width = 4.rem
                        }
                        to = "/${org.name}"
                        +" ${org.name}"
                    }
                }

                // ================= Contributors ===================

                if (saveContributors.isNotEmpty()) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Contributors".t()
                    }
                    userBoard {
                        users = saveContributors.distinctBy { it.name }
                        avatarOuterClasses = "col-2"
                    }
                }

                // ================= Credits ===================

                if (cosv.credits?.isNotEmpty() == true) {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Credits"
                    }
                    cosv.credits!!.mergeContactsForOneUser().forEachIndexed { creditInd, credit ->
                        val userPrefix = if (credit.name in saveContributors.map { it.name }) "[SAVE user]" else "[External user]"
                        if (props.isEditDisabled) {
                            div {
                                className = ClassName("row ml-1")
                                pre {
                                    +"$userPrefix\n${credit.name} ${credit.contact?.joinToString(PRETTY_DELIMITER)}"
                                }
                            }
                        } else {
                            div {
                                className = ClassName("row")
                                inputTextFormRequired {
                                    form = InputTypes.VULN_CREDIT_NAME
                                    textValue = credit.name
                                    classes = "col-6 pl-2 pr-2 mt-3 text-left"
                                    name = userPrefix
                                    validInput = credit.name.isNotBlank() && credit.name.isValidName()
                                    onChangeFun = { event ->
                                        val updatedCredit = credit.copy(name = event.target.value)
                                        val updatedCredits = cosv.credits as MutableList<Credit>
                                        updatedCredits[creditInd] = updatedCredit
                                        props.setVulnerability { vulnerability ->
                                            vulnerability?.copy(
                                                cosv = cosv.copy(credits = updatedCredits)
                                            )
                                        }
                                    }
                                }
                                credit.contact!!.forEachIndexed { contactInd, contact ->
                                    inputTextFormRequired {
                                        form = InputTypes.VULN_CREDIT_CONTACTS
                                        textValue = contact
                                        classes = "col-6 pl-2 pr-2 mt-3 text-left"
                                        name = ""
                                        validInput = contact.isNotBlank()
                                        onChangeFun = { event ->
                                            val updatedContacts = credit.contact as MutableList<String>
                                            updatedContacts[contactInd] = event.target.value

                                            props.setVulnerability { vulnerability ->
                                                vulnerability?.copy(
                                                    cosv = cosv.copy(credits = updateCredits(cosv.credits!!, updatedContacts, credit, creditInd))
                                                )
                                            }
                                        }
                                    }
                                }
                            }
                            div {
                                className = ClassName("row")
                                buttonBuilder(
                                    faPlus,
                                    style = "primary ml-2 mr-1 mt-1",
                                    title = "Add new contact",
                                    classes = "btn-sm",
                                    isOutline = true
                                ) {
                                    val updatedContacts = (credit.contact as MutableList<String>)
                                    updatedContacts.add("")

                                    props.setVulnerability { vulnerability ->
                                        vulnerability?.copy(
                                            cosv = cosv.copy(credits = updateCredits(cosv.credits!!, updatedContacts, credit, creditInd))
                                        )
                                    }
                                }
                                buttonBuilder(
                                    faTrash,
                                    "danger mr-1 mt-1",
                                    isOutline = true,
                                    title = "Delete contact",
                                    classes = "btn-sm"
                                ) {
                                    val updatedContacts = (credit.contact as MutableList<String>)
                                    if (updatedContacts.size >= 1) {
                                        updatedContacts.removeLast()
                                    }

                                    props.setVulnerability { vulnerability ->
                                        vulnerability?.copy(
                                            cosv = cosv.copy(credits = updateCredits(cosv.credits!!, updatedContacts, credit, creditInd))
                                        )
                                    }
                                }
                            }
                        }
                    }
                }

                // ================= Confirm type ===================

                cosv.confirmType?.let {
                    hr { }
                    h6 {
                        className = ClassName("font-weight-bold text-primary-blue mb-4")
                        +"Confirm type".t()
                    }
                    p {
                        if (!props.isEditDisabled && props.currentUserInfo?.isSuperAdmin() == true) {
                            selectorBuilder(
                                cosv.confirmType.toString(),
                                ConfirmType.values().map { it.toString() },
                                classes = "input-group form-control custom-select",
                            ) { event ->
                                props.setVulnerability { vulnerability ->
                                    vulnerability?.copy(
                                        cosv = cosv.copy(confirmType = ConfirmType.valueOf(event.target.value))
                                    )
                                }
                            }
                        } else {
                            +"${cosv.confirmType}"
                        }
                    }
                }
            }
        }
    }
}

/**
 * [Props] for [vulnerabilityGeneralInfoProps] component
 */
external interface VulnerabilityGeneralInfoProps : Props {
    /**
     * Displayed vulnerability
     */
    var vulnerability: VulnerabilityExt

    /**
     * Vulnerability setter
     */
    var setVulnerability: StateSetter<VulnerabilityExt?>

    /**
     * Callback to fetch updated vulnerability
     */
    var fetchVulnerability: () -> Unit

    /**
     * Currently logged-in user or null
     */
    var currentUserInfo: UserInfo?

    /**
     * If the edit button was not yet pressed
     */
    var isEditDisabled: Boolean

    /**
     * Setter for isEditDisabled
     */
    var setIsEditDisabled: StateSetter<Boolean>

    /**
     * Callback to update vulnerability
     */
    var enrollRequest: () -> Unit

    /**
     * Setter for selected menu
     */
    var setSelectedMenu: StateSetter<VulnerabilityTab>
}

private fun List<Credit>.mergeContactsForOneUser() = this
    .groupBy { it.name }.map { entry ->
        val name = entry.key
        val contacts = entry.value.mapNotNull { it.contact }.flatten()
        // suppose, that `credit type` is the same for credits with same name
        Credit(name, contacts, entry.value.first().type)
    }

/**
 * @param currentUserInfo
 * @param vulnerability
 * @return if user can press edit button
 */
private fun hasRightsToEdit(currentUserInfo: UserInfo?, vulnerability: VulnerabilityExt): Boolean =
        currentUserInfo?.isSuperAdmin() == true || ((currentUserInfo?.name == vulnerability.metadataDto.user.name ||
                currentUserInfo?.name in vulnerability.getAllParticipants().map { it.name }) &&
                vulnerability.metadataDto.vulnerabilityMetadataDto.status != VulnerabilityStatus.APPROVED)

private fun updateCredits(
    cosvCredits: List<Credit>,
    newContacts: List<String>,
    currentCredit: Credit,
    currentCreditInd: Int
): List<Credit> {
    val updatedCredit = currentCredit.copy(contact = newContacts)
    val updatedCredits = cosvCredits as MutableList<Credit>
    updatedCredits[currentCreditInd] = updatedCredit
    return updatedCredits
}
