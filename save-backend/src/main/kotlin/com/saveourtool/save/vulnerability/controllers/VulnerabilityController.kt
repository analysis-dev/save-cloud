package com.saveourtool.save.vulnerability.controllers

import com.saveourtool.save.entities.vulnerability.*
import com.saveourtool.save.utils.*
import com.saveourtool.save.v1
import com.saveourtool.save.vulnerability.service.VulnerabilityService
import org.springframework.http.ResponseEntity
import org.springframework.http.codec.multipart.FilePart
import org.springframework.security.core.Authentication
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestPart
import org.springframework.web.bind.annotation.RestController
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

typealias ListStringResponse = ResponseEntity<List<String>>

/**
 * Rest controller for vulnerabilities
 */
@RestController
@RequestMapping("/api/$v1/vulnerability")
class VulnerabilityController(
    private val vulnerabilityService: VulnerabilityService,
) {
    @PostMapping("/upload")
    fun upload(
        content: String,
        authentication: Authentication,
    ): Mono<ListStringResponse> = vulnerabilityService.decodeAndSave(content, authentication)
        .collectList()
        .map {
            ResponseEntity.ok(it)
        }

    @PostMapping("/batch-upload")
    fun batchUpload(
        @RequestPart(FILE_PART_NAME) filePartFlux: Flux<FilePart>,
        authentication: Authentication,
    ): Mono<ListStringResponse> = filePartFlux
        .flatMap { filePart ->
            log.debug {
                "Processing ${filePart.filename()}"
            }
            filePart.content()
                .map { it.asByteBuffer() }
                .collectToInputStream()
                .flatMapMany {
                    vulnerabilityService.decodeAndSave(it, authentication)
                }
        }
        .collectList()
        .map { ResponseEntity.ok(it) }

    companion object {
        @Suppress("GENERIC_VARIABLE_WRONG_DECLARATION")
        private val log = getLogger<VulnerabilityController>()
    }
}