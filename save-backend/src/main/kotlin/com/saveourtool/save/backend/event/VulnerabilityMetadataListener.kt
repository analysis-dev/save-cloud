package com.saveourtool.save.backend.event

import com.saveourtool.save.backend.service.NotificationService
import com.saveourtool.save.backend.service.UserDetailsService
import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.Notification
import com.saveourtool.save.entities.cosv.VulnerabilityMetadata
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import org.springframework.context.event.EventListener
import org.springframework.stereotype.Component

/**
 * A vulnerability metadata listener for sending notifications.
 */
@Component
class VulnerabilityMetadataListener(
    private val userDetailsService: UserDetailsService,
    private val notificationService: NotificationService,
) {
    /**
     * @param vulnerability new VulnerabilityMetadata
     */
    @EventListener
    fun createVulnerabilityMetadata(vulnerability: VulnerabilityMetadata) {
        if (vulnerability.status == VulnerabilityStatus.PENDING_REVIEW) {
            val recipients = userDetailsService.findByRole(Role.SUPER_ADMIN.asSpringSecurityRole())
            val notifications = recipients.map {
                Notification(
                    message = messageNewVulnerabilityMetadata(vulnerability),
                    user = it,
                )
            }
            notificationService.saveAll(notifications)
        }
    }

    companion object {
        /**
         * @param vulnerability
         * @return message
         */
        fun messageNewVulnerabilityMetadata(vulnerability: VulnerabilityMetadata) = """
            New vulnerability: ${vulnerability.identifier} is waiting for approve.
        """.trimIndent()
    }
}
