package com.saveourtool.save.backend.security

import com.saveourtool.save.backend.service.vulnerability.VulnerabilityService
import com.saveourtool.save.backend.utils.hasRole
import com.saveourtool.save.domain.Role

import com.saveourtool.save.permission.Permission
import com.saveourtool.save.utils.orNotFound
import org.springframework.security.core.Authentication
import org.springframework.stereotype.Component

/**
 * Class that is capable of assessing user permissions.
 */
@Component
class VulnerabilityPermissionEvaluator(
    private val vulnerabilityService: VulnerabilityService,
) {
    /**
     * Check permission for user to read, write and delete vulnerabilities by its [vulnerabilityIdentifier]
     *
     * @param authentication
     * @param vulnerabilityIdentifier
     * @param permission
     * @return true if user with [authentication] has [permission] for [vulnerabilityIdentifier]
     */
    fun hasPermission(
        authentication: Authentication?,
        vulnerabilityIdentifier: String,
        permission: Permission,
    ): Boolean {
        authentication ?: return permission == Permission.READ

        return when {
            authentication.hasRole(Role.SUPER_ADMIN) -> true
            permission == Permission.READ -> true
            else -> hasFullPermission(vulnerabilityIdentifier, authentication)
        }
    }

    /**
     * @param identifier vulnerability identifier
     * @param authentication
     * @return check permission
     */
    fun hasFullPermission(identifier: String, authentication: Authentication): Boolean {
        val vulnerability = vulnerabilityService.findByName(identifier).orNotFound { "Not found vulnerability $identifier" }
        val linkUsers = vulnerabilityService.getUsers(vulnerability.identifier).map { it.name }

        return vulnerability.userInfo.name == authentication.name || authentication.name in linkUsers
    }
}
