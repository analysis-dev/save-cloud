package com.saveourtool.save.backend.controllers.vulnerability.event

import com.saveourtool.save.backend.service.NotificationService
import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.Notification
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.entitiescosv.VulnerabilityMetadata
import com.saveourtool.save.entitiescosv.evententities.VulnerabilityMetadataEvent
import com.saveourtool.save.service.UserService

import org.springframework.context.event.EventListener
import org.springframework.stereotype.Component

/**
 * A vulnerability metadata listener for sending notifications.
 */
@Component
class VulnerabilityMetadataListener(
    private val userDetailsService: UserService,
    private val notificationService: NotificationService,
) {
    /**
     * @param vulnerabilityEvent new VulnerabilityMetadataEvent
     */
    @EventListener
    fun createVulnerabilityMetadata(vulnerabilityEvent: VulnerabilityMetadataEvent) {
        val newMessage = when (vulnerabilityEvent.vulnerabilityMetadata.status) {
            VulnerabilityStatus.CREATED -> messageNewVulnerabilityMetadata(vulnerabilityEvent.vulnerabilityMetadata)
            VulnerabilityStatus.AUTO_APPROVED -> messageNewVulnerabilityMetadataAutoApproved(vulnerabilityEvent.vulnerabilityMetadata)
            VulnerabilityStatus.PENDING_REVIEW -> messageUpdatedVulnerabilityMetadata(vulnerabilityEvent.vulnerabilityMetadata)
            else -> null
        }
        newMessage?.let { message ->
            val recipients = userDetailsService.findByRole(Role.SUPER_ADMIN.asSpringSecurityRole())
            val notifications = recipients.map { user ->
                Notification(
                    message = message,
                    user = user,
                )
            }
            notificationService.saveAll(notifications)
        }
    }

    companion object {
        /**
         * @param vulnerability
         * @return message
         */
        fun messageNewVulnerabilityMetadata(vulnerability: VulnerabilityMetadata) = """
            New vulnerability: ${vulnerability.identifier} is waiting for approve.
        """.trimIndent()

        /**
         * @param vulnerability
         * @return message
         */
        fun messageNewVulnerabilityMetadataAutoApproved(vulnerability: VulnerabilityMetadata) = """
            New uploaded vulnerability: ${vulnerability.identifier} has been auto approved.
        """.trimIndent()

        /**
         * @param vulnerability
         * @return message
         */
        fun messageUpdatedVulnerabilityMetadata(vulnerability: VulnerabilityMetadata) = """
            Vulnerability: ${vulnerability.identifier} has been updated and waiting for approve.
        """.trimIndent()
    }
}
