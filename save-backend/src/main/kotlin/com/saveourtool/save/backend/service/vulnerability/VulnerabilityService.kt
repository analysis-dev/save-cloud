package com.saveourtool.save.backend.service.vulnerability

import com.saveourtool.save.backend.repository.vulnerability.VulnerabilityDescriptionRepository
import com.saveourtool.save.backend.repository.vulnerability.VulnerabilityRepository
import com.saveourtool.save.entities.vulnerabilities.Vulnerability
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.filters.VulnerabilityFilter
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

/**
 * A service that provides `Vulnerability`
 */
@Service
@Transactional(readOnly = true)
class VulnerabilityService(
    private val vulnerabilityRepository: VulnerabilityRepository,
    private val vulnerabilityDescriptionRepository: VulnerabilityDescriptionRepository,
) {
    /**
     * @param name name of vulnerability
     * @return vulnerability by name
     */
    fun findByName(name: String) = vulnerabilityRepository.findByName(name)

    /**
     * @return all vulnerabilities
     */
    fun findAll(): List<Vulnerability> = vulnerabilityRepository.findAll()

    /**
     * @param filters filters for vulnerability
     * @return list of vulnerabilities with that match [filters]
     */
    fun getFiltered(filters: VulnerabilityFilter): List<Vulnerability> = if (filters.prefixName.isBlank()) {
        vulnerabilityRepository.findAll()
    } else {
        vulnerabilityRepository.findByNameStartingWith(filters.prefixName)
    }

    /**
     * @param name name of vulnerability
     * @return vulnerability dto by name with description
     */
    fun getVulnerabilityWithDescriptionByName(name: String): VulnerabilityDto {
        val description = vulnerabilityDescriptionRepository.findByVulnerabilityName(name)?.description.orEmpty()
        return vulnerabilityRepository.findByName(name)?.toDtoWithDescription(description) ?: VulnerabilityDto.empty
    }
}
