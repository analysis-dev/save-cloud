package com.saveourtool.save.backend.service.vulnerability

import com.saveourtool.save.backend.repository.vulnerability.VulnerabilityDescriptionRepository
import com.saveourtool.save.backend.repository.vulnerability.VulnerabilityProjectRepository
import com.saveourtool.save.backend.repository.vulnerability.VulnerabilityRepository
import com.saveourtool.save.entities.vulnerabilities.Vulnerability
import com.saveourtool.save.entities.vulnerabilities.VulnerabilityDescription
import com.saveourtool.save.entities.vulnerabilities.VulnerabilityProject
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityProjectDto
import com.saveourtool.save.filters.VulnerabilityFilter
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import java.time.LocalDateTime
import kotlin.random.Random

/**
 * A service that provides `Vulnerability`
 */
@Service
@Transactional(readOnly = true)
class VulnerabilityService(
    private val vulnerabilityRepository: VulnerabilityRepository,
    private val vulnerabilityDescriptionRepository: VulnerabilityDescriptionRepository,
    private val vulnerabilityProjectRepository: VulnerabilityProjectRepository,
) {
    /**
     * @param name name of vulnerability
     * @return vulnerability by name
     */
    fun findByName(name: String) = vulnerabilityRepository.findByName(name)

    /**
     * @return all vulnerabilities
     */
    fun findAll(): List<Vulnerability> = vulnerabilityRepository.findAll()

    /**
     * @param filters filters for vulnerability
     * @return list of vulnerabilities with that match [filters]
     */
    fun getFiltered(filters: VulnerabilityFilter): List<Vulnerability> = vulnerabilityRepository.findByNameStartingWithAndIsActive(filters.prefixName, filters.active)

    /**
     * @param name name of vulnerability
     * @return vulnerability dto by name with description
     */
    fun getVulnerabilityWithDescriptionByName(name: String): VulnerabilityDto {
        val description = vulnerabilityDescriptionRepository.findByVulnerabilityName(name)?.description.orEmpty()
        return vulnerabilityRepository.findByName(name)?.toDtoWithDescription(description) ?: VulnerabilityDto.empty
    }

    /**
     * @param vulnerabilityDto dto of new vulnerability
     */
    @Transactional
    fun save(vulnerabilityDto: VulnerabilityDto) {
        val vulnerability = Vulnerability(
            name = "default-${Random.nextInt()}",
            progress = 0,
            projects = emptyList(),
            isActive = false,
        )
        val vulnerabilityNew = vulnerabilityRepository.saveAndFlush(vulnerability)
        val newName = "SOTV-${LocalDateTime.now().year}-${vulnerabilityNew.id}"

        val vulnerabilityWithName = vulnerabilityRepository.save(
            vulnerabilityNew.apply {
                name = newName
                projects = vulnerabilityDto.projects.map { dto ->
                    VulnerabilityProject(
                        name = dto.name,
                        url = dto.url,
                        isOpenSource = dto.isOpenSource,
                        vulnerability = vulnerabilityNew,
                    )
                }
            }
        )

        val description = VulnerabilityDescription(
            vulnerability = vulnerabilityWithName,
            description = vulnerabilityDto.description.orEmpty(),
        )
        vulnerabilityDescriptionRepository.save(description)
    }

    /**
     * @param vulnerabilityDto
     */
    @Transactional
    fun update(vulnerabilityDto: VulnerabilityDto) {
        val vulnerability = vulnerabilityRepository.findByName(vulnerabilityDto.name)
        val vulnerabilityUpdate = vulnerability?.apply {
            progress = vulnerabilityDto.progress
            isActive = vulnerabilityDto.isActive
            updateDate = LocalDateTime.now()
        }
        vulnerabilityUpdate?.let {
            vulnerabilityRepository.save(it)
        }
    }

    /**
     * @param vulnerabilityDtos dto list of vulnerability projects
     */
    @Transactional
    fun saveAllProjects(vulnerabilityDtos: List<VulnerabilityProjectDto>) {
        vulnerabilityRepository.findByName(vulnerabilityDtos.first().vulnerabilityName)?.let { vulnerability ->
            vulnerabilityProjectRepository.saveAll(
                vulnerabilityDtos.map { dto ->
                    VulnerabilityProject(
                        name = dto.name,
                        url = dto.url,
                        isOpenSource = dto.isOpenSource,
                        vulnerability = vulnerability,
                    )
                }
            )
        }
    }
}
