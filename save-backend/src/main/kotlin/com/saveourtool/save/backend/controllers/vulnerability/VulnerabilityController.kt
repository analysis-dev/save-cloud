package com.saveourtool.save.backend.controllers.vulnerability

import com.saveourtool.save.backend.service.vulnerability.VulnerabilityService
import com.saveourtool.save.configs.ApiSwaggerSupport
import com.saveourtool.save.entities.vulnerabilities.Vulnerability
import com.saveourtool.save.entities.vulnerability.VulnerabilityDto
import com.saveourtool.save.filters.VulnerabilityFilter
import com.saveourtool.save.utils.blockingToMono
import com.saveourtool.save.v1
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.tags.Tag
import io.swagger.v3.oas.annotations.tags.Tags
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import reactor.core.publisher.Mono

typealias VulnerabilityDtoList = List<VulnerabilityDto>

/**
 * Controller for working with vulnerabilities.
 */
@ApiSwaggerSupport
@Tags(
    Tag(name = "vulnerabilities"),
)
@RestController
@RequestMapping(path = ["/api/$v1/vulnerabilities"])
class VulnerabilityController(
    private val vulnerabilityService: VulnerabilityService,
) {
    @PostMapping("/by-filters")
    @PreAuthorize("permitAll()")
    @Operation(
        method = "POST",
        summary = "Get all vulnerabilities with filters.",
        description = "Get filtered vulnerabilities.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched all vulnerabilities by filters")
    fun getAllVulnerabilities(
        @RequestBody filters: VulnerabilityFilter,
    ): Mono<VulnerabilityDtoList> = blockingToMono {
        vulnerabilityService.getFiltered(filters).map(
            Vulnerability::toDto
        )
    }
}
