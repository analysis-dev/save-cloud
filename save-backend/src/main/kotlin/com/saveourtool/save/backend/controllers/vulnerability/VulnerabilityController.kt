package com.saveourtool.save.backend.controllers.vulnerability

import com.saveourtool.save.backend.security.VulnerabilityPermissionEvaluator
import com.saveourtool.save.backend.service.TagService
import com.saveourtool.save.backend.service.vulnerability.VulnerabilityService
import com.saveourtool.save.backend.utils.hasRole
import com.saveourtool.save.configs.ApiSwaggerSupport
import com.saveourtool.save.configs.RequiresAuthorizationSourceHeader
import com.saveourtool.save.cosv.service.CosvService
import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.cosv.VulnerabilityMetadataDto
import com.saveourtool.save.entities.vulnerability.*
import com.saveourtool.save.filters.VulnerabilityFilter
import com.saveourtool.save.info.UserInfo
import com.saveourtool.save.permission.Permission
import com.saveourtool.save.utils.*
import com.saveourtool.save.v1
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.tags.Tag
import io.swagger.v3.oas.annotations.tags.Tags
import org.springframework.http.HttpHeaders
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.security.core.Authentication
import org.springframework.web.bind.annotation.*
import org.springframework.web.server.ResponseStatusException
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono
import reactor.kotlin.core.publisher.toMono

typealias VulnerabilityMetadataDtoList = List<VulnerabilityMetadataDto>

/**
 * Controller for working with vulnerabilities.
 */
@ApiSwaggerSupport
@Tags(
    Tag(name = "vulnerabilities"),
)
@RestController
@RequestMapping(path = ["/api/$v1/vulnerabilities"])
class VulnerabilityController(
    private val vulnerabilityService: VulnerabilityService,
    private val vulnerabilityPermissionEvaluator: VulnerabilityPermissionEvaluator,
    private val tagService: TagService,
    private val cosvService: CosvService,
) {
    @PostMapping("/by-filter")
    @Operation(
        method = "POST",
        summary = "Get all vulnerabilities with filters.",
        description = "Get filtered vulnerabilities.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched all vulnerabilities by filters")
    fun getAllVulnerabilities(
        @RequestBody filter: VulnerabilityFilter,
        authentication: Authentication?,
    ): Mono<VulnerabilityMetadataDtoList> = blockingToMono {
        if (
            // if user is not authenticated, he will have authentication = null and will not get other's submitted vulnerabilities
            filter.status != VulnerabilityStatus.APPROVED && authentication?.name != filter.authorName &&
                    // only if user is NOT admin, if admin - everything is fine
                    authentication?.hasRole(Role.SUPER_ADMIN) == false
        ) {
            throw ResponseStatusException(HttpStatus.FORBIDDEN)
        }
        vulnerabilityService.getFilteredWithUserInfos(filter, authentication)
    }

    @GetMapping("/by-identifier")
    @Operation(
        method = "GET",
        summary = "Get vulnerability by identifier.",
        description = "Get vulnerability by identifier.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched vulnerability by identifier")
    fun getVulnerabilityByIdentifierAndActive(
        @RequestParam identifier: String,
    ): Mono<VulnerabilityDto> = blockingToMono { vulnerabilityService.findByName(identifier) }
        .switchIfEmptyToNotFound()

    @GetMapping("/by-identifier-with-description")
    @Operation(
        method = "GET",
        summary = "Get vulnerability by identifier with description.",
        description = "Get vulnerability by identifier with description.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched vulnerability by identifier with description")
    fun getVulnerabilityWithDescriptionByIdentifier(
        @RequestParam identifier: String,
    ): Mono<VulnerabilityDto> = vulnerabilityService.getVulnerabilityWithDescriptionByIdentifier(identifier)
        .switchIfEmptyToNotFound { "Could not find vulnerability with identifier $identifier" }

    @GetMapping("/by-user")
    @Operation(
        method = "GET",
        summary = "Get list of vulnerabilities by user id.",
        description = "Get list of vulnerabilities by user id.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched list of vulnerabilities by user id")
    fun getVulnerabilityByUser(
        @RequestParam userName: String,
    ): Flux<VulnerabilityDto> = blockingToFlux {
        vulnerabilityService.findByUserNameAndStatus(userName)
    }

    @GetMapping("/count-by-user")
    @Operation(
        method = "GET",
        summary = "Get cont of vulnerabilities by user name.",
        description = "Get cont of vulnerabilities by user name.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched cont of vulnerabilities by user name")
    fun getCountVulnerabilityByUser(
        @RequestParam userName: String,
    ): Mono<Int> = blockingToMono {
        vulnerabilityService.countByUserNameAndStatus(userName, VulnerabilityStatus.APPROVED)
    }

    @GetMapping("/by-organization-and-status")
    @Operation(
        method = "GET",
        summary = "Get list of vulnerabilities by organization name.",
        description = "Get list of vulnerabilities by organization name.",
    )
    @ApiResponse(
        responseCode = "200",
        description = "Successfully fetched list of vulnerabilities by organization name"
    )
    fun getVulnerabilityByOrganization(
        @RequestParam organizationName: String,
        @RequestParam status: VulnerabilityStatus,
    ): Flux<VulnerabilityDto> = blockingToFlux {
        vulnerabilityService.findByOrganizationNameAndStatus(organizationName, status)
    }.switchIfEmptyToNotFound()

    @GetMapping("/user-in-vulnerability")
    @Operation(
        method = "GET",
        summary = "Get list of user by vulnerability identifier.",
        description = "Get list of user by vulnerability identifier.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully fetched list of user by vulnerability identifier")
    fun getUserInVulnerabilityByVulnerabilityId(
        @RequestParam identifier: String,
    ): Flux<UserInfo> = blockingToFlux {
        vulnerabilityService.findUsersByVulnerabilityId(identifier)
    }.switchIfEmptyToNotFound()

    @GetMapping("/download")
    @Operation(
        method = "GET",
        summary = "Download vulnerability in COSV.",
        description = "Download vulnerability in COSV.",
    )
    @ApiResponse(responseCode = "200", description = "Content of vulnerability in COSV format")
    @PreAuthorize("permitAll()")
    fun download(
        @RequestParam identifier: String,
        authentication: Authentication,
    ): Mono<ByteBufferFluxResponse> = identifier.toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.READ)
        }
        .map {
            ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .header(HttpHeaders.CONTENT_DISPOSITION, "inline; filename=\"$it.json\"")
                .body(cosvService.getVulnerabilityAsCosvStream(it))
        }

    @PostMapping("/save")
    @Operation(
        method = "POST",
        summary = "Save vulnerability.",
        description = "Save vulnerability.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully saved vulnerability")
    @PreAuthorize("permitAll()")
    fun save(
        @RequestBody vulnerabilityDto: VulnerabilityDto,
        @RequestParam(required = false, defaultValue = "false") isGenerateIdentifier: Boolean,
        authentication: Authentication,
    ): Mono<StringResponse> = vulnerabilityDto.toMono()
        .filter { isGenerateIdentifier && vulnerabilityDto.identifier.isEmpty() || vulnerabilityDto.identifier.isNotEmpty() }
        .switchIfEmptyToResponseException(HttpStatus.CONFLICT) {
            "Identifier is not provided: either set identifier auto-generation and provide no identifier or provide an identifier."
        }
        .filter { it.validateIdentifier() }
        .switchIfEmptyToResponseException(HttpStatus.CONFLICT) {
            "Vulnerability Identifier should either be empty or start with one of prefixes: ${VulnerabilityDto.vulnerabilityPrefixes}"
        }
        .flatMap {
            vulnerabilityService.save(vulnerabilityDto, authentication)
        }
        .map { ResponseEntity.ok("Vulnerability was successfully saved") }

    @PostMapping("/update")
    @Operation(
        method = "POST",
        summary = "Update vulnerability.",
        description = "Update vulnerability.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully updated vulnerability")
    @RequiresAuthorizationSourceHeader
    fun update(
        @RequestBody vulnerabilityDto: VulnerabilityDto,
        authentication: Authentication,
    ): Mono<StringResponse> = vulnerabilityService.update(vulnerabilityDto, authentication).map {
        ResponseEntity.ok("Vulnerability was successfully updated")
    }

    @PostMapping("/approve")
    @Operation(
        method = "POST",
        summary = "Approve vulnerability.",
        description = "Approve vulnerability.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully approve vulnerability")
    @RequiresAuthorizationSourceHeader
    @PreAuthorize("hasRole('ROLE_SUPER_ADMIN')")
    fun approve(
        @RequestParam identifier: String,
    ): Mono<StringResponse> = blockingToMono {
        vulnerabilityService.approve(identifier)
    }.map {
        ResponseEntity.ok("Vulnerability was successfully approve")
    }

    @PostMapping("/reject")
    @Operation(
        method = "POST",
        summary = "Reject vulnerability.",
        description = "Reject vulnerability.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully rejected vulnerability")
    @RequiresAuthorizationSourceHeader
    @PreAuthorize("hasRole('ROLE_SUPER_ADMIN')")
    fun reject(
        @RequestParam identifier: String,
    ): Mono<StringResponse> = blockingToMono {
        vulnerabilityService.reject(identifier)
    }.map {
        ResponseEntity.ok("Vulnerability was successfully rejected")
    }

    @DeleteMapping("/delete")
    @Operation(
        method = "Delete",
        summary = "Deleted vulnerability.",
        description = "Deleted vulnerability by its identifier.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully deleted vulnerability")
    @RequiresAuthorizationSourceHeader
    @PreAuthorize("hasRole('ROLE_SUPER_ADMIN')")
    fun delete(
        @RequestParam identifier: String,
    ): Mono<StringResponse> = blockingToMono { vulnerabilityService.delete(identifier) }
        .flatMapMany { vulnerabilityService.deleteAllVersions(identifier) }
        .thenJust(
            ResponseEntity.ok("Vulnerability $identifier was successfully deleted")
        )

    @PostMapping("/to-review")
    @Operation(
        method = "POST",
        summary = "Mark vulnerability as ready for review.",
        description = "Mark vulnerability as ready for review.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully sent vulnerability for review")
    @RequiresAuthorizationSourceHeader
    fun toReview(
        @RequestParam identifier: String,
        authentication: Authentication,
    ): Mono<StringResponse> = blockingToMono {
        vulnerabilityService.sendToReview(identifier, authentication)
    }.map {
        ResponseEntity.ok("Vulnerability was successfully sent for review")
    }

    @PostMapping("/save-projects")
    @Operation(
        method = "POST",
        summary = "Save new projects.",
        description = "Save new projects.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully saved new projects in vulnerability")
    fun saveAllProjects(
        @RequestBody vulnerabilityDtos: List<VulnerabilityProjectDto>,
        authentication: Authentication,
    ): Mono<StringResponse> = vulnerabilityDtos.first()
        .vulnerabilityIdentifier
        .toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE)
        }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Permissions required for comment deletion were not granted." }
        .flatMap { blockingToMono { vulnerabilityService.saveAllProjects(vulnerabilityDtos) } }
        .map {
            ResponseEntity.ok("Projects were successfully saved in vulnerability")
        }

    @PostMapping("/save-date")
    @Operation(
        method = "POST",
        summary = "Save new date.",
        description = "Save new date.",
    )
    @PreAuthorize("permitAll()")
    @ApiResponse(responseCode = "200", description = "Successfully saved new date in vulnerability")
    @ApiResponse(responseCode = "404", description = "Could not either find user or find vulnerability")
    @ApiResponse(responseCode = "409", description = "Could not save date as it is already present in vulnerability")
    fun saveDate(
        @RequestBody vulnerabilityDateDto: VulnerabilityDateDto,
        authentication: Authentication,
    ): Mono<StringResponse> = vulnerabilityDateDto.vulnerabilityIdentifier.toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE)
        }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Permissions required for comment deletion were not granted." }
        .flatMap { vulnerabilityService.saveDate(vulnerabilityDateDto) }
        .switchIfErrorToConflict {
            "Date with type ${vulnerabilityDateDto.type} is already present in ${vulnerabilityDateDto.vulnerabilityIdentifier} vulnerability"
        }
        .map { ResponseEntity.ok("Date was successfully saved in vulnerability") }

    @PostMapping("/delete-date")
    @Operation(
        method = "POST",
        summary = "Delete date.",
        description = "Delete date.",
    )
    @PreAuthorize("permitAll()")
    @ApiResponse(responseCode = "200", description = "Successfully deleted date from vulnerability")
    @ApiResponse(responseCode = "404", description = "Requested date is not found")
    @Suppress("UnusedParameter")
    fun deleteDate(
        @RequestBody vulnerabilityDateDto: VulnerabilityDateDto,
        authentication: Authentication,
    ): Mono<StringResponse> = vulnerabilityDateDto.vulnerabilityIdentifier.toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE)
        }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Permissions required for comment deletion were not granted." }
        .flatMap { vulnerabilityService.deleteDate(vulnerabilityDateDto) }
        .map { ResponseEntity.ok("Date was successfully deleted from vulnerability") }

    @DeleteMapping("/delete-project")
    @Operation(
        method = "Delete",
        summary = "Delete project.",
        description = "Delete project.",
    )
    @ApiResponse(responseCode = "200", description = "Successfully deleted project from vulnerability")
    fun deleteProject(
        @RequestParam projectName: String,
        @RequestParam identifier: String,
        authentication: Authentication,
    ): Mono<StringResponse> = identifier.toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE)
        }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Permissions required for comment deletion were not granted." }
        .flatMap { blockingToMono { vulnerabilityService.deleteProject(projectName, it) } }
        .map {
            ResponseEntity.ok("Project $projectName was successfully deleted from vulnerability $identifier")
        }

    @PostMapping("/save-user")
    @Operation(
        method = "POST",
        summary = "Save new date.",
        description = "Save new date.",
    )
    @PreAuthorize("permitAll()")
    @ApiResponse(responseCode = "200", description = "Successfully saved new user in vulnerability")
    @ApiResponse(responseCode = "404", description = "Could not either find user or find vulnerability")
    @ApiResponse(responseCode = "409", description = "Could not save user as it is already present in vulnerability")
    fun saveUser(
        @RequestBody userName: String,
        @RequestBody identifier: String,
        authentication: Authentication,
    ): Mono<StringResponse> = identifier.toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE)
        }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Permissions required for comment deletion were not granted." }
        .flatMap { vulnerabilityService.saveUser(userName, it) }
        .switchIfErrorToConflict {
            "User with name $userName is already present in $identifier vulnerability"
        }
        .map { ResponseEntity.ok("User was successfully saved in vulnerability") }

    @DeleteMapping("/delete-user")
    @Operation(
        method = "DELETE",
        summary = "Delete user.",
        description = "Delete user.",
    )
    @PreAuthorize("permitAll()")
    @ApiResponse(responseCode = "200", description = "Successfully deleted user from vulnerability")
    @ApiResponse(responseCode = "404", description = "Requested user is not found")
    fun deleteUser(
        @RequestBody userName: String,
        @RequestBody identifier: String,
        authentication: Authentication,
    ): Mono<StringResponse> = identifier.toMono()
        .filter {
            vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE)
        }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Permissions required for comment deletion were not granted." }
        .flatMap { blockingToMono { vulnerabilityService.deleteUser(userName, it) } }
        .switchIfEmptyToNotFound { "Could not find user." }
        .map { StringResponse.ok("Successfully deleted user from vulnerability.") }

    @PostMapping("/save-tag")
    @Operation(
        method = "POST",
        summary = "Save a new tag.",
        description = "Save a new tag.",
    )
    @PreAuthorize("permitAll()")
    @ApiResponse(responseCode = "200", description = "Successfully added a new tag to vulnerability")
    @ApiResponse(responseCode = "403", description = "Not enough permissions for managing vulnerability")
    @ApiResponse(responseCode = "404", description = "Requested vulnerability is not found")
    fun saveTag(
        @RequestParam identifier: String,
        @RequestParam tagName: String,
        authentication: Authentication
    ): Mono<StringResponse> = identifier.toMono()
        .filter { vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.WRITE) }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Not enough permission for managing $identifier." }
        .flatMap { blockingToMono { tagService.addVulnerabilityTag(it, tagName) } }
        .onErrorMap { error ->
            when {
                error !is ResponseStatusException -> throw ResponseStatusException(
                    HttpStatus.CONFLICT,
                    "Tag $tagName is already linked with $identifier vulnerability",
                )

                else -> throw error
            }
        }
        .map { StringResponse.ok("Successfully added tag $tagName to vulnerability $identifier.") }

    @DeleteMapping("/delete-tag")
    @Operation(
        method = "DELETE",
        summary = "Delete a tag.",
        description = "Delete a tag.",
    )
    @PreAuthorize("permitAll()")
    @ApiResponse(responseCode = "200", description = "Successfully deleted a tag in vulnerability")
    @ApiResponse(responseCode = "403", description = "Not enough permissions for managing vulnerability")
    @ApiResponse(responseCode = "404", description = "Requested vulnerability is not found")
    fun deleteTag(
        @RequestParam identifier: String,
        @RequestParam tagName: String,
        authentication: Authentication
    ): Mono<StringResponse> = identifier.toMono()
        .filter { vulnerabilityPermissionEvaluator.hasPermission(authentication, it, Permission.DELETE) }
        .switchIfEmptyToResponseException(HttpStatus.FORBIDDEN) { "Not enough permission for managing $identifier." }
        .flatMap { blockingToMono { tagService.deleteVulnerabilityTag(it, tagName) } }
        .map { StringResponse.ok("Successfully deleted tag $tagName in vulnerability $identifier.") }
}
