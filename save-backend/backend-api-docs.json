{
  "openapi": "3.0.1",
  "info": {
    "title": "SAVE Backend API",
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:5800",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/api/v1/awesome-benchmarks": {
      "get": {
        "operationId": "getAllAwesomeBenchmarks",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AwesomeBenchmarks"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "awesome-benchmarks-controller"
        ]
      }
    },
    "/api/v1/contests/active": {
      "get": {
        "description": "Get list of contests that are in progress now.",
        "operationId": "getContestsInProgress",
        "parameters": [
          {
            "description": "amount of contests that should be returned, default: 10",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Successfully fetched list of active contests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get list of contests that are in progress now.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/by-organization": {
      "get": {
        "description": "Get contests connected with given organization.",
        "operationId": "getOrganizationContests",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "query",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "amount of records that will be returned",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Successfully fetched public tests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Either contest with such name was not found or tests are not provided."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get contests connected with given organization.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/create": {
      "post": {
        "description": "Create a new contest.",
        "operationId": "createContest",
        "parameters": [
          {
            "description": "contest requested for creation",
            "in": "query",
            "name": "contestDto",
            "required": true
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Contest was successfully created."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User cannot create contests with given organization."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Organization with given name was not found."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Contest with given name is already present."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Create a new contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/featured/add-or-delete": {
      "post": {
        "description": "Mark contest to be featured if it is not marked so yet or unmark otherwise.",
        "operationId": "addOrDeleteContestToFeatured",
        "parameters": [
          {
            "in": "query",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "contest requested for creation",
            "in": "query",
            "name": "contestDto",
            "required": true
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Contest was successfully created."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Contest with given name is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Create or delete featured contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/featured/list-active": {
      "get": {
        "description": "Get list of contests marked by admins as featured.",
        "operationId": "getFeaturedContests",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Contests were successfully fetched."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get featured contests.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/finished": {
      "get": {
        "description": "Get list of contests that has already finished.",
        "operationId": "getFinishedContests",
        "parameters": [
          {
            "description": "amount of contests that should be returned, default: 10",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Successfully fetched list of finished contests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get list of contests that has already finished.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/newest": {
      "get": {
        "description": "Get list of [pageSize] newest contests.",
        "operationId": "getSeveralNewestContests",
        "parameters": [
          {
            "description": "amount of records that will be returned",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Successfully fetched newest contests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get newest contests.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/update": {
      "post": {
        "description": "Change existing contest settings.",
        "operationId": "updateContest",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "query",
            "name": "contestRequest",
            "required": true
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully fetched public tests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission to edit current contest."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Either organization or contest with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/update-all": {
      "post": {
        "description": "Change existing contest settings.",
        "operationId": "updateAllContest",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "query",
            "name": "contestRequest",
            "required": true
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContestDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully fetched public tests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission to edit current contest."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Either organization or contest with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}": {
      "get": {
        "description": "Get contest by name.",
        "operationId": "getContestByName",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContestDto"
                }
              }
            },
            "description": "Successfully fetched contest by it\u0027s name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContestDto"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContestDto"
                }
              }
            },
            "description": "Contest with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get contest by name.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/eligible-projects": {
      "get": {
        "description": "Get list of user\u0027s projects that can participate in a given contest.",
        "operationId": "getAvailableProjectsForContest",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Successfully fetched projects available for contest."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get projects that can participate in contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/enroll": {
      "get": {
        "description": "Register your public project for a contest.",
        "operationId": "enrollForContest",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "query",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of an organization",
            "in": "query",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully enrolled for a contest."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permissions to enroll for a contest with given project."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Either given project or given contest was not found."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Only public projects can participate in contests."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Register for a contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/executions/{organizationName}/{projectName}": {
      "get": {
        "description": "Get list of execution of a project with given name in contest with given name.",
        "operationId": "getContestExecutionsForProject",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionDto"
                  }
                }
              }
            },
            "description": "Successfully fetched latest project execution in contest."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionDto"
                  }
                }
              }
            },
            "description": "Either contest is not found or project is not found or execution is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get project executions in contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/executions/{organizationName}/{projectName}/latest": {
      "get": {
        "description": "Get latest execution of a project with given name in contest with given name.",
        "operationId": "getLatestExecutionOfProjectInContest",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of an organization",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionDto"
                }
              }
            },
            "description": "Successfully fetched latest project execution in contest."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionDto"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionDto"
                }
              }
            },
            "description": "Either contest is not found or project is not found or execution is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get latest project execution in contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/is-featured": {
      "get": {
        "description": "Check if a given contest is featured or not.",
        "operationId": "isContestFeatured",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successfully fetched contest data."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Contest with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Check if contest is featured.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/my-results": {
      "get": {
        "description": "Get list of best results of your projects in a given contest.",
        "operationId": "getBestResultsInUserProjects",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Successfully fetched your best results."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Either given project or given contest was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get your best results in contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/public-test": {
      "get": {
        "description": "Get public test for contest with given name.",
        "operationId": "getPublicTestForContest",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of a testSuite",
            "in": "query",
            "name": "testSuiteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestFilesContent"
                }
              }
            },
            "description": "Successfully fetched public tests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestFilesContent"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestFilesContent"
                }
              }
            },
            "description": "Either contest with such name was not found or tests are not provided/not attached to given contest."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get public test for contest with given name.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{contestName}/scores": {
      "get": {
        "description": "Get scores of all projects in contest.",
        "operationId": "getRatingsInContest",
        "parameters": [
          {
            "description": "name of a contest",
            "in": "path",
            "name": "contestName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Successfully fetched contest scores."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get scores of all projects in contest.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{organizationName}/{projectName}/best": {
      "get": {
        "description": "Get list of contests in which given project has higher results.",
        "operationId": "getBestProjectContests",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "number of contests that will be fetched, default is 4",
            "in": "path",
            "name": "amount",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 4
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Successfully fetched best project contests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContestResult"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get best contests of a project.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/contests/{organizationName}/{projectName}/eligible-contests": {
      "get": {
        "description": "Get list of contest names that a given project can participate in.",
        "operationId": "getAvailableContestsForProject",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Successfully fetched contests available for project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get contests that can be participated.",
        "tags": [
          "contests"
        ]
      }
    },
    "/api/v1/execution": {
      "get": {
        "operationId": "getExecution",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Execution"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "execution-controller"
        ]
      }
    },
    "/api/v1/execution/delete": {
      "post": {
        "operationId": "deleteExecutionsByExecutionIds",
        "parameters": [
          {
            "in": "query",
            "name": "executionIds",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "execution-controller"
        ]
      }
    },
    "/api/v1/execution/delete-all-except-contest": {
      "post": {
        "operationId": "deleteExecutionForProject",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "execution-controller"
        ]
      }
    },
    "/api/v1/executionDto": {
      "get": {
        "operationId": "getExecutionDto",
        "parameters": [
          {
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionDto"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "execution-controller"
        ]
      }
    },
    "/api/v1/executionDtoList": {
      "post": {
        "operationId": "getExecutionByProject",
        "parameters": [
          {
            "in": "query",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutionFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionDto"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "execution-controller"
        ]
      }
    },
    "/api/v1/files/get-debug-info": {
      "post": {
        "operationId": "getDebugInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestExecutionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/files/get-execution-info": {
      "post": {
        "operationId": "getExecutionInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestExecutionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/files/{organizationName}/{projectName}/delete": {
      "delete": {
        "operationId": "delete",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "uploadedMillis",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/files/{organizationName}/{projectName}/download": {
      "post": {
        "description": "Download a file by execution ID and FileKey.",
        "operationId": "download",
        "parameters": [
          {
            "description": "organization name of additional file key",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "project name of additional file key",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of additional file key",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "uploaded mills of additional file key",
            "in": "query",
            "name": "uploadedMillis",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Returns content of the file."
          },
          "401": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Execution with provided ID is not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Download a file by execution ID and FileKey.",
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/files/{organizationName}/{projectName}/list": {
      "get": {
        "operationId": "list_1",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/files/{organizationName}/{projectName}/upload": {
      "post": {
        "operationId": "upload",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/image/upload": {
      "post": {
        "operationId": "uploadImage",
        "parameters": [
          {
            "in": "query",
            "name": "owner",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ORGANIZATION",
                "USER"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImageInfo"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "files"
        ]
      }
    },
    "/api/v1/latestExecution": {
      "get": {
        "operationId": "getLatestExecutionForProject",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionDto"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "execution-controller"
        ]
      }
    },
    "/api/v1/organizations/all": {
      "get": {
        "description": "Get organizations",
        "operationId": "getAllOrganizations",
        "parameters": [
          {
            "description": "Whether deleted organizations should be excluded from the response. The default is false.",
            "in": "query",
            "name": "onlyActive",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Successfully fetched all registered organizations"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get all organizations",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/by-user/not-deleted": {
      "get": {
        "description": "Get not deleted organizations where user is a member, and his roles in those organizations.",
        "operationId": "getOrganizationWithRoles",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            },
            "description": "Successfully fetched organization infos."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            },
            "description": "Could not find user with this id."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get user\u0027s organizations.",
        "tags": [
          "roles",
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/can-create-contests": {
      "get": {
        "description": "Get all organizations that can create contests where user is a member.",
        "operationId": "getAllUsersOrganizationsThatCanCreateContests",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Role removed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "User doesn\u0027t have permissions to manage this members"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Requested user or organization doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get all user\u0027s organizations that can create contests.",
        "tags": [
          "roles",
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/get/by-prefix": {
      "get": {
        "description": "Get list of organizations matching prefix.",
        "operationId": "getOrganizationNamesByPrefix",
        "parameters": [
          {
            "in": "query",
            "name": "prefix",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Successfully fetched list of organizations."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get organization by prefix.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/get/list": {
      "get": {
        "description": "Get list of all organizations where current user is a participant.",
        "operationId": "getOrganizationsByUser",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Successfully fetched list of organizations."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get your organizations.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/not-deleted": {
      "post": {
        "description": "Get non-deleted organizations.",
        "operationId": "getNotDeletedOrganizations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            },
            "description": "Successfully fetched non-deleted organizations."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get non-deleted organizations.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/save": {
      "post": {
        "description": "Create a new organization.",
        "operationId": "saveOrganization",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully saved a new organization."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Requested name is not available."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Create a new organization.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}": {
      "get": {
        "description": "Get an organization by its name.",
        "operationId": "getOrganizationByName",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Successfully fetched organization by it\u0027s name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Organization with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get organization by name.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/avatar": {
      "get": {
        "description": "Get organization avatar by organization name.",
        "operationId": "avatar_1",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImageInfo"
                }
              }
            },
            "description": "Successfully fetched avatar by organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImageInfo"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get avatar by organization name.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/create-git": {
      "post": {
        "description": "Create git in organization.",
        "operationId": "createGit",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully saved an organization git."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for saving organization git."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not find an organization with such name."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Provided invalid git credential."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Create git in organization.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/delete": {
      "delete": {
        "description": "Delete existing organization by its name.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully deleted an organization."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for deleting this organization."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not find an organization with such name."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "There are projects connected to organization. Please delete all of them and try again."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Delete existing organization.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/delete-git": {
      "delete": {
        "description": "Upsert organization git.",
        "operationId": "deleteGit",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "url of a git",
            "in": "query",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully deleted an organization git credentials and all corresponding data."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for deleting organization git credentials."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not find an organization with such name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Upsert organization git.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/get-organization-contest-rating": {
      "get": {
        "description": "Get organization contest rating.",
        "operationId": "getOrganizationContestRating",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Successfully get an organization contest rating."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Could not find an organization with such name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get organization contest rating.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/list-git": {
      "get": {
        "description": "Get a list of organization\u0027s Gits.",
        "operationId": "listGit",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitDto"
                  }
                }
              }
            },
            "description": "Successfully fetched a list of GitDtos."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitDto"
                  }
                }
              }
            },
            "description": "Could not find an organization with such name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get organization Gits.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/manage-contest-permission": {
      "post": {
        "description": "Make an organization to be able to create contests.",
        "operationId": "setAbilityToCreateContest",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "new flag for contest creation ability",
            "in": "query",
            "name": "isAbleToCreateContests",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully changed ability to create contests."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not change ability to create contests due to lack of permission."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Organization with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Make an organization to be able to create contests.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/update": {
      "post": {
        "description": "Change settings of an existing organization by it\u0027s name.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully updated an organization."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for managing this organization."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not find an organization with such name."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Organization with such name already exists."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update existing organization.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/update-git": {
      "post": {
        "description": "Update existed git in organization.",
        "operationId": "updateGit",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully saved an organization git."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for saving organization git."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not find an organization with such name or git credential with provided url."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Provided invalid git credential."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update existed git in organization.",
        "tags": [
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/users": {
      "get": {
        "description": "Get list of users that are connected with given organization.",
        "operationId": "getAllUsersByOrganizationName",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Successfully fetched contest by it\u0027s name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Contest with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get list of users that are connected with given organization.",
        "tags": [
          "roles",
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/users/not-from": {
      "get": {
        "description": "Get all users not connected with organization with name organizationName whose names start with the same prefix.",
        "operationId": "getAllUsersNotFromOrganizationWithNamesStartingWith",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "prefix of username",
            "in": "query",
            "name": "prefix",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Successfully fetched list of users"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Requested organization doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get all users not from organization with names starting with a given prefix.",
        "tags": [
          "roles",
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/users/roles": {
      "get": {
        "description": "If userName is not present, then will return the role of current user in given organization, otherwise will return role of user with name userName in organization with name organizationName.",
        "operationId": "getRole_1",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a user",
            "in": "query",
            "name": "userName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "Successfully fetched user\u0027s role."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "You are not allowed to see requested user\u0027s role."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "Requested user or organization doesn\u0027t exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get user\u0027s role in organization with given name.",
        "tags": [
          "roles",
          "organizations"
        ]
      },
      "post": {
        "description": "Set user\u0027s role in organization with given name.",
        "operationId": "setRole_1",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pair of userName and role that is requested to be set",
            "in": "query",
            "name": "setRoleRequest",
            "required": true
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Permission added"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User doesn\u0027t have permissions to manage this members"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Requested user or organization doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Set user\u0027s role in organization with given name.",
        "tags": [
          "roles",
          "organizations"
        ]
      }
    },
    "/api/v1/organizations/{organizationName}/users/roles/{userName}": {
      "delete": {
        "description": "Remove user\u0027s role in organization with given name.",
        "operationId": "removeRole_1",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of user whose role is requested to be removed",
            "in": "path",
            "name": "userName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Role was successfully removed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User doesn\u0027t have permissions to manage this members"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Requested user or organization doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Remove user\u0027s role in organization with given name.",
        "tags": [
          "roles",
          "organizations"
        ]
      }
    },
    "/api/v1/projects/": {
      "get": {
        "description": "Get all projects, available for current user.",
        "operationId": "getProjects",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Projects successfully fetched."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get all available projects.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/all": {
      "get": {
        "description": "Get all projects, including deleted and private. Only accessible for super admins",
        "operationId": "getProjects_1",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Projects successfully fetched."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get all projects.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/get-for-current-user": {
      "get": {
        "description": "Get list of projects related to current user",
        "operationId": "getProjectsOfCurrentUser",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Successfully fetched users from project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get projects of current authenticated user",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/get/not-deleted-projects-by-organization": {
      "get": {
        "description": "Get non-deleted projects by organization name.",
        "operationId": "getNonDeletedProjectsByOrganizationName",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Successfully fetched projects by organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get non-deleted projects by organization name.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/get/organization-name": {
      "get": {
        "description": "Get project by name and organization name.",
        "operationId": "getProjectByNameAndOrganizationName",
        "parameters": [
          {
            "description": "name of a project",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Successfully fetched project by name and organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Not enough permission for accessing given project."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Could not find project with such name and organization name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get project by name and organization name.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/get/projects-by-organization": {
      "get": {
        "description": "Get all projects by organization name.",
        "operationId": "getProjectsByOrganizationName",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Successfully fetched projects by organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get all projects by organization name.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/not-deleted": {
      "post": {
        "description": "Get non-deleted projects, available for current user.",
        "operationId": "getNotDeletedProjectsWithFilters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Successfully fetched non-deleted projects."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get non-deleted projects.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/save": {
      "post": {
        "description": "Create a new project.",
        "operationId": "saveProject",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully created a new project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Could not find organization with such name."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Either invalid data, or project with such name is already created."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Create a new project.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/update": {
      "post": {
        "description": "Update an existing project.",
        "operationId": "updateProject",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully updated a project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for managing project settings."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Either project or organization could not be found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Update an existing project.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/{organizationName}/{projectName}/delete": {
      "delete": {
        "description": "Delete a project.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully deleted a project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Not enough permission for project deletion."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Either could not find such organization or such project in such organization."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Delete a project.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/{organizationName}/{projectName}/users": {
      "get": {
        "description": "Get list of users that are connected with given project and their roles in it.",
        "operationId": "getAllUsersByProjectNameAndOrganizationName",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Successfully fetched users from project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Project with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get users from project with their roles.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/{organizationName}/{projectName}/users/not-from": {
      "get": {
        "description": "Get list of users that are not connected with given project.",
        "operationId": "getAllUsersNotFromProjectWithNamesStartingWith",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "prefix",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Successfully fetched users not from project."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInfo"
                  }
                }
              }
            },
            "description": "Project with such name was not found or considered to be private."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get users not from project.",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v1/projects/{organizationName}/{projectName}/users/roles": {
      "get": {
        "description": "If userName is not present, then will return the role of current user in given project, otherwise will return role of user with name userName in project with name projectName.",
        "operationId": "getRole",
        "parameters": [
          {
            "description": "name of an organization in which given project is in",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a user that is being requested",
            "in": "query",
            "name": "userName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "Successfully fetched user\u0027s role"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "Requested user or project doesn\u0027t exist or the user doesn\u0027t have enough permissions (i.e. project is hidden from the current user)"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get role for a user on a particular project.",
        "tags": [
          "projects",
          "roles"
        ]
      },
      "post": {
        "description": "Set role for a user on a particular project",
        "operationId": "setRole",
        "parameters": [
          {
            "description": "name of an organization in which given project is in",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "setRoleRequest passed through body",
            "in": "path",
            "name": "setRoleRequest",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SetRoleRequest"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Permission added"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "User doesn\u0027t have permissions to manage this members"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Requested user or project doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Set role for a user on a particular project",
        "tags": [
          "projects",
          "roles"
        ]
      }
    },
    "/api/v1/projects/{organizationName}/{projectName}/users/roles/{userName}": {
      "delete": {
        "description": "Removes user\u0027s role on a particular project",
        "operationId": "removeRole",
        "parameters": [
          {
            "description": "name of an organization in which given project is in",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of a project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "username",
            "in": "path",
            "name": "userName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Permission removed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "User doesn\u0027t have permissions to manage this members"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Requested user or project doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Removes user\u0027s role on a particular project",
        "tags": [
          "projects",
          "roles"
        ]
      }
    },
    "/api/v1/run/re-trigger": {
      "post": {
        "operationId": "reTrigger",
        "parameters": [
          {
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "run-execution-controller"
        ]
      }
    },
    "/api/v1/run/trigger": {
      "post": {
        "operationId": "trigger",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExecutionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "run-execution-controller"
        ]
      }
    },
    "/api/v1/test-execution": {
      "post": {
        "operationId": "getTestExecutionByLocation",
        "parameters": [
          {
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestResultLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestExecutionDto"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "test-executions"
        ]
      }
    },
    "/api/v1/test-executions": {
      "post": {
        "operationId": "getTestExecutions",
        "parameters": [
          {
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "size",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "checkDebugInfo",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestExecutionFilters"
              }
            }
          }
        },
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestExecutionDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "test-executions"
        ]
      }
    },
    "/api/v1/test-suites-sources/available": {
      "get": {
        "description": "Get list of organizations with public test suite sources",
        "operationId": "getOrganizationNamesWithPublicTestSuiteSources",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Successfully fetched organizations with public test suite sources."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get organizations with public test suite sources.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/create": {
      "post": {
        "description": "Get or create a new test suite source by provided values.",
        "operationId": "createTestSuitesSource",
        "parameters": [
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSuitesSourceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Successfully get or create test suites source with requested values."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Either git credentials were not found by provided url or organization was not found by provided name."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Test suite name is already taken."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get or create a new test suite source by provided values.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/update": {
      "post": {
        "description": "Get or create a new test suite source by provided values.",
        "operationId": "update",
        "parameters": [
          {
            "description": "ID of test suites source",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSuitesSourceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Successfully get or create test suites source with requested values."
          },
          "400": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Try to change organization or git by this request."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Test suites source was not found by provided ID."
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONFLICT",
                    "EXIST",
                    "NEW",
                    "UPDATED"
                  ]
                }
              }
            },
            "description": "Test suite name is already taken."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get or create a new test suite source by provided values.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/list": {
      "get": {
        "description": "List test suites source by organization name.",
        "operationId": "list",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Successfully fetched list of test suites sources by organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Organization was not found by provided name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "List test suites source by organization name.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/list-snapshot": {
      "get": {
        "description": "List of snapshot for all test suites sources in requested organization.",
        "operationId": "listSnapshots",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceSnapshotKey"
                  }
                }
              }
            },
            "description": "Successfully listed snapshots for all test suites sources in requested organization."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceSnapshotKey"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceSnapshotKey"
                  }
                }
              }
            },
            "description": "Organization was not found by provided name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "List of snapshot for all test suites sources in requested organization.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/list-with-ids": {
      "get": {
        "description": "List test suites source with id by organization name.",
        "operationId": "listWithIds",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DtoWithIdTestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Successfully fetched list of test suites sources with ids by organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DtoWithIdTestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DtoWithIdTestSuitesSourceDto"
                  }
                }
              }
            },
            "description": "Organization was not found by provided name."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "List test suites source with id by organization name.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}": {
      "get": {
        "description": "Get test suites source by organization name and test suites source name.",
        "operationId": "findAsDtoByName",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestSuitesSourceDto"
                }
              }
            },
            "description": "Successfully fetched list of test suites sources by organization name."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestSuitesSourceDto"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestSuitesSourceDto"
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get test suites source by organization name and source name.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/branch-list-to-fetch": {
      "get": {
        "description": "Get list of branches which can be fetched from test suites source.",
        "operationId": "branchListToFetch",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Successfully listed branches which can be fetched from requested test suites source."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get list of branches which can be fetched from test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/contains-snapshot": {
      "get": {
        "description": "Check that test suites source contains provided version.",
        "operationId": "containsSnapshot",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of checking snapshot",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successfully checked snapshot with provided values."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Check that test suites source contains provided version.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/delete-test-suites-and-snapshot": {
      "delete": {
        "description": "Delete test suites and snapshot for requested version from provided test suites source.",
        "operationId": "deleteTestSuitesAndSnapshot",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Successfully deleted test suites and snapshot for requested version from provided source."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Delete test suites and snapshot for requested version from provided test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/download-snapshot": {
      "post": {
        "description": "Download a snapshot of test suites source.",
        "operationId": "downloadSnapshot",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of downloading snapshot",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successfully downloaded snapshot with provided version."
          },
          "401": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "char": {
                        "type": "string"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "readOnly": {
                        "type": "boolean"
                      },
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Download a snapshot of test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/fetch": {
      "post": {
        "description": "Post fetching of new tests from test suites source.",
        "operationId": "triggerFetch",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "fetch mode",
            "in": "query",
            "name": "mode",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "BY_BRANCH",
                "BY_COMMIT",
                "BY_TAG"
              ]
            }
          },
          {
            "description": "version to be fetched: tag, branch or commit id",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Successfully trigger fetching new tests from requested test suites source."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Post fetching of new tests from test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/get-test-suites": {
      "get": {
        "description": "List of test suites in requested test suites source.",
        "operationId": "getTestSuiteDtos",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Successfully listed snapshots for requested test suites source."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "List of test suites in requested test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/list-snapshot": {
      "get": {
        "description": "List of snapshot for test suites source.",
        "operationId": "listSnapshotVersions",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceSnapshotKey"
                  }
                }
              }
            },
            "description": "Successfully listed snapshots for requested test suites source."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceSnapshotKey"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuitesSourceSnapshotKey"
                  }
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "List of snapshot for test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/tag-list-to-fetch": {
      "get": {
        "description": "Get list of tags which can be fetched from test suites source.",
        "operationId": "tagListToFetch",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Successfully listed tags which can be fetched from requested test suites source."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get list of tags which can be fetched from test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites-sources/{organizationName}/{sourceName}/upload-snapshot": {
      "post": {
        "description": "Upload a snapshot of test suites source.",
        "operationId": "uploadSnapshot",
        "parameters": [
          {
            "description": "name of organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of test suites source",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version of uploading snapshot",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "creationTime of uploading snapshot",
            "in": "query",
            "name": "creationTime",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "content of uploading snapshot",
            "in": "query",
            "name": "content",
            "required": true
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "$ref": "#/components/schemas/Part"
                  }
                },
                "required": [
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Successfully uploaded provided snapshot."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            },
            "description": "Either organization was not found by provided name or test suites source with such name in organization name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Upload a snapshot of test suites source.",
        "tags": [
          "test-suites-source"
        ]
      }
    },
    "/api/v1/test-suites/public": {
      "get": {
        "description": "Get list of public test suites.",
        "operationId": "getPublicTestSuites",
        "parameters": [
          {
            "description": "is given request sent for browsing test suites for contest, default is false",
            "in": "query",
            "name": "isContest",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Successfully fetched public test suites."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get list of public test suites.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{organizationName}/available": {
      "get": {
        "description": "Get the list of test suites that are available for given organization.",
        "operationId": "getAvailableTestSuitesByOrganization",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "requested permission: READ, WRITE or DELETE",
            "in": "query",
            "name": "permission",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DELETE",
                "READ",
                "WRITE"
              ]
            }
          },
          {
            "description": "is given request sent for browsing test suites for contest, default is false",
            "in": "query",
            "name": "isContest",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Successfully fetched test suites available for given organization."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Current user doesn\u0027t have enough permissions to access test suites from current organization."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Organization with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get the list of test suites that are available for given organization.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{organizationName}/filtered": {
      "get": {
        "description": "Get test suites with filters.",
        "operationId": "getFilteredTestSuites",
        "parameters": [
          {
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "test suite tags substring for filtering, default is empty",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "test suite name substring for filtering, default is empty",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "test suite language substring for filtering, default is empty",
            "in": "query",
            "name": "language",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "is given request sent for browsing test suites for contest, default is false",
            "in": "query",
            "name": "isContest",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Successfully fetched filtered test suites."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get test suites with filters.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{organizationName}/get-by-ids": {
      "post": {
        "description": "Get list of available test suites for given organization by their ids.",
        "operationId": "getTestSuitesByIds",
        "parameters": [
          {
            "description": "name of an organization",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "is given request sent for browsing test suites for contest, default is false",
            "in": "query",
            "name": "isContest",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Successfully fetched test suites by ids."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Current user doesn\u0027t have enough permissions to access test suites from current organization."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteDto"
                  }
                }
              }
            },
            "description": "Organization with such name was not found."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get test suites by ids.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{organizationName}/{testSuiteId}": {
      "get": {
        "description": "Get organization\u0027s rights for given test suite.",
        "operationId": "getRights",
        "parameters": [
          {
            "description": "name of an organization for rights check",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of a test suite",
            "in": "path",
            "name": "testSuiteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LnkOrganizationTestSuiteDto"
                }
              }
            },
            "description": "Successfully fetched organization\u0027s rights."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LnkOrganizationTestSuiteDto"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LnkOrganizationTestSuiteDto"
                }
              }
            },
            "description": "Permissions for test suite access were not gained."
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LnkOrganizationTestSuiteDto"
                }
              }
            },
            "description": "Requested organization or test suite doesn\u0027t exist."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Get organization\u0027s rights for given test suite.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{ownerOrganizationName}/batch-change-visibility": {
      "post": {
        "description": "Make given test suites public or private.",
        "operationId": "changeTestSuiteVisibilityBatch",
        "parameters": [
          {
            "description": "name of an organization-maintainer",
            "in": "path",
            "name": "ownerOrganizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "flag to make test suite public or private",
            "in": "query",
            "name": "isPublic",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Visibility changed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Given organization has been forbidden to change given test suite visibility"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Test suite or organization-maintainer doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Make given test suites public or private.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{ownerOrganizationName}/batch-set-rights": {
      "post": {
        "description": "Set organization\u0027s rights for given test suite.",
        "operationId": "setRightsBatched",
        "parameters": [
          {
            "description": "name of an organization-maintainer",
            "in": "path",
            "name": "ownerOrganizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRightsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Rights changed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Given organization has been forbidden to change given test suite rights"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Requested organization, test suite or organization-maintainer doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Set organization\u0027s rights for given test suite.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{ownerOrganizationName}/{testSuiteId}": {
      "post": {
        "description": "Set organization\u0027s rights for given test suite.",
        "operationId": "setRights",
        "parameters": [
          {
            "description": "name of an organization-maintainer",
            "in": "path",
            "name": "ownerOrganizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of test suite that is maintained",
            "in": "path",
            "name": "testSuiteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRightsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Rights changed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Given organization has been forbidden to change given test suite rights"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Requested organization, test suite or organization-maintainer doesn\u0027t exist"
          },
          "409": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Cannot set Rights.NONE with this method."
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Set organization\u0027s rights for given test suite.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/test-suites/{ownerOrganizationName}/{testSuiteId}/{requestedOrganizationName}": {
      "delete": {
        "description": "Remove organization\u0027s rights over test suite with given id.",
        "operationId": "removeRights",
        "parameters": [
          {
            "description": "name of an organization-maintainer",
            "in": "path",
            "name": "ownerOrganizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of test suite that is maintained",
            "in": "path",
            "name": "testSuiteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "name of an organization to be maintained",
            "in": "path",
            "name": "requestedOrganizationName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Rights were successfully removed"
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Given organization has been forbidden to change given test suite rights"
          },
          "404": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Requested organization, test suite or organization-maintainer doesn\u0027t exist"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "summary": "Remove organization\u0027s rights over test suite with given id.",
        "tags": [
          "rights",
          "organizations",
          "test-suites"
        ]
      }
    },
    "/api/v1/testExecution/count": {
      "get": {
        "operationId": "getTestExecutionsCount",
        "parameters": [
          {
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "FAILED",
                "IGNORED",
                "INTERNAL_ERROR",
                "PASSED",
                "READY_FOR_TESTING",
                "RUNNING",
                "TEST_ERROR"
              ]
            }
          },
          {
            "in": "query",
            "name": "testSuite",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "test-executions"
        ]
      }
    },
    "/api/v1/testLatestExecutions": {
      "get": {
        "operationId": "getTestExecutionsByStatus",
        "parameters": [
          {
            "in": "query",
            "name": "executionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "FAILED",
                "IGNORED",
                "INTERNAL_ERROR",
                "PASSED",
                "READY_FOR_TESTING",
                "RUNNING",
                "TEST_ERROR"
              ]
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "example": "basic",
            "in": "header",
            "name": "X-Authorization-Source",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteExecutionStatisticDto"
                  }
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "basic": []
          }
        ],
        "tags": [
          "test-executions"
        ]
      }
    },
    "/api/v1/users/global-role": {
      "get": {
        "operationId": "getSelfGlobalRole",
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "ADMIN",
                    "NONE",
                    "OWNER",
                    "SUPER_ADMIN",
                    "VIEWER"
                  ]
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "users-details-controller"
        ]
      }
    },
    "/api/v1/users/save": {
      "post": {
        "operationId": "saveUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "users-details-controller"
        ]
      }
    },
    "/api/v1/users/{userName}": {
      "get": {
        "operationId": "findByName",
        "parameters": [
          {
            "in": "path",
            "name": "userName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "users-details-controller"
        ]
      }
    },
    "/api/v1/users/{userName}/avatar": {
      "get": {
        "operationId": "avatar",
        "parameters": [
          {
            "in": "path",
            "name": "userName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImageInfo"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "users-details-controller"
        ]
      }
    },
    "/api/v1/users/{userName}/save/token": {
      "post": {
        "operationId": "saveUserToken",
        "parameters": [
          {
            "in": "path",
            "name": "userName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "users-details-controller"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AwesomeBenchmarks": {
        "required": [
          "category",
          "description",
          "documentation",
          "homepage",
          "language",
          "license",
          "name",
          "scenarios_num",
          "sources",
          "tags"
        ],
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "ALL",
              "AI",
              "AUDIT",
              "CODING_STANDARD",
              "PERFORMANCE",
              "STATIC_ANALYSIS"
            ]
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "language": {
            "type": "string"
          },
          "license": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scenarios_num": {
            "type": "integer",
            "format": "int64"
          },
          "sources": {
            "type": "string"
          },
          "tags": {
            "type": "string"
          }
        }
      },
      "ContestDto": {
        "required": [
          "name",
          "organizationName",
          "status",
          "testSuites"
        ],
        "type": "object",
        "properties": {
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "DELETED"
            ]
          },
          "testSuites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestSuiteDto"
            }
          }
        },
        "description": "contest requested for creation"
      },
      "ContestResult": {
        "required": [
          "contestName",
          "hasFailedTest",
          "organizationName",
          "projectName",
          "sdk",
          "submissionStatus"
        ],
        "type": "object",
        "properties": {
          "contestName": {
            "type": "string"
          },
          "hasFailedTest": {
            "type": "boolean"
          },
          "organizationName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "sdk": {
            "type": "string"
          },
          "submissionStatus": {
            "type": "string",
            "enum": [
              "ERROR",
              "FINISHED",
              "OBSOLETE",
              "PENDING",
              "RUNNING"
            ]
          },
          "submissionTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateExecutionRequest": {
        "required": [
          "files",
          "projectCoordinates",
          "sdk",
          "testSuiteIds",
          "testingType"
        ],
        "type": "object",
        "properties": {
          "batchSizeForAnalyzer": {
            "type": "string"
          },
          "contestName": {
            "type": "string"
          },
          "execCmd": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileKey"
            }
          },
          "projectCoordinates": {
            "$ref": "#/components/schemas/ProjectCoordinates"
          },
          "sdk": {
            "$ref": "#/components/schemas/Sdk"
          },
          "testSuiteIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "testingType": {
            "type": "string",
            "enum": [
              "CONTEST_MODE",
              "PRIVATE_TESTS",
              "PUBLIC_TESTS"
            ]
          }
        }
      },
      "DtoWithIdTestSuitesSourceDto": {
        "required": [
          "content",
          "id"
        ],
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/TestSuitesSourceDto"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Execution": {
        "required": [
          "additionalFiles",
          "allTests",
          "expectedChecks",
          "failedTests",
          "fileKeys",
          "matchedChecks",
          "passedTests",
          "project",
          "runningTests",
          "sdk",
          "skippedTests",
          "startTime",
          "status",
          "type",
          "unexpectedChecks",
          "unmatchedChecks"
        ],
        "type": "object",
        "properties": {
          "additionalFiles": {
            "type": "string"
          },
          "allTests": {
            "type": "integer",
            "format": "int64"
          },
          "batchSize": {
            "type": "integer",
            "format": "int32"
          },
          "batchSizeForAnalyzer": {
            "type": "string"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "execCmd": {
            "type": "string"
          },
          "expectedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "failedTests": {
            "type": "integer",
            "format": "int64"
          },
          "fileKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileKey"
            }
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "matchedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "passedTests": {
            "type": "integer",
            "format": "int64"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "runningTests": {
            "type": "integer",
            "format": "int64"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "sdk": {
            "type": "string"
          },
          "skippedTests": {
            "type": "integer",
            "format": "int64"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "ERROR",
              "FINISHED",
              "OBSOLETE",
              "PENDING",
              "RUNNING"
            ]
          },
          "testSuiteSourceName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CONTEST_MODE",
              "PRIVATE_TESTS",
              "PUBLIC_TESTS"
            ]
          },
          "unexpectedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "unmatchedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ExecutionDto": {
        "required": [
          "allTests",
          "expectedChecks",
          "failedTests",
          "id",
          "matchedChecks",
          "passedTests",
          "runningTests",
          "skippedTests",
          "startTime",
          "status",
          "type",
          "unexpectedChecks",
          "unmatchedChecks"
        ],
        "type": "object",
        "properties": {
          "allTests": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "expectedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "failedTests": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "matchedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "passedTests": {
            "type": "integer",
            "format": "int64"
          },
          "runningTests": {
            "type": "integer",
            "format": "int64"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "skippedTests": {
            "type": "integer",
            "format": "int64"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "ERROR",
              "FINISHED",
              "OBSOLETE",
              "PENDING",
              "RUNNING"
            ]
          },
          "testSuiteSourceName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CONTEST_MODE",
              "PRIVATE_TESTS",
              "PUBLIC_TESTS"
            ]
          },
          "unexpectedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "unmatchedChecks": {
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ExecutionFilters": {
        "required": [
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "endTime": {
            "$ref": "#/components/schemas/LocalDateTime"
          },
          "startTime": {
            "$ref": "#/components/schemas/LocalDateTime"
          }
        }
      },
      "FileInfo": {
        "required": [
          "isExecutable",
          "key",
          "name",
          "sizeBytes"
        ],
        "type": "object",
        "properties": {
          "isExecutable": {
            "type": "boolean"
          },
          "key": {
            "$ref": "#/components/schemas/FileKey"
          },
          "name": {
            "type": "string"
          },
          "sizeBytes": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FileKey": {
        "required": [
          "name",
          "projectCoordinates",
          "uploadedMillis"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "projectCoordinates": {
            "$ref": "#/components/schemas/ProjectCoordinates"
          },
          "uploadedMillis": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GitDto": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ImageInfo": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          }
        }
      },
      "LnkOrganizationTestSuiteDto": {
        "required": [
          "organization",
          "rights",
          "testSuite"
        ],
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/OrganizationDto"
          },
          "rights": {
            "type": "string",
            "enum": [
              "MAINTAIN",
              "NONE",
              "USE"
            ]
          },
          "testSuite": {
            "$ref": "#/components/schemas/TestSuiteDto"
          }
        }
      },
      "LocalDate": {
        "required": [
          "dayOfMonth",
          "dayOfWeek",
          "dayOfYear",
          "month",
          "monthNumber",
          "value$kotlinx_datetime",
          "year"
        ],
        "type": "object",
        "properties": {
          "dayOfMonth": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "type": "string",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "dayOfYear": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "string",
            "enum": [
              "JANUARY",
              "FEBRUARY",
              "MARCH",
              "APRIL",
              "MAY",
              "JUNE",
              "JULY",
              "AUGUST",
              "SEPTEMBER",
              "OCTOBER",
              "NOVEMBER",
              "DECEMBER"
            ]
          },
          "monthNumber": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "format": "date",
            "writeOnly": true
          },
          "value$kotlinx_datetime": {
            "type": "string",
            "format": "date"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LocalDateTime": {
        "required": [
          "date",
          "dayOfMonth",
          "dayOfWeek",
          "dayOfYear",
          "hour",
          "minute",
          "month",
          "monthNumber",
          "nanosecond",
          "second",
          "time",
          "value$kotlinx_datetime",
          "year"
        ],
        "type": "object",
        "properties": {
          "date": {
            "$ref": "#/components/schemas/LocalDate"
          },
          "dayOfMonth": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "type": "string",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "dayOfYear": {
            "type": "integer",
            "format": "int32"
          },
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "string",
            "enum": [
              "JANUARY",
              "FEBRUARY",
              "MARCH",
              "APRIL",
              "MAY",
              "JUNE",
              "JULY",
              "AUGUST",
              "SEPTEMBER",
              "OCTOBER",
              "NOVEMBER",
              "DECEMBER"
            ]
          },
          "monthNumber": {
            "type": "integer",
            "format": "int32"
          },
          "nanosecond": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "time": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "value": {
            "type": "string",
            "format": "date-time",
            "writeOnly": true
          },
          "value$kotlinx_datetime": {
            "type": "string",
            "format": "date-time"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "LocalTime": {
        "required": [
          "hour",
          "minute",
          "nanosecond",
          "second",
          "value$kotlinx_datetime"
        ],
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "nanosecond": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/LocalTime"
          },
          "value$kotlinx_datetime": {
            "$ref": "#/components/schemas/LocalTime"
          }
        }
      },
      "Organization": {
        "required": [
          "canCreateContests",
          "name",
          "status"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "canCreateContests": {
            "type": "boolean"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "DELETED"
            ]
          }
        }
      },
      "OrganizationDto": {
        "required": [
          "canCreateContests",
          "description",
          "name",
          "userRoles"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "canCreateContests": {
            "type": "boolean"
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "globalRating": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string"
          },
          "userRoles": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ADMIN",
                "NONE",
                "OWNER",
                "SUPER_ADMIN",
                "VIEWER"
              ]
            }
          }
        }
      },
      "OrganizationFilters": {
        "required": [
          "prefix",
          "status"
        ],
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "DELETED"
            ]
          }
        }
      },
      "Part": {
        "type": "object"
      },
      "Project": {
        "required": [
          "contestRating",
          "name",
          "numberOfContainers",
          "organization",
          "public",
          "status"
        ],
        "type": "object",
        "properties": {
          "contestRating": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "numberOfContainers": {
            "type": "integer",
            "format": "int32"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "public": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "CREATED",
              "DELETED"
            ]
          },
          "url": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ProjectCoordinates": {
        "required": [
          "organizationName",
          "projectName"
        ],
        "type": "object",
        "properties": {
          "organizationName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        }
      },
      "ProjectDto": {
        "required": [
          "description",
          "email",
          "isPublic",
          "name",
          "organizationName",
          "url"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ProjectFilters": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Sdk": {
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "SetRightsRequest": {
        "required": [
          "organizationName",
          "rights",
          "testSuiteIds"
        ],
        "type": "object",
        "properties": {
          "organizationName": {
            "type": "string"
          },
          "rights": {
            "type": "string",
            "enum": [
              "MAINTAIN",
              "NONE",
              "USE"
            ]
          },
          "testSuiteIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "SetRoleRequest": {
        "required": [
          "role",
          "userName"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "NONE",
              "OWNER",
              "SUPER_ADMIN",
              "VIEWER"
            ]
          },
          "userName": {
            "type": "string"
          }
        },
        "description": "pair of userName and role that is requested to be set"
      },
      "TestExecutionDto": {
        "required": [
          "filePath",
          "pluginName",
          "status",
          "tags"
        ],
        "type": "object",
        "properties": {
          "agentContainerId": {
            "type": "string"
          },
          "agentContainerName": {
            "type": "string"
          },
          "endTimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "executionId": {
            "type": "integer",
            "format": "int64"
          },
          "expected": {
            "type": "integer",
            "format": "int64"
          },
          "filePath": {
            "type": "string"
          },
          "hasDebugInfo": {
            "type": "boolean"
          },
          "matched": {
            "type": "integer",
            "format": "int64"
          },
          "pluginName": {
            "type": "string"
          },
          "startTimeSeconds": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "FAILED",
              "IGNORED",
              "INTERNAL_ERROR",
              "PASSED",
              "READY_FOR_TESTING",
              "RUNNING",
              "TEST_ERROR"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "testSuiteName": {
            "type": "string"
          },
          "unexpected": {
            "type": "integer",
            "format": "int64"
          },
          "unmatched": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TestExecutionFilters": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "FAILED",
              "IGNORED",
              "INTERNAL_ERROR",
              "PASSED",
              "READY_FOR_TESTING",
              "RUNNING",
              "TEST_ERROR"
            ]
          },
          "tag": {
            "type": "string"
          },
          "testSuite": {
            "type": "string"
          }
        }
      },
      "TestFilesContent": {
        "required": [
          "tags",
          "testLines"
        ],
        "type": "object",
        "properties": {
          "expectedLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "testLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TestResultLocation": {
        "required": [
          "pluginName",
          "testLocation",
          "testName",
          "testSuiteName"
        ],
        "type": "object",
        "properties": {
          "pluginName": {
            "type": "string"
          },
          "testLocation": {
            "type": "string"
          },
          "testName": {
            "type": "string"
          },
          "testSuiteName": {
            "type": "string"
          }
        }
      },
      "TestSuiteDto": {
        "required": [
          "isPublic",
          "name",
          "plugins",
          "source",
          "version"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isPublic": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "plugins": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "FIX",
                "GENERAL",
                "WARN",
                "FIX AND WARN"
              ]
            }
          },
          "source": {
            "$ref": "#/components/schemas/TestSuitesSourceDto"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "TestSuiteExecutionStatisticDto": {
        "required": [
          "countTest",
          "countWithStatusTest",
          "status",
          "testSuiteName"
        ],
        "type": "object",
        "properties": {
          "countTest": {
            "type": "integer",
            "format": "int32"
          },
          "countWithStatusTest": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "FAILED",
              "IGNORED",
              "INTERNAL_ERROR",
              "PASSED",
              "READY_FOR_TESTING",
              "RUNNING",
              "TEST_ERROR"
            ]
          },
          "testSuiteName": {
            "type": "string"
          }
        }
      },
      "TestSuitesSourceDto": {
        "required": [
          "gitDto",
          "name",
          "organizationName",
          "testRootPath"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "gitDto": {
            "$ref": "#/components/schemas/GitDto"
          },
          "latestFetchedVersion": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "testRootPath": {
            "type": "string"
          }
        }
      },
      "TestSuitesSourceSnapshotKey": {
        "required": [
          "creationTimeInMills",
          "organizationName",
          "testSuitesSourceName",
          "version"
        ],
        "type": "object",
        "properties": {
          "creationTimeInMills": {
            "type": "integer",
            "format": "int64"
          },
          "organizationName": {
            "type": "string"
          },
          "testSuitesSourceName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "Unit": {
        "type": "object"
      },
      "User": {
        "required": [
          "isActive",
          "source"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gitHub": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          }
        }
      },
      "UserInfo": {
        "required": [
          "isActive",
          "name",
          "organizations",
          "originalLogins",
          "projects"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "gitHub": {
            "type": "string"
          },
          "globalRole": {
            "type": "string",
            "enum": [
              "ADMIN",
              "NONE",
              "OWNER",
              "SUPER_ADMIN",
              "VIEWER"
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "linkedin": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "oldName": {
            "type": "string"
          },
          "organizations": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ADMIN",
                "NONE",
                "OWNER",
                "SUPER_ADMIN",
                "VIEWER"
              ]
            }
          },
          "originalLogins": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projects": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "ADMIN",
                "NONE",
                "OWNER",
                "SUPER_ADMIN",
                "VIEWER"
              ]
            }
          },
          "source": {
            "type": "string"
          },
          "twitter": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "basic": {
        "scheme": "basic",
        "type": "http"
      }
    }
  }
}