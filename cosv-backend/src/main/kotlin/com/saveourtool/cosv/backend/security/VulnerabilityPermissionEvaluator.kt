package com.saveourtool.cosv.backend.security

import com.saveourtool.cosv.backend.service.VulnerabilityService
import com.saveourtool.cosv.backend.utils.hasRole
import com.saveourtool.save.authservice.utils.userId
import com.saveourtool.save.domain.Role
import com.saveourtool.save.entities.cosv.VulnerabilityMetadataDto
import com.saveourtool.save.entities.vulnerability.VulnerabilityStatus
import com.saveourtool.save.permission.Permission
import com.saveourtool.save.utils.orNotFound

import org.springframework.security.core.Authentication
import org.springframework.stereotype.Component

/**
 * Class that is capable of assessing user permissions.
 */
@Component
class VulnerabilityPermissionEvaluator(
    private val vulnerabilityService: VulnerabilityService,
) {
    /**
     * Check permission for user to read, write and delete vulnerabilities by its [vulnerabilityIdentifier]
     *
     * @param authentication
     * @param vulnerabilityIdentifier
     * @param permission
     * @return true if user with [authentication] has [permission] for [vulnerabilityIdentifier]
     */
    fun hasPermission(
        authentication: Authentication?,
        vulnerabilityIdentifier: String,
        permission: Permission,
    ): Boolean {
        authentication ?: return permission == Permission.READ
        val vulnerability = vulnerabilityService
            .findByName(vulnerabilityIdentifier)
            .orNotFound { "Not found vulnerability $vulnerabilityIdentifier" }

        return when {
            authentication.hasRole(Role.SUPER_ADMIN) -> true
            permission == Permission.READ -> true
            permission == Permission.DELETE -> (vulnerability.status == VulnerabilityStatus.CREATED || vulnerability.status == VulnerabilityStatus.PENDING_REVIEW) &&
                    hasFullPermission(vulnerability, authentication)
            else -> hasFullPermission(vulnerability, authentication)
        }
    }

    /**
     * @param vulnerability vulnerability for change
     * @param authentication
     * @return check permission
     */
    fun hasFullPermission(vulnerability: VulnerabilityMetadataDto, authentication: Authentication): Boolean {
        val linkUsers = vulnerabilityService.findUsersByVulnerabilityId(vulnerability.identifier).map { it.name }
        val vuln = vulnerabilityService.findByIdentifier(vulnerability.identifier)
        return vuln.userId == authentication.userId() || authentication.name in linkUsers
    }
}
